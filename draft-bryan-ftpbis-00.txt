


Network Working Group                                      A. Bryan, Ed.
Internet-Draft                                          February 3, 2011
Obsoletes: 775,959,1639
(if approved)
Updates: 1123 (if approved)
Intended status: Standards Track
Expires: August 7, 2011


                      File Transfer Protocol (FTP)
                         draft-bryan-ftpbis-00

Abstract

   This current edition of the FTP specification is intended to correct
   some minor documentation errors, incorporate and harmonize
   differences between RFCs, and to improve the explanation of some
   protocol features.  Note that this specification is compatible with
   the previous edition.

Status of this Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at http://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on August 7, 2011.

Copyright Notice

   Copyright (c) 2011 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents
   (http://trustee.ietf.org/license-info) in effect on the date of
   publication of this document.  Please review these documents
   carefully, as they describe your rights and restrictions with respect
   to this document.  Code Components extracted from this document must



Bryan                    Expires August 7, 2011                 [Page 1]

Internet-Draft           File Transfer Protocol            February 2011


   include Simplified BSD License text as described in Section 4.e of
   the Trust Legal Provisions and are provided without warranty as
   described in the Simplified BSD License.


Table of Contents

   1.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . .   4
   2.  Document Conventions and Overview . . . . . . . . . . . . . .   4
     2.1.   Basic Tokens . . . . . . . . . . . . . . . . . . . . . .   4
     2.2.   Pathnames  . . . . . . . . . . . . . . . . . . . . . . .   5
       2.2.1.  Pathname Syntax . . . . . . . . . . . . . . . . . . .   7
       2.2.2.  Wildcarding . . . . . . . . . . . . . . . . . . . . .   7
     2.3.   Times  . . . . . . . . . . . . . . . . . . . . . . . . .   7
     2.4.   Server Replies . . . . . . . . . . . . . . . . . . . . .   8
     2.5.   Interpreting Examples  . . . . . . . . . . . . . . . . .   8
     2.6.   History  . . . . . . . . . . . . . . . . . . . . . . . .   9
     2.7.   Terminology  . . . . . . . . . . . . . . . . . . . . . .  10
     2.8.   The FTP Model  . . . . . . . . . . . . . . . . . . . . .  14
   3.  Data Transfer Functions . . . . . . . . . . . . . . . . . . .  16
     3.1.   Data Representation and Storage  . . . . . . . . . . . .  17
       3.1.1.  Data Types  . . . . . . . . . . . . . . . . . . . . .  17
       3.1.2.  Data Structures . . . . . . . . . . . . . . . . . . .  21
     3.2.   Establishing Data Connections  . . . . . . . . . . . . .  24
     3.3.   Data Connection Management . . . . . . . . . . . . . . .  25
     3.4.   Transmission Modes . . . . . . . . . . . . . . . . . . .  26
       3.4.1.  Stream Mode . . . . . . . . . . . . . . . . . . . . .  26
       3.4.2.  Block Mode  . . . . . . . . . . . . . . . . . . . . .  27
       3.4.3.  Compressed Mode . . . . . . . . . . . . . . . . . . .  28
     3.5.   Error Recovery and Restart . . . . . . . . . . . . . . .  30
   4.  File Transfer Functions . . . . . . . . . . . . . . . . . . .  30
     4.1.   FTP Commands . . . . . . . . . . . . . . . . . . . . . .  31
       4.1.1.  Access Control Commands . . . . . . . . . . . . . . .  31
       4.1.2.  Transfer Parameter Commands . . . . . . . . . . . . .  33
       4.1.3.  FTP Service Commands  . . . . . . . . . . . . . . . .  39
       4.1.4.  Feature Negotiation Mechanism . . . . . . . . . . . .  45
       4.1.5.  Extensions to FTP . . . . . . . . . . . . . . . . . .  49
       4.1.6.  Other Extensions  . . . . . . . . . . . . . . . . . . 100
       4.1.7.  Non-standard Command Verbs  . . . . . . . . . . . . . 100
     4.2.   FTP Replies  . . . . . . . . . . . . . . . . . . . . . . 100
       4.2.1.  Protected Replies from RFC 2228 . . . . . . . . . . . 105
       4.2.2.  Reply Code By Function Groups . . . . . . . . . . . . 106
       4.2.3.  Numeric Order List of Reply Codes . . . . . . . . . . 109
   5.  Declarative Specifications  . . . . . . . . . . . . . . . . . 111
     5.1.   Minimum Implementation . . . . . . . . . . . . . . . . . 111
     5.2.   Connections  . . . . . . . . . . . . . . . . . . . . . . 112
     5.3.   Commands . . . . . . . . . . . . . . . . . . . . . . . . 114
       5.3.1.  FTP Commands  . . . . . . . . . . . . . . . . . . . . 115



Bryan                    Expires August 7, 2011                 [Page 2]

Internet-Draft           File Transfer Protocol            February 2011


       5.3.2.  FTP Command Arguments . . . . . . . . . . . . . . . . 116
     5.4.   Sequencing of Commands and Replies . . . . . . . . . . . 116
   6.  State Diagrams  . . . . . . . . . . . . . . . . . . . . . . . 120
   7.  Typical FTP Scenario  . . . . . . . . . . . . . . . . . . . . 125
   8.  Connection Establishment  . . . . . . . . . . . . . . . . . . 126
   9.  IANA Considerations . . . . . . . . . . . . . . . . . . . . . 126
   10. Security Considerations . . . . . . . . . . . . . . . . . . . 127
     10.1.  Privacy and Passwords with Clear Text Protocols  . . . . 127
     10.2.  Securing FTP with TLS  . . . . . . . . . . . . . . . . . 127
     10.3.  The Bounce Attack  . . . . . . . . . . . . . . . . . . . 127
       10.3.1. Protecting Against the Bounce Attack  . . . . . . . . 128
     10.4.  Restricted Access  . . . . . . . . . . . . . . . . . . . 128
     10.5.  Protecting Passwords Against Brute Force Attacks . . . . 129
     10.6.  Protecting Usernames . . . . . . . . . . . . . . . . . . 129
     10.7.  Port Stealing  . . . . . . . . . . . . . . . . . . . . . 130
     10.8.  Software-Base Security Problems  . . . . . . . . . . . . 130
     10.9.  Server Capabilities Exposed by FEAT  . . . . . . . . . . 131
     10.10. SIZE and MLSx  . . . . . . . . . . . . . . . . . . . . . 131
   11. Authors of Included RFCs  . . . . . . . . . . . . . . . . . . 131
   12. References  . . . . . . . . . . . . . . . . . . . . . . . . . 133
     12.1.  Normative References . . . . . . . . . . . . . . . . . . 133
     12.2.  Informative References . . . . . . . . . . . . . . . . . 134
   Appendix A.  Page Structure . . . . . . . . . . . . . . . . . . . 134
   Appendix B.  Directory Commands . . . . . . . . . . . . . . . . . 136
   Appendix C.  RFCs on FTP  . . . . . . . . . . . . . . . . . . . . 139
   Appendix D.  Acknowledgements and Contributors  . . . . . . . . . 143
   Appendix E.  Changelog from RFC 959 and TODO  . . . . . . . . . . 143
   Author's Address  . . . . . . . . . . . . . . . . . . . . . . . . 144























Bryan                    Expires August 7, 2011                 [Page 3]

Internet-Draft           File Transfer Protocol            February 2011


1.  Introduction

   The objectives of FTP are 1) to promote sharing of files (computer
   programs and/or data), 2) to encourage indirect or implicit (via
   programs) use of remote computers, 3) to shield a user from
   variations in file storage systems among hosts, and 4) to transfer
   data reliably and efficiently.  FTP, though usable directly by a user
   at a terminal, is designed mainly for use by programs.

   The attempt in this specification is to satisfy the diverse needs of
   users of maxi-hosts, mini-hosts, personal workstations, and TACs,
   with a simple, and easily implemented protocol design.

   This paper assumes knowledge of the Transmission Control Protocol
   (TCP) [RFC0793] and the Telnet Protocol [RFC0854].  These documents
   are contained in the ARPA-Internet protocol handbook [IPTW].

   [[ Discussion of this draft should take place on ftpext@ietf.org (or
   apps-discuss@ietf.org if necessary). ]]


2.  Document Conventions and Overview

   This specification describes conformance of the File Transfer
   Protocol (FTP).

   In this section, the history, the terminology, and the FTP model are
   discussed.  The terms defined in this section are only those that
   have special significance in FTP.  Some of the terminology is very
   specific to the FTP model; some readers may wish to turn to the
   section on the FTP model (Section 2.3) while reviewing the
   terminology.

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
   document are to be interpreted as described in BCP 14, [RFC2119], as
   scoped to those conformance targets.

   Syntax required is defined using the Augmented BNF defined in
   [RFC5234].

2.1.  Basic Tokens

   This document imports the core ABNF definitions given in Appendix B
   of [RFC5234].  There definitions will be found for basic ABNF
   elements like ALPHA, DIGIT, SP, etc.  The following terms are added
   for use in this document.




Bryan                    Expires August 7, 2011                 [Page 4]

Internet-Draft           File Transfer Protocol            February 2011


        TCHAR          = VCHAR / SP / HTAB    ; visible plus white space
        RCHAR          = ALPHA / DIGIT / "," / "." / ":" / "!" /
                         "@" / "#" / "$" / "%" / "^" /
                         "&" / "(" / ")" / "-" / "_" /
                         "+" / "?" / "/" / "\" / "'" /
                         DQUOTE   ; <"> -- double quote character (%x22)
        SCHAR          = RCHAR / "=" ;

   The VCHAR (from [RFC5234]), RCHAR, SCHAR, and TCHAR types give basic
   character types from varying sub-sets of the ASCII character set for
   use in various commands and responses.


         token          = 1*RCHAR

   A "token" is a string whose precise meaning depends upon the context
   in which it is used.  In some cases it will be a value from a set of
   possible values maintained elsewhere.  In others it might be a string
   invented by one party to an FTP conversation from whatever sources it
   finds relevant.

   Note that in ABNF, string literals are case insensitive.  That
   convention is preserved in this document, and implies that FTP
   commands added by this specification have names that can be
   represented in any case.  That is, "MDTM" is the same as "mdtm",
   "Mdtm" and "MdTm" etc.  However note that ALPHA, in particular, is
   case sensitive.  That implies that a "token" is a case sensitive
   value.  That implication is correct, except where explicitly stated
   to the contrary in this document, or in some other specification that
   defines the values this document specifies be used in a particular
   context.

2.2.  Pathnames

   Various FTP commands take pathnames as arguments, or return pathnames
   in responses.  When the MLST command is supported, as indicated in
   the response to the FEAT command [RFC2389], pathnames are to be
   transferred in one of the following two formats.


        pathname       = utf-8-name / raw
        utf-8-name     = <a UTF-8 encoded Unicode string>
        raw            = <any string that is not a valid UTF-8 encoding>

   Which format is used is at the option of the user-PI or server-PI
   sending the pathname.  UTF-8 encodings [2] contain enough internal
   structure that it is always, in practice, possible to determine
   whether a UTF-8 or raw encoding has been used, in those cases where



Bryan                    Expires August 7, 2011                 [Page 5]

Internet-Draft           File Transfer Protocol            February 2011


   it matters.  While it is useful for the user-PI to be able to
   correctly display a pathname received from the server-PI to the user,
   it is far more important for the user-PI to be able to retain and
   retransmit the identical pathname when required.  Implementations are
   advised against converting a UTF-8 pathname to a local charset that
   isn't capable of representing the full Unicode character repertoire,
   and then attempting to invert the charset translation later.  Note
   that ASCII is a subset of UTF-8.  See also [1].

   Unless otherwise specified, the pathname is terminated by the CRLF
   that terminates the FTP command, or by the CRLF that ends a reply.
   Any trailing spaces preceding that CRLF form part of the name.
   Exactly one space will precede the pathname and serve as a separator
   from the preceding syntax element.  Any additional spaces form part
   of the pathname.  See [RFC2640] for a fuller explanation of the
   character encoding issues.  All implementations supporting MLST MUST
   support [RFC2640].

   Note: for pathnames transferred over a data connection, there is no
   way to represent a pathname containing the characters CR and LF in
   sequence, and distinguish that from the end of line indication.
   Hence, pathnames containing the CRLF pair of characters cannot be
   transmitted over a data connection.  Data connections only contain
   file names transmitted from server-FTP to user-FTP as the result of
   one of the directory listing commands.  Files with names containing
   the CRLF sequence must either have that sequence converted to some
   other form, such that the other form can be recognised and be
   correctly converted back to CRLF, or be omitted from the listing.

   Implementations should also beware that the FTP control connection
   uses Telnet NVT conventions [RFC0854], and that the Telnet IAC
   character, if part of a pathname sent over the control connection,
   MUST be correctly escaped as defined by the Telnet protocol.

   NVT also distinguishes between CR, LF, and the end of line CRLF, and
   so would permit pathnames containing the pair of characters CR and LF
   to be correctly transmitted.  However, because such a sequence cannot
   be transmitted over a data connection (as part of the result of a
   LIST, NLST, or MLSD command), such pathnames are best avoided.

   Implementors should also be aware that, although Telnet NVT
   conventions are used over the control connections, Telnet option
   negotiation MUST NOT be attempted.  See Section 5.2.








Bryan                    Expires August 7, 2011                 [Page 6]

Internet-Draft           File Transfer Protocol            February 2011


2.2.1.  Pathname Syntax

   Except where TVFS is supported (see Section 4.1.5.4), this
   specification imposes no syntax upon pathnames.  Nor does it restrict
   the character set from which pathnames are created.  This does not
   imply that the NVFS is required to make sense of all possible
   pathnames.  Server-PIs may restrict the syntax of valid pathnames in
   their NVFS in any manner appropriate to their implementation or
   underlying file system.  Similarly, a server-PI may parse the
   pathname and assign meaning to the components detected.

2.2.2.  Wildcarding

   For the commands defined in this specification, all pathnames are to
   be treated literally.  That is, for a pathname given as a parameter
   to a command, the file whose name is identical to the pathname given
   is implied.  No characters from the pathname may be treated as
   special or "magic", thus no pattern matching (other than for exact
   equality) between the pathname given and the files present in the
   NVFS of the server-FTP is permitted.

   Clients that desire some form of pattern matching functionality must
   obtain a listing of the relevant directory, or directories, and
   implement their own file name selection procedures.

2.3.  Times

   The syntax of a time value is:


         time-val       = 14DIGIT [ "." 1*DIGIT ]

   The leading, mandatory, fourteen digits are to be interpreted as, in
   order from the leftmost, four digits giving the year, with a range of
   1000--9999, two digits giving the month of the year, with a range of
   01--12, two digits giving the day of the month, with a range of
   01--31, two digits giving the hour of the day, with a range of
   00--23, two digits giving minutes past the hour, with a range of
   00--59, and finally, two digits giving seconds past the minute, with
   a range of 00--60 (with 60 being used only at a leap second).  Years
   in the tenth century, and earlier, cannot be expressed.  This is not
   considered a serious defect of the protocol.

   The optional digits, which are preceded by a period, give decimal
   fractions of a second.  These may be given to whatever precision is
   appropriate to the circumstance, however implementations MUST NOT add
   precision to time-vals where that precision does not exist in the
   underlying value being transmitted.



Bryan                    Expires August 7, 2011                 [Page 7]

Internet-Draft           File Transfer Protocol            February 2011


   Symbolically, a time-val may be viewed as

   YYYYMMDDHHMMSS.sss

   The "." and subsequent digits ("sss") are optional.  However the "."
   MUST NOT appear unless at least one following digit also appears.

   Time values are always represented in UTC (GMT), and in the Gregorian
   calendar regardless of what calendar may have been in use at the date
   and time indicated at the location of the server-PI.

   The technical differences among GMT, TAI, UTC, UT1, UT2, etc., are
   not considered here.  A server-FTP process should always use the same
   time reference, so the times it returns will be consistent.  Clients
   are not expected to be time synchronized with the server, so the
   possible difference in times that might be reported by the different
   time standards is not considered important.

2.4.  Server Replies

   Section 4.2 defines the format and meaning of replies by the
   server-PI to FTP commands from the user-PI.  Those reply conventions
   are used here without change.


         error-response = error-code SP *TCHAR CRLF
         error-code     = ("4" / "5") 2DIGIT

   Implementors should note that the ABNF syntax used in this document
   and in other FTP related documents (but not used in [RFC0959]),
   sometimes shows replies using the one-line format.  Unless otherwise
   explicitly stated, that is not intended to imply that multi-line
   responses are not permitted.  Implementors should assume that, unless
   stated to the contrary, any reply to any FTP command (including QUIT)
   may use the multi-line format described in Section 4.2.

   Throughout this document, replies will be identified by the three
   digit code that is their first element.  Thus the term "500 reply"
   means a reply from the server-PI using the three digit code "500".

2.5.  Interpreting Examples

   In the examples of FTP dialogs presented in this document, lines that
   begin "C> " were sent over the control connection from the user-PI to
   the server-PI, lines that begin "S> " were sent over the control
   connection from the server-PI to the user-PI, and each sequence of
   lines that begin "D> " was sent from the server-PI to the user-PI
   over a data connection created just to send those lines and closed



Bryan                    Expires August 7, 2011                 [Page 8]

Internet-Draft           File Transfer Protocol            February 2011


   immediately after.  No examples here show data transferred over a
   data connection from the client to the server.  In all cases, the
   prefixes shown above, including the one space, have been added for
   the purposes of this document, and are not a part of the data
   exchanged between client and server.

2.6.  History

   FTP has had a long evolution over the years.  Appendix C is a
   chronological compilation of Request for Comments documents relating
   to FTP.  These include the first proposed file transfer mechanisms in
   1971 that were developed for implementation on hosts at M.I.T. (RFC
   114), plus comments and discussion in RFC 141.

   RFC 172 provided a user-level oriented protocol for file transfer
   between host computers (including terminal IMPs).  A revision of this
   as RFC 265, restated FTP for additional review, while RFC 281
   suggested further changes.  The use of a "Set Data Type" transaction
   was proposed in RFC 294 in January 1972.

   RFC 354 obsoleted RFCs 264 and 265.  The File Transfer Protocol was
   now defined as a protocol for file transfer between HOSTs on the
   ARPANET, with the primary function of FTP defined as transfering
   files efficiently and reliably among hosts and allowing the
   convenient use of remote file storage capabilities.  RFC 385 further
   commented on errors, emphasis points, and additions to the protocol,
   while RFC 414 provided a status report on the working server and user
   FTPs.  RFC 430, issued in 1973, (among other RFCs too numerous to
   mention) presented further comments on FTP.  Finally, an "official"
   FTP document was published as RFC 454.

   By July 1973, considerable changes from the last versions of FTP were
   made, but the general structure remained the same.  RFC 542 was
   published as a new "official" specification to reflect these changes.
   However, many implementations based on the older specification were
   not updated.

   In 1974, RFCs 607 and 614 continued comments on FTP.  RFC 624
   proposed further design changes and minor modifications.  In 1975,
   RFC 686 entitled, "Leaving Well Enough Alone", discussed the
   differences between all of the early and later versions of FTP.  RFC
   691 presented a minor revision of RFC 686, regarding the subject of
   print files.

   Motivated by the transition from the NCP to the TCP as the underlying
   protocol, a phoenix was born out of all of the above efforts in RFC
   765 as the specification of FTP for use on TCP.




Bryan                    Expires August 7, 2011                 [Page 9]

Internet-Draft           File Transfer Protocol            February 2011


   In 1985, [RFC0959] added the following optional commands to FTP: CDUP
   (Change to Parent Directory), SMNT (Structure Mount), STOU (Store
   Unique), RMD (Remove Directory), MKD (Make Directory), PWD (Print
   Directory), and SYST (System).

   RFC 1123 "Requirements for Internet Hosts -- Application and Support"

   RFC 1545 "FTP Operation Over Big Address Records (FOOBAR)"

   RFC 1639 "FTP Operation Over Big Address Records (FOOBAR)"

   RFC 2389 "Feature negotiation mechanism for the File Transfer
   Protocol"

   RFC 2228 "FTP Security Extensions" AUTH, ADAT, PROT, PBSZ, CCC, MIC,
   CONF, ENC

   RFC 2428 "FTP Extensions for IPv6 and NATs" EPRT, EPSV

   RFC 2577 "FTP Security Considerations"

   RFC 2640 "Internationalization of the File Transfer Protocol" and
   LANG command.

   RFC 2773 "Encryption using KEA and SKIPJACK"

   RFC 3659 "Extensions to FTP" MDTM, SIZE, REST, TVFS, MLST, MLSD

   RFC 4217 "Securing FTP with TLS"

   RFC 5797 "FTP Command and Extension Registry"

   This current edition of the FTP specification is intended to correct
   some minor documentation errors, synchronize differences between
   RFCs, and to improve the explanation of some protocol features.

   This specification is compatible with the previous edition.  A
   program implemented in conformance to the previous specification
   should automatically be in conformance to this specification.

2.7.  Terminology

   ASCII

      The ASCII character set is as defined in the ARPA-Internet
      Protocol Handbook.  In FTP, ASCII characters are defined to be the
      lower half of an eight-bit code set (i.e., the most significant
      bit is zero).



Bryan                    Expires August 7, 2011                [Page 10]

Internet-Draft           File Transfer Protocol            February 2011


   access controls

      Access controls define users' access privileges to the use of a
      system, and to the files in that system.  Access controls are
      necessary to prevent unauthorized or accidental use of files.  It
      is the prerogative of a server-FTP process to invoke access
      controls.

   byte size

      There are two byte sizes of interest in FTP: the logical byte size
      of the file, and the transfer byte size used for the transmission
      of the data.  The transfer byte size is always 8 bits.  The
      transfer byte size is not necessarily the byte size in which data
      is to be stored in a system, nor the logical byte size for
      interpretation of the structure of the data.

   control connection

      The communication path between the USER-PI and SERVER-PI for the
      exchange of commands and replies.  This connection follows the
      Telnet Protocol.

   data connection

      A full duplex connection over which data is transferred, in a
      specified mode and type.  The data transferred may be a part of a
      file, an entire file or a number of files.  The path may be
      between a server-DTP and a user-DTP, or between two server-DTPs.

   data port

      The passive data transfer process "listens" on the data port for a
      connection from the active transfer process in order to open the
      data connection.

   DTP

      The data transfer process establishes and manages the data
      connection.  The DTP can be passive or active.

   End-of-Line

      The end-of-line sequence defines the separation of printing lines.
      The sequence is Carriage Return, followed by Line Feed.

   EOF




Bryan                    Expires August 7, 2011                [Page 11]

Internet-Draft           File Transfer Protocol            February 2011


      The end-of-file condition that defines the end of a file being
      transferred.

   EOR

      The end-of-record condition that defines the end of a record being
      transferred.

   error recovery

      A procedure that allows a user to recover from certain errors such
      as failure of either host system or transfer process.  In FTP,
      error recovery may involve restarting a file transfer at a given
      checkpoint.

   FTP commands

      A set of commands that comprise the control information flowing
      from the user-FTP to the server-FTP process.

   file

      An ordered set of computer data (including programs), of arbitrary
      length, uniquely identified by a pathname.

   mode

      The mode in which data is to be transferred via the data
      connection.  The mode defines the data format during transfer
      including EOR and EOF.  The transfer modes defined in FTP are
      described in Section 3.4.

   NVT

      The Network Virtual Terminal as defined in the Telnet Protocol.

   NVFS

      The Network Virtual File System.  A concept which defines a
      standard network file system with standard commands and pathname
      conventions.

   page

      A file may be structured as a set of independent parts called
      pages.  FTP supports the transmission of discontinuous files as
      independent indexed pages.




Bryan                    Expires August 7, 2011                [Page 12]

Internet-Draft           File Transfer Protocol            February 2011


   pathname

      Pathname is defined to be the character string which must be input
      to a file system by a user in order to identify a file.  Pathname
      normally contains device and/or directory names, and file name
      specification.  FTP does not yet specify a standard pathname
      convention.  Each user must follow the file naming conventions of
      the file systems involved in the transfer.

   PI

      The protocol interpreter.  The user and server sides of the
      protocol have distinct roles implemented in a user-PI and a
      server-PI.

   record

      A sequential file may be structured as a number of contiguous
      parts called records.  Record structures are supported by FTP but
      a file need not have record structure.

   reply

      A reply is an acknowledgment (positive or negative) sent from
      server to user via the control connection in response to FTP
      commands.  The general form of a reply is a completion code
      (including error codes) followed by a text string.  The codes are
      for use by programs and the text is usually intended for human
      users.

   server-DTP

      The data transfer process, in its normal "active" state,
      establishes the data connection with the "listening" data port.
      It sets up parameters for transfer and storage, and transfers data
      on command from its PI.  The DTP can be placed in a "passive"
      state to listen for, rather than initiate a connection on the data
      port.

   server-FTP process

      A process or set of processes which perform the function of file
      transfer in cooperation with a user-FTP process and, possibly,
      another server.  The functions consist of a protocol interpreter
      (PI) and a data transfer process (DTP).

   server-PI




Bryan                    Expires August 7, 2011                [Page 13]

Internet-Draft           File Transfer Protocol            February 2011


      The server protocol interpreter "listens" on Port L for a
      connection from a user-PI and establishes a control communication
      connection.  It receives standard FTP commands from the user-PI,
      sends replies, and governs the server-DTP.

   type

      The data representation type used for data transfer and storage.
      Type implies certain transformations between the time of data
      storage and data transfer.  The representation types defined in
      FTP are described in Section 3.1.1.

   user

      A person or a process on behalf of a person wishing to obtain file
      transfer service.  The human user may interact directly with a
      server-FTP process, but use of a user-FTP process is preferred
      since the protocol design is weighted towards automata.

   user-DTP

      The data transfer process "listens" on the data port for a
      connection from a server-FTP process.  If two servers are
      transferring data between them, the user-DTP is inactive.

   user-FTP process

      A set of functions including a protocol interpreter, a data
      transfer process and a user interface which together perform the
      function of file transfer in cooperation with one or more server-
      FTP processes.  The user interface allows a local language to be
      used in the command-reply dialogue with the user.

   user-PI

      The user protocol interpreter initiates the control connection
      from its port U to the server-FTP process, initiates FTP commands,
      and governs the user-DTP if that process is part of the file
      transfer.

2.8.  The FTP Model

   With the above definitions in mind, the following model (shown in
   Figure 1) may be diagrammed for an FTP service.







Bryan                    Expires August 7, 2011                [Page 14]

Internet-Draft           File Transfer Protocol            February 2011


                                               -------------
                                               |/---------\|
                                               ||   User  ||    --------
                                               ||Interface|<--->| User |
                                               |\----^----/|    --------
                     ----------                |     |     |
                     |/------\|  FTP Commands  |/----V----\|
                     ||Server|<---------------->|   User  ||
                     ||  PI  ||   FTP Replies  ||    PI   ||
                     |\--^---/|                |\----^----/|
                     |   |    |                |     |     |
         --------    |/--V---\|      Data      |/----V----\|    --------
         | File |<--->|Server|<---------------->|  User   |<--->| File |
         |System|    || DTP  ||   Connection   ||   DTP   ||    |System|
         --------    |\------/|                |\---------/|    --------
                     ----------                -------------

                     Server-FTP                   USER-FTP

         NOTES: 1. The data connection may be used in either direction.
                2. The data connection need not exist all of the time.

                         Figure 1  Model for FTP Use

   In the model described in Figure 1, the user-protocol interpreter
   initiates the control connection.  The control connection follows the
   Telnet protocol.  At the initiation of the user, standard FTP
   commands are generated by the user-PI and transmitted to the server
   process via the control connection.  (The user may establish a direct
   control connection to the server-FTP, from a TAC terminal for
   example, and generate standard FTP commands independently, bypassing
   the user-FTP process.)  Standard replies are sent from the server-PI
   to the user-PI over the control connection in response to the
   commands.

   The FTP commands specify the parameters for the data connection (data
   port, transfer mode, representation type, and structure) and the
   nature of file system operation (store, retrieve, append, delete,
   etc.).  The user-DTP or its designate should "listen" on the
   specified data port, and the server initiate the data connection and
   data transfer in accordance with the specified parameters.  It should
   be noted that the data port need not be in the same host that
   initiates the FTP commands via the control connection, but the user
   or the user-FTP process must ensure a "listen" on the specified data
   port.  It ought to also be noted that the data connection may be used
   for simultaneous sending and receiving.

   In another situation a user might wish to transfer files between two



Bryan                    Expires August 7, 2011                [Page 15]

Internet-Draft           File Transfer Protocol            February 2011


   hosts, neither of which is a local host.  The user sets up control
   connections to the two servers and then arranges for a data
   connection between them.  In this manner, control information is
   passed to the user-PI but data is transferred between the server data
   transfer processes.  Following is a model of this server-server
   interaction.



                       Control     ------------   Control
                       ---------->| User-FTP |<-----------
                       |          | User-PI  |           |
                       |          |   "C"    |           |
                       V          ------------           V
               --------------                        --------------
               | Server-FTP |   Data Connection      | Server-FTP |
               |    "A"     |<---------------------->|    "B"     |
               -------------- Port (A)      Port (B) --------------


                                    Figure 2

   The protocol requires that the control connections be open while data
   transfer is in progress.  It is the responsibility of the user to
   request the closing of the control connections when finished using
   the FTP service, while it is the server who takes the action.  The
   server may abort data transfer if the control connections are closed
   without command.

   The Relationship between FTP and Telnet:

      The FTP uses the Telnet protocol on the control connection.  This
      can be achieved in two ways: first, the user-PI or the server-PI
      may implement the rules of the Telnet Protocol directly in their
      own procedures; or, second, the user-PI or the server-PI may make
      use of the existing Telnet module in the system.

      Ease of implementaion, sharing code, and modular programming argue
      for the second approach.  Efficiency and independence argue for
      the first approach.  In practice, FTP relies on very little of the
      Telnet Protocol, so the first approach does not necessarily
      involve a large amount of code.


3.  Data Transfer Functions

   Files are transferred only via the data connection.  The control
   connection is used for the transfer of commands, which describe the



Bryan                    Expires August 7, 2011                [Page 16]

Internet-Draft           File Transfer Protocol            February 2011


   functions to be performed, and the replies to these commands (see
   Section 4.2).  Several commands are concerned with the transfer of
   data between hosts.  These data transfer commands include the MODE
   command which specify how the bits of the data are to be transmitted,
   and the STRUcture and TYPE commands, which are used to define the way
   in which the data are to be represented.  The transmission and
   representation are basically independent but the "Stream"
   transmission mode is dependent on the file structure attribute and if
   "Compressed" transmission mode is used, the nature of the filler byte
   depends on the representation type.

3.1.  Data Representation and Storage

   Data is transferred from a storage device in the sending host to a
   storage device in the receiving host.  Often it is necessary to
   perform certain transformations on the data because data storage
   representations in the two systems are different.  For example, NVT-
   ASCII has different data storage representations in different
   systems.  DEC TOPS-20s's generally store NVT-ASCII as five 7-bit
   ASCII characters, left-justified in a 36-bit word.  IBM Mainframe's
   store NVT-ASCII as 8-bit EBCDIC codes.  Multics stores NVT-ASCII as
   four 9-bit characters in a 36-bit word.  It is desirable to convert
   characters into the standard NVT-ASCII representation when
   transmitting text between dissimilar systems.  The sending and
   receiving sites would have to perform the necessary transformations
   between the standard representation and their internal
   representations.

   A different problem in representation arises when transmitting binary
   data (not character codes) between host systems with different word
   lengths.  It is not always clear how the sender should send data, and
   the receiver store it.  For example, when transmitting 32-bit bytes
   from a 32-bit word-length system to a 36-bit word-length system, it
   may be desirable (for reasons of efficiency and usefulness) to store
   the 32-bit bytes right-justified in a 36-bit word in the latter
   system.  In any case, the user should have the option of specifying
   data representation and transformation functions.  It should be noted
   that FTP provides for very limited data type representations.
   Transformations desired beyond this limited capability should be
   performed by the user directly.

3.1.1.  Data Types

   Data representations are handled in FTP by a user specifying a
   representation type.  This type may implicitly (as in ASCII or
   EBCDIC) or explicitly (as in Local byte) define a byte size for
   interpretation which is referred to as the "logical byte size."  Note
   that this has nothing to do with the byte size used for transmission



Bryan                    Expires August 7, 2011                [Page 17]

Internet-Draft           File Transfer Protocol            February 2011


   over the data connection, called the "transfer byte size", and the
   two should not be confused.  For example, NVT-ASCII has a logical
   byte size of 8 bits.  If the type is Local byte, then the TYPE
   command has an obligatory second parameter specifying the logical
   byte size.  The transfer byte size is always 8 bits.

3.1.1.1.  ASCII Type

   This is the default type and MUST be accepted by all FTP
   implementations.  It is intended primarily for the transfer of text
   files, except when both hosts would find the EBCDIC type more
   convenient.

   The sender converts the data from an internal character
   representation to the standard 8-bit NVT-ASCII representation (see
   [RFC0854]).  The receiver will convert the data from the standard
   form to his own internal form.

   In accordance with the NVT standard, the <CRLF> sequence should be
   used where necessary to denote the end of a line of text.  (See the
   discussion of file structure at the end of the Section on Data
   Representation and Storage.)

   Using the standard NVT-ASCII representation means that data must be
   interpreted as 8-bit bytes.

   The Format parameter for ASCII and EBCDIC types is discussed below.

3.1.1.2.  EBCDIC Type

   This type is intended for efficient transfer between hosts which use
   EBCDIC for their internal character representation.

   For transmission, the data are represented as 8-bit EBCDIC
   characters.  The character code is the only difference between the
   functional specifications of EBCDIC and ASCII types.

   End-of-line (as opposed to end-of-record--see the discussion of
   structure) will probably be rarely used with EBCDIC type for purposes
   of denoting structure, but where it is necessary the <NL> character
   should be used.

3.1.1.3.  Image Type

   The data are sent as contiguous bits which, for transfer, are packed
   into the 8-bit transfer bytes.  The receiving site must store the
   data as contiguous bits.  The structure of the storage system might
   necessitate the padding of the file (or of each record, for a record-



Bryan                    Expires August 7, 2011                [Page 18]

Internet-Draft           File Transfer Protocol            February 2011


   structured file) to some convenient boundary (byte, word or block).
   This padding, which must be all zeros, may occur only at the end of
   the file (or at the end of each record) and there must be a way of
   identifying the padding bits so that they may be stripped off if the
   file is retrieved.  The padding transformation should be well
   publicized to enable a user to process a file at the storage site.

   Image type is intended for the efficient storage and retrieval of
   files and for the transfer of binary data.  It is recommended that
   this type be accepted by all FTP implementations.

3.1.1.4.  Local Type

   The data is transferred in logical bytes of the size specified by the
   obligatory second parameter, Byte size.  The value of Byte size must
   be a decimal integer; there is no default value.  The logical byte
   size is not necessarily the same as the transfer byte size.  If there
   is a difference in byte sizes, then the logical bytes should be
   packed contiguously, disregarding transfer byte boundaries and with
   any necessary padding at the end.

   When the data reaches the receiving host, it will be transformed in a
   manner dependent on the logical byte size and the particular host.
   This transformation must be invertible (i.e., an identical file can
   be retrieved if the same parameters are used) and should be well
   publicized by the FTP implementors.

   For example, a user sending 36-bit floating-point numbers to a host
   with a 32-bit word could send that data as Local byte with a logical
   byte size of 36.  The receiving host would then be expected to store
   the logical bytes so that they could be easily manipulated; in this
   example putting the 36-bit logical bytes into 64-bit double words
   should suffice.

   In another example, a pair of hosts with a 36-bit word size may send
   data to one another in words by using TYPE L 36.  The data would be
   sent in the 8-bit transmission bytes packed so that 9 transmission
   bytes carried two host words.

   An FTP program MUST support TYPE I ("IMAGE" or binary type) as well
   as TYPE L 8 ("LOCAL" type with logical byte size 8).  A machine whose
   memory is organized into m-bit words, where m is not a multiple of 8,
   MAY also support TYPE L m.

3.1.1.5.  Format Control

   The types ASCII and EBCDIC also take a second (optional) parameter;
   this is to indicate what kind of vertical format control, if any, is



Bryan                    Expires August 7, 2011                [Page 19]

Internet-Draft           File Transfer Protocol            February 2011


   associated with a file.  The following data representation types are
   defined in FTP:

   A character file may be transferred to a host for one of three
   purposes: for printing, for storage and later retrieval, or for
   processing.  If a file is sent for printing, the receiving host must
   know how the vertical format control is represented.  In the second
   case, it must be possible to store a file at a host and then retrieve
   it later in exactly the same form.  Finally, it should be possible to
   move a file from one host to another and process the file at the
   second host without undue trouble.  A single ASCII or EBCDIC format
   does not satisfy all these conditions.  Therefore, these types have a
   second parameter specifying one of the following three formats:

3.1.1.5.1.  Non Print

   This is the default format to be used if the second (format)
   parameter is omitted.  Non-print format MUST be accepted by all FTP
   implementations.

   The file need contain no vertical format information.  If it is
   passed to a printer process, this process may assume standard values
   for spacing and margins.

   Normally, this format will be used with files destined for processing
   or just storage.

3.1.1.5.2.  Telnet Format Controls

   The file contains ASCII/EBCDIC vertical format controls (i.e., <CR>,
   <LF>, <NL>, <VT>, <FF>) which the printer process will interpret
   appropriately. <CRLF>, in exactly this sequence, also denotes end-of-
   line.

   A host that makes no distinction between TYPE N and TYPE T SHOULD
   implement TYPE T to be identical to TYPE N.

3.1.1.5.3.  Carriage Control (ASA)

   The file contains ASA (FORTRAN) vertical format control characters.
   (See RFC 740 Appendix C; and Communications of the ACM, Vol. 7, No.
   10, p. 606, October 1964.)  In a line or a record formatted according
   to the ASA Standard, the first character is not to be printed.
   Instead, it should be used to determine the vertical movement of the
   paper which should take place before the rest of the record is
   printed.

   The ASA Standard specifies the following control characters:



Bryan                    Expires August 7, 2011                [Page 20]

Internet-Draft           File Transfer Protocol            February 2011


                     Character     Vertical Spacing

                     blank         Move paper up one line
                     0             Move paper up two lines
                     1             Move paper to top of next page
                     +             No movement, i.e., overprint

   Clearly there must be some way for a printer process to distinguish
   the end of the structural entity.  If a file has record structure
   (see below) this is no problem; records will be explicitly marked
   during transfer and storage.  If the file has no record structure,
   the <CRLF> end-of-line sequence is used to separate printing lines,
   but these format effectors are overridden by the ASA controls.

3.1.2.  Data Structures

   In addition to different representation types, FTP allows the
   structure of a file to be specified.  Three file structures are
   defined in FTP:



            file-structure,     where there is no internal structure and
                                the file is considered to be a
                                continuous sequence of data bytes,

            record-structure,   where the file is made up of sequential
                                records,

            and page-structure, where the file is made up of independent
                                indexed pages.

   File-structure is the default to be assumed if the STRUcture command
   has not been used but both file and record structures must be
   accepted for "text" files (i.e., files with TYPE ASCII or EBCDIC) by
   all FTP implementations.  The structure of a file will affect both
   the transfer mode of a file (see Section 3.4) and the interpretation
   and storage of the file.

   The "natural" structure of a file will depend on which host stores
   the file.  A source-code file will usually be stored on an IBM
   Mainframe in fixed length records but on a DEC TOPS-20 as a stream of
   characters partitioned into lines, for example by <CRLF>.  If the
   transfer of files between such disparate sites is to be useful, there
   must be some way for one site to recognize the other's assumptions
   about the file.

   With some sites being naturally file-oriented and others naturally



Bryan                    Expires August 7, 2011                [Page 21]

Internet-Draft           File Transfer Protocol            February 2011


   record-oriented there may be problems if a file with one structure is
   sent to a host oriented to the other.  If a text file is sent with
   record-structure to a host which is file oriented, then that host
   should apply an internal transformation to the file based on the
   record structure.  An FTP transformation between record-structure and
   file-structure SHOULD be invertible, to the extent possible while
   making the result useful on the target host.

   In the case of a file being sent with file-structure to a record-
   oriented host, there exists the question of what criteria the host
   should use to divide the file into records which can be processed
   locally.  If this division is necessary, the FTP implementation
   should use the end-of-line sequence, <CRLF> for ASCII, or <NL> for
   EBCDIC text files, as the delimiter.  If an FTP implementation adopts
   this technique, it must be prepared to reverse the transformation if
   the file is retrieved with file-structure.

3.1.2.1.  File Structure

   File structure is the default to be assumed if the STRUcture command
   has not been used.

   In file-structure there is no internal structure and the file is
   considered to be a continuous sequence of data bytes.

3.1.2.2.  Record Structure

   Record structures must be accepted for "text" files (i.e., files with
   TYPE ASCII or EBCDIC) by all FTP implementations.

   In record-structure the file is made up of sequential records.

3.1.2.3.  Page Structure

   Implementation of page structure is NOT RECOMMENDED in general.
   However, if a host system does need to implement FTP for "random
   access" or "holey" files, it MUST use the defined page structure
   format rather than define a new private FTP format.

   To transmit files that are discontinuous, FTP defines a page
   structure.  Files of this type are sometimes known as "random access
   files" or even as "holey files".  In these files there is sometimes
   other information associated with the file as a whole (e.g., a file
   descriptor), or with a section of the file (e.g., page access
   controls), or both.  In FTP, the sections of the file are called
   pages.

   To provide for various page sizes and associated information, each



Bryan                    Expires August 7, 2011                [Page 22]

Internet-Draft           File Transfer Protocol            February 2011


   page is sent with a page header.  The page header has the following
   defined fields:

   Header Length

   The number of logical bytes in the page header including this byte.
   The minimum header length is 4.

   Page Index

   The logical page number of this section of the file.  This is not the
   transmission sequence number of this page, but the index used to
   identify this page of the file.

   Data Length

   The number of logical bytes in the page data.  The minimum data
   length is 0.

   Page Type

   The type of page this is.  The following page types are defined:

   0 = Last Page

   This is used to indicate the end of a paged structured transmission.
   The header length must be 4, and the data length must be 0.

   1 = Simple Page

   This is the normal type for simple paged files with no page level
   associated control information.  The header length must be 4.

   2 = Descriptor Page

   This type is used to transmit the descriptive information for the
   file as a whole.

   3 = Access Controlled Page

   This type includes an additional header field for paged files with
   page level access control information.  The header length must be 5.

   Optional Fields

   Further header fields may be used to supply per page control
   information, for example, per page access control.




Bryan                    Expires August 7, 2011                [Page 23]

Internet-Draft           File Transfer Protocol            February 2011


   All fields are one logical byte in length.  The logical byte size is
   specified by the TYPE command.  See Appendix A for further details
   and a specific case at the page structure.

   A note of caution about parameters: a file must be stored and
   retrieved with the same parameters if the retrieved version is to be
   identical to the version originally transmitted.  Conversely, FTP
   implementations must return a file identical to the original if the
   parameters used to store and retrieve a file are the same.

3.2.  Establishing Data Connections

   The mechanics of transferring data consists of setting up the data
   connection to the appropriate ports and choosing the parameters for
   transfer.  Both the user and the server-DTPs have a default data
   port.  The user-process default data port is the same as the control
   connection port (i.e., U).  The server-process default data port is
   the port adjacent to the control connection port (i.e., L-1).

   The transfer byte size is 8-bit bytes.  This byte size is relevant
   only for the actual transfer of the data; it has no bearing on
   representation of the data within a host's file system.

   The passive data transfer process (this may be a user-DTP or a second
   server-DTP) shall "listen" on the data port prior to sending a
   transfer request command.  The FTP request command determines the
   direction of the data transfer.  The server, upon receiving the
   transfer request, will initiate the data connection to the port.
   When the connection is established, the data transfer begins between
   DTP's, and the server-PI sends a confirming reply to the user-PI.

   Every FTP implementation MUST support the use of the default data
   ports, and only the USER-PI can initiate a change to non-default
   ports.

   It is possible for the user to specify an alternate data port by use
   of the PORT command.  The user may want a file dumped on a TAC line
   printer or retrieved from a third party host.  In the latter case,
   the user-PI sets up control connections with both server-PI's.  One
   server is then told (by an FTP command) to "listen" for a connection
   which the other will initiate.  The user-PI sends one server-PI a
   PORT command indicating the data port of the other.  Finally, both
   are sent the appropriate transfer commands.  The exact sequence of
   commands and replies sent between the user-controller and the servers
   is defined in Section 4.2

   In general, it is the server's responsibility to maintain the data
   connection--to initiate it and to close it.  The exception to this is



Bryan                    Expires August 7, 2011                [Page 24]

Internet-Draft           File Transfer Protocol            February 2011


   when the user-DTP is sending the data in a transfer mode that
   requires the connection to be closed to indicate EOF.  The server
   MUST close the data connection under the following conditions:

      1.  The server has completed sending data in a transfer mode that
      requires a close to indicate EOF.

      2.  The server receives an ABORT command from the user.

      3.  The port specification is changed by a command from the user.

      4.  The control connection is closed legally or otherwise.

      5.  An irrecoverable error condition occurs.

   Otherwise the close is a server option, the exercise of which the
   server must indicate to the user-process by either a 250 or 226 reply
   only.

3.3.  Data Connection Management

   Default Data Connection Ports: All FTP implementations MUST support
   use of the default data connection ports, and only the User-PI may
   initiate the use of non-default ports.

   Negotiating Non-Default Data Ports: The User-PI MAY specify a non-
   default user side data port with the PORT command.  The User-PI MAY
   request the server side to identify a non-default server side data
   port with the PASV command.  Since a connection is defined by the
   pair of addresses, either of these actions is enough to get a
   different data connection, still it is permitted to do both commands
   to use new ports on both ends of the data connection.  A User-FTP
   that uses STREAM mode SHOULD send a PORT command to assign a non-
   default data port before each transfer command is issued.

   Reuse of the Data Connection: When using the stream mode of data
   transfer the end of the file MUST be indicated by closing the
   connection.  This causes a problem if multiple files are to be
   transfered in the session, due to need for TCP to hold the connection
   record for a time out period to guarantee the reliable communication.
   Thus the connection can not be reopened at once.

   There are two solutions to this problem.  The first is to negotiate a
   non-default port.  The second is to use another transfer mode.

   A comment on transfer modes.  The stream transfer mode is inherently
   unreliable, since one can not determine if the connection closed
   prematurely or not.  The other transfer modes (Block, Compressed) do



Bryan                    Expires August 7, 2011                [Page 25]

Internet-Draft           File Transfer Protocol            February 2011


   not close the connection to indicate the end of file.  They have
   enough FTP encoding that the data connection can be parsed to
   determine the end of the file.  Thus using these modes one can leave
   the data connection open for multiple file transfers.

3.4.  Transmission Modes

   The next consideration in transferring data is choosing the
   appropriate transmission mode.  There are three modes: one which
   formats the data and allows for restart procedures; one which also
   compresses the data for efficient transfer; and one which passes the
   data with little or no processing.  In this last case the mode
   interacts with the structure attribute to determine the type of
   processing.  In the compressed mode, the representation type
   determines the filler byte.

   All data transfers MUST be completed with an end-of-file (EOF) which
   MAY be explicitly stated or implied by the closing of the data
   connection.  For files with record structure, all the end-of-record
   markers (EOR) are explicit, including the final one.  For files
   transmitted in page structure a "last-page" page type is used.

   NOTE: In the rest of this section, byte means "transfer byte" except
   where explicitly stated otherwise.

   For the purpose of standardized transfer, the sending host will
   translate its internal end of line or end of record denotation into
   the representation prescribed by the transfer mode and file
   structure, and the receiving host will perform the inverse
   translation to its internal denotation.  An IBM Mainframe record
   count field may not be recognized at another host, so the end-of-
   record information may be transferred as a two byte control code in
   Stream mode or as a flagged bit in a Block or Compressed mode
   descriptor.  End-of-line in an ASCII or EBCDIC file with no record
   structure should be indicated by <CRLF> or <NL>, respectively.  Since
   these transformations imply extra work for some systems, identical
   systems transferring non-record structured text files might wish to
   use a binary representation and stream mode for the transfer.

   The following transmission modes are defined in FTP:

3.4.1.  Stream Mode

   The data is transmitted as a stream of bytes.  There is no
   restriction on the representation type used; record structures are
   allowed.

   In a record structured file EOR and EOF will each be indicated by a



Bryan                    Expires August 7, 2011                [Page 26]

Internet-Draft           File Transfer Protocol            February 2011


   two-byte control code.  The first byte of the control code will be
   all ones, the escape character.  The second byte will have the low
   order bit on and zeros elsewhere for EOR and the second low order bit
   on for EOF; that is, the byte will have value 1 for EOR and value 2
   for EOF.  EOR and EOF MAY be indicated together on the last byte
   transmitted by turning both low order bits on (i.e., the value 3).
   If a byte of all ones was intended to be sent as data, it should be
   repeated in the second byte of the control code.

   If the structure is a file structure, the EOF is indicated by the
   sending host closing the data connection and all bytes are data
   bytes.

3.4.2.  Block Mode

   The file is transmitted as a series of data blocks preceded by one or
   more header bytes.  The header bytes contain a count field, and
   descriptor code.  The count field indicates the total length of the
   data block in bytes, thus marking the beginning of the next data
   block (there are no filler bits).  The descriptor code defines: last
   block in the file (EOF) last block in the record (EOR), restart
   marker (see Section 3.5) or suspect data (i.e., the data being
   transferred is suspected of errors and is not reliable).  This last
   code is NOT intended for error control within FTP.  It is motivated
   by the desire of sites exchanging certain types of data (e.g.,
   seismic or weather data) to send and receive all the data despite
   local errors (such as "magnetic tape read errors"), but to indicate
   in the transmission that certain portions are suspect).  Record
   structures are allowed in this mode, and any representation type MAY
   be used.

   The header consists of the three bytes.  Of the 24 bits of header
   information, the 16 low order bits shall represent byte count, and
   the 8 high order bits shall represent descriptor codes as shown
   below.



            Block Header

               +----------------+----------------+----------------+
               | Descriptor     |    Byte Count                   |
               |         8 bits |                      16 bits    |
               +----------------+----------------+----------------+

   The descriptor codes are indicated by bit flags in the descriptor
   byte.  Four codes have been assigned, where each code number is the
   decimal value of the corresponding bit in the byte.



Bryan                    Expires August 7, 2011                [Page 27]

Internet-Draft           File Transfer Protocol            February 2011


               Code     Meaning

                128     End of data block is EOR
                 64     End of data block is EOF
                 32     Suspected errors in data block
                 16     Data block is a restart marker

   With this encoding, more than one descriptor coded condition may
   exist for a particular block.  As many bits as necessary may be
   flagged.

   The restart marker is embedded in the data stream as an integral
   number of 8-bit bytes representing printable characters in the
   language being used over the control connection (e.g., default--NVT-
   ASCII). <SP> (Space, in the appropriate language) MUST NOT be used
   WITHIN a restart marker.

   For example, to transmit a six-character marker, the following would
   be sent:



               +--------+--------+--------+
               |Descrptr|  Byte count     |
               |code= 16|             = 6 |
               +--------+--------+--------+

               +--------+--------+--------+
               | Marker | Marker | Marker |
               | 8 bits | 8 bits | 8 bits |
               +--------+--------+--------+

               +--------+--------+--------+
               | Marker | Marker | Marker |
               | 8 bits | 8 bits | 8 bits |
               +--------+--------+--------+


3.4.3.  Compressed Mode

   There are three kinds of information to be sent: regular data, sent
   in a byte string; compressed data, consisting of replications or
   filler; and control information, sent in a two-byte escape sequence.
   If n>0 bytes (up to 127) of regular data are sent, these n bytes are
   preceded by a byte with the left-most bit set to 0 and the right-most
   7 bits containing the number n.





Bryan                    Expires August 7, 2011                [Page 28]

Internet-Draft           File Transfer Protocol            February 2011


            Byte string:

                1       7                8                     8
               +-+-+-+-+-+-+-+-+ +-+-+-+-+-+-+-+-+     +-+-+-+-+-+-+-+-+
               |0|       n     | |    d(1)       | ... |      d(n)     |
               +-+-+-+-+-+-+-+-+ +-+-+-+-+-+-+-+-+     +-+-+-+-+-+-+-+-+
                                             ^             ^
                                             |---n bytes---|
                                                 of data

   String of n data bytes d(1),..., d(n) Count n must be positive.

   To compress a string of n replications of the data byte d, the
   following 2 bytes are sent:



            Replicated Byte:

                 2       6               8
               +-+-+-+-+-+-+-+-+ +-+-+-+-+-+-+-+-+
               |1 0|     n     | |       d       |
               +-+-+-+-+-+-+-+-+ +-+-+-+-+-+-+-+-+

   A string of n filler bytes can be compressed into a single byte,
   where the filler byte varies with the representation type.  If the
   type is ASCII or EBCDIC the filler byte is <SP> (Space, ASCII code
   32, EBCDIC code 64).  If the type is Image or Local byte the filler
   is a zero byte.


            Filler String:

                 2       6
               +-+-+-+-+-+-+-+-+
               |1 1|     n     |
               +-+-+-+-+-+-+-+-+

   The escape sequence is a double byte, the first of which is the
   escape byte (all zeros) and the second of which contains descriptor
   codes as defined in Block mode.  The descriptor codes have the same
   meaning as in Block mode and apply to the succeeding string of bytes.

   Compressed mode is useful for obtaining increased bandwidth on very
   large network transmissions at a little extra CPU cost.  It can be
   most effectively used to reduce the size of printer files such as
   those generated by RJE hosts.




Bryan                    Expires August 7, 2011                [Page 29]

Internet-Draft           File Transfer Protocol            February 2011


3.5.  Error Recovery and Restart

   There is no provision for detecting bits lost or scrambled in data
   transfer; this level of error control is handled by the TCP.
   However, a restart procedure is provided to protect users from gross
   system failures (including failures of a host, an FTP-process, or the
   underlying network).

   The restart procedure is defined only for the block and compressed
   modes of data transfer.  It requires the sender of data to insert a
   special marker code in the data stream with some marker information.
   The marker information has meaning only to the sender, but MUST
   consist of printable characters in the default or negotiated language
   of the control connection (ASCII or EBCDIC).  The marker could
   represent a bit-count, a record-count, or any other information by
   which a system may identify a data checkpoint.  The receiver of data,
   if it implements the restart procedure, would then mark the
   corresponding position of this marker in the receiving system, and
   return this information to the user.

   In the event of a system failure, the user can restart the data
   transfer by identifying the marker point with the FTP restart
   procedure.  The following example illustrates the use of the restart
   procedure.

   The sender of the data inserts an appropriate marker block in the
   data stream at a convenient point.  The receiving host marks the
   corresponding data point in its file system and conveys the last
   known sender and receiver marker information to the user, either
   directly or over the control connection in a 110 reply (depending on
   who is the sender).  In the event of a system failure, the user or
   controller process restarts the server at the last server marker by
   sending a restart command with server's marker code as its argument.
   The restart command is transmitted over the control connection and is
   immediately followed by the command (such as RETR, STOR or LIST)
   which was being executed when the system failure occurred.


4.  File Transfer Functions

   The communication channel from the user-PI to the server-PI is
   established as a TCP connection from the user to the standard server
   port.  The user protocol interpreter is responsible for sending FTP
   commands and interpreting the replies received; the server-PI
   interprets commands, sends replies and directs its DTP to set up the
   data connection and transfer the data.  If the second party to the
   data transfer (the passive transfer process) is the user-DTP, then it
   is governed through the internal protocol of the user-FTP host; if it



Bryan                    Expires August 7, 2011                [Page 30]

Internet-Draft           File Transfer Protocol            February 2011


   is a second server-DTP, then it is governed by its PI on command from
   the user-PI.  The FTP replies are discussed in the next section.  In
   the description of a few of the commands in this section, it is
   helpful to be explicit about the possible replies.

4.1.  FTP Commands

   The IANA "FTP Commands and Extensions" Registry created by [RFC5797]
   available at http://www.iana.org/assignments/ftp-commands-extensions/
   ftp-commands-extensions.xhtml contains a comprehensive list of FTP
   commands and extensions, along with references and more information.

4.1.1.  Access Control Commands

   The following commands specify access control identifiers (command
   codes are shown in parentheses).

   USER NAME (USER)

      The argument field is a Telnet string identifying the user.  The
      user identification is that which is required by the server for
      access to its file system.  This command will normally be the
      first command transmitted by the user after the control
      connections are made (some servers MAY require this).  Additional
      identification information in the form of a password and/or an
      account command MAY also be required by some servers.  Servers MAY
      allow a new USER command to be entered at any point in order to
      change the access control and/or accounting information.  This has
      the effect of flushing any user, password, and account information
      already supplied and beginning the login sequence again.  All
      transfer parameters are unchanged and any file transfer in
      progress is completed under the old access control parameters.

   PASSWORD (PASS)

      The argument field is a Telnet string specifying the user's
      password.  This command MUST be immediately preceded by the user
      name command, and, for some sites, completes the user's
      identification for access control.  Since password information is
      quite sensitive, it is desirable in general to "mask" it or
      suppress typeout.  It appears that the server has no foolproof way
      to achieve this.  It is therefore the responsibility of the user-
      FTP process to hide the sensitive password information.

   ACCOUNT (ACCT)

      The argument field is a Telnet string identifying the user's
      account.  The command is not necessarily related to the USER



Bryan                    Expires August 7, 2011                [Page 31]

Internet-Draft           File Transfer Protocol            February 2011


      command, as some sites may require an account for login and others
      only for specific access, such as storing files.  In the latter
      case the command may arrive at any time.

      There are reply codes to differentiate these cases for the
      automation: when account information is required for login, the
      response to a successful PASSword command is reply code 332.  On
      the other hand, if account information is NOT required for login,
      the reply to a successful PASSword command is 230; and if the
      account information is needed for a command issued later in the
      dialogue, the server should return a 332 or 532 reply depending on
      whether it stores (pending receipt of the ACCounT command) or
      discards the command, respectively.

   CHANGE WORKING DIRECTORY (CWD)

      This command allows the user to work with a different directory or
      dataset for file storage or retrieval without altering his login
      or accounting information.  Transfer parameters are similarly
      unchanged.  The argument is a pathname specifying a directory or
      other system dependent file group designator.

   CHANGE TO PARENT DIRECTORY (CDUP)

      This command is a special case of CWD, and is included to simplify
      the implementation of programs for transferring directory trees
      between operating systems having different syntaxes for naming the
      parent directory.  The reply codes shall be identical to the reply
      codes of CWD.  See Appendix B for further details.

   STRUCTURE MOUNT (SMNT)

      This command allows the user to mount a different file system data
      structure without altering his login or accounting information.
      Transfer parameters are similarly unchanged.  The argument is a
      pathname specifying a directory or other system dependent file
      group designator.

   REINITIALIZE (REIN)

      This command terminates a USER, flushing all I/O and account
      information, except to allow any transfer in progress to be
      completed.  All parameters are reset to the default settings and
      the control connection is left open.  This is identical to the
      state in which a user finds himself immediately after the control
      connection is opened.  A USER command may be expected to follow.

   LOGOUT (QUIT)



Bryan                    Expires August 7, 2011                [Page 32]

Internet-Draft           File Transfer Protocol            February 2011


      This command terminates a USER and if file transfer is not in
      progress, the server closes the control connection.  If file
      transfer is in progress, the connection will remain open for
      result response and the server will then close it.  If the user-
      process is transferring files for several USERs but does not wish
      to close and then reopen connections for each, then the REIN
      command should be used instead of QUIT.

      An unexpected close on the control connection will cause the
      server to take the effective action of an abort (ABOR) and a
      logout (QUIT).

4.1.2.  Transfer Parameter Commands

   All data transfer parameters have default values, and the commands
   specifying data transfer parameters are required only if the default
   parameter values are to be changed.  The default value is the last
   specified value, or if no value has been specified, the standard
   default value is as stated here.  This implies that the server must
   "remember" the applicable default values.  The commands MAY be in any
   order except that they MUST precede the FTP service request.  The
   following commands specify data transfer parameters:

   DATA PORT (PORT)

      The argument is a HOST-PORT specification for the data port to be
      used in data connection.  There are defaults for both the user and
      server data ports, and under normal circumstances this command and
      its reply are not needed.  If this command is used, the argument
      is the concatenation of a 32-bit internet host address and a 16-
      bit TCP port address.  This address information is broken into
      8-bit fields and the value of each field is transmitted as a
      decimal number (in character string representation).  The fields
      are separated by commas.  A port command would be:

         PORT h1,h2,h3,h4,p1,p2

      where h1 is the high order 8 bits of the internet host address.

   PASSIVE (PASV)

      This command requests the server-DTP to "listen" on a data port
      (which is not its default data port) and to wait for a connection
      rather than initiate one upon receipt of a transfer command.  The
      response to this command includes the host and port address this
      server is listening on.





Bryan                    Expires August 7, 2011                [Page 33]

Internet-Draft           File Transfer Protocol            February 2011


      A server-FTP MUST implement the PASV command.

      If multiple third-party transfers are to be executed during the
      same session, a new PASV command MUST be issued before each
      transfer command, to obtain a unique port pair.

   REPRESENTATION TYPE (TYPE)

      The argument specifies the representation type as described in
      Section 3.1.1.  Several types take a second parameter.  The first
      parameter is denoted by a single Telnet character, as is the
      second Format parameter for ASCII and EBCDIC; the second parameter
      for local byte is a decimal integer to indicate Bytesize.  The
      parameters are separated by a <SP> (Space, ASCII code 32).

      The following codes are assigned for type:




                            \    /
                  A - ASCII |    | N - Non-print
                            |-><-| T - Telnet format effectors
                  E - EBCDIC|    | C - Carriage Control (ASA)
                            /    \
                  I - Image

                  L <byte size> - Local byte Byte size

      The default representation type is ASCII Non-print.  If the Format
      parameter is changed, and later just the first argument is
      changed, Format then returns to the Non-print default.

   FILE STRUCTURE (STRU)

      The argument is a single Telnet character code specifying file
      structure described in Section 3.1.2.

      The following codes are assigned for structure:

         F - File (no record structure)

         R - Record structure

         P - Page structure






Bryan                    Expires August 7, 2011                [Page 34]

Internet-Draft           File Transfer Protocol            February 2011


      The default structure is File.

   TRANSFER MODE (MODE)

      The argument is a single Telnet character code specifying the data
      transfer modes described in Section 3.4.

      The following codes are assigned for transfer modes:

         S - Stream

         B - Block

         C - Compressed

      The default transfer mode is Stream.

4.1.2.1.  Extensions for IPv6 and NATs: Extended Port (EPRT) and
          Extended Passive Mode (EPSV)

   Originally, the File Transfer Protocol [RFC0959] only provided the
   ability to communicate information about IPv4 [RFC0791] data
   connections.  FTP assumes network addresses will be 32 bits in
   length.  However, with the deployment of version 6 of the Internet
   Protocol [RFC2460] addresses will no longer be 32 bits long.
   [RFC1639] (now obsolete) specifies extensions to FTP to enable its
   use over various network protocols.  Unfortunately, the mechanism can
   fail in a multi-protocol environment.  During the transition between
   IPv4 and IPv6, FTP needs the ability to negotiate the network
   protocol that will be used for data transfer.

   This section provides a specification for a way that FTP can
   communicate data connection endpoint information for network
   protocols other than IPv4.  In this section, the FTP commands PORT
   and PASV are replaced with EPRT and EPSV, respectively.

4.1.2.1.1.  The EPRT Command

   The EPRT command allows for the specification of an extended address
   for the data connection.  The extended address MUST consist of the
   network protocol as well as the network and transport addresses.  The
   format of EPRT is:


              EPRT<space><d><net-prt><d><net-addr><d><tcp-port><d>

   The EPRT command keyword MUST be followed by a single space (ASCII
   32).  Following the space, a delimiter character (<d>) MUST be



Bryan                    Expires August 7, 2011                [Page 35]

Internet-Draft           File Transfer Protocol            February 2011


   specified.  The delimiter character MUST be one of the ASCII
   characters in range 33-126 inclusive.  The character "|" (ASCII 124)
   is recommended unless it coincides with a character needed to encode
   the network address.

   The <net-prt> argument MUST be an address family number defined by
   the IANA "Port Numbers" Registry at
   http://www.iana.org/assignments/port-numbers.  This number indicates
   the protocol to be used (and, implicitly, the address length).  This
   document will use two of address family numbers from the IANA
   "Address Family Numbers" Registry at http://www.iana.org/assignments/
   address-family-numbers/address-family-numbers.xhtml as examples,
   according to the following table:


           AF Number   Protocol
           ---------   --------
           1           Internet Protocol, Version 4 [RFC0791]
           2           Internet Protocol, Version 6 [RFC2460]

   The <net-addr> is a protocol specific string representation of the
   network address.  For the two address families specified above (AF
   Number 1 and 2), addresses MUST be in the following format:


           AF Number   Address Format      Example
           ---------   --------------      -------
           1           dotted decimal      132.235.1.2
           2           IPv6 string         1080::8:800:200C:417A
                       representations
                       defined in [RFC2460]

   The <tcp-port> argument must be the string representation of the
   number of the TCP port on which the host is listening for the data
   connection.

   The following are sample EPRT commands:


           EPRT |1|132.235.1.2|6275|

           EPRT |2|1080::8:800:200C:417A|5282|

   The first command specifies that the server should use IPv4 to open a
   data connection to the host "132.235.1.2" on TCP port 6275.  The
   second command specifies that the server should use the IPv6 network
   protocol and the network address "1080::8:800:200C:417A" to open a
   TCP data connection on port 5282.



Bryan                    Expires August 7, 2011                [Page 36]

Internet-Draft           File Transfer Protocol            February 2011


   Upon receipt of a valid EPRT command, the server MUST return a code
   of 200 (Command OK).  The standard negative error code 500 and 501
   [RFC0959] are sufficient to handle most errors (e.g., syntax errors)
   involving the EPRT command.  However, an additional error code is
   needed.  The response code 522 indicates that the server does not
   support the requested network protocol.  The interpretation of this
   new error code is:

           5yz Negative Completion
           x2z Connections
           xy2 Extended Port Failure - unknown network protocol

   The text portion of the response MUST indicate which network
   protocols the server does support.  If the network protocol is
   unsupported, the format of the response string MUST be:


           <text stating that the network protocol is unsupported> \
               (prot1,prot2,...,protn)

   Both the numeric code specified above and the protocol information
   between the characters '(' and ')' are intended for the software
   automata receiving the response; the textual message between the
   numeric code and the '(' is intended for the human user and can be
   any arbitrary text, but MUST NOT include the characters '(' and ')'.
   In the above case, the text SHOULD indicate that the network protocol
   in the EPRT command is not supported by the server.  The list of
   protocols inside the parenthesis MUST be a comma separated list of
   address family numbers.  Two example response strings follow:


           Network protocol not supported, use (1)

           Network protocol not supported, use (1,2)


4.1.2.1.2.  The EPSV Command

   The EPSV command requests that a server listen on a data port and
   wait for a connection.  The EPSV command takes an optional argument.
   The response to this command includes only the TCP port number of the
   listening connection.  The format of the response, however, is
   similar to the argument of the EPRT command.  This allows the same
   parsing routines to be used for both commands.  In addition, the
   format leaves a place holder for the network protocol and/or network
   address, which may be needed in the EPSV response in the future.  The
   response code for entering passive mode using an extended address
   MUST be 229.  The interpretation of this code, according to [RFC0959]



Bryan                    Expires August 7, 2011                [Page 37]

Internet-Draft           File Transfer Protocol            February 2011


   is:


           2yz Positive Completion
           x2z Connections
           xy9 Extended Passive Mode Entered

      The text returned in response to the EPSV command MUST be:

           <text indicating server is entering extended passive mode> \
               (<d><d><d><tcp-port><d>)

   The portion of the string enclosed in parentheses MUST be the exact
   string needed by the EPRT command to open the data connection, as
   specified above.

   The first two fields contained in the parenthesis MUST be blank.  The
   third field MUST be the string representation of the TCP port number
   on which the server is listening for a data connection.  The network
   protocol used by the data connection will be the same network
   protocol used by the control connection.  In addition, the network
   address used to establish the data connection will be the same
   network address used for the control connection.  An example response
   string follows:


           Entering Extended Passive Mode (|||6446|)

   The standard negative error codes 500 and 501 are sufficient to
   handle all errors involving the EPSV command (e.g., syntax errors).

   When the EPSV command is issued with no argument, the server will
   choose the network protocol for the data connection based on the
   protocol used for the control connection.  However, in the case of
   proxy FTP, this protocol might not be appropriate for communication
   between the two servers.  Therefore, the client needs to be able to
   request a specific protocol.  If the server returns a protocol that
   is not supported by the host that will be connecting to the port, the
   client MUST issue an ABOR (abort) command to allow the server to
   close down the listening connection.  The client can then send an
   EPSV command requesting the use of a specific network protocol, as
   follows:


           EPSV<space><net-prt>

   If the requested protocol is supported by the server, it SHOULD use
   the protocol.  If not, the server MUST return the 522 error messages



Bryan                    Expires August 7, 2011                [Page 38]

Internet-Draft           File Transfer Protocol            February 2011


   as outlined in Section 4.1.2.1.1.

   Finally, the EPSV command can be used with the argument "ALL" to
   inform Network Address Translators that the EPRT command (as well as
   other data commands) will no longer be used.  An example of this
   command follows:


           EPSV<space>ALL

   Upon receipt of an EPSV ALL command, the server MUST reject all data
   connection setup commands other than EPSV (i.e., EPRT, PORT, PASV, et
   al.).  This use of the EPSV command is further explained in
   Section 4.1.2.1.3.

4.1.2.1.3.  Command Usage

   For all FTP transfers where the control and data connection(s) are
   being established between the same two machines, the EPSV command
   MUST be used.  Using the EPSV command benefits performance of
   transfers that traverse firewalls or Network Address Translators
   (NATs).  RFC 1579 recommends using the passive command when behind
   firewalls since firewalls do not generally allow incoming connections
   (which are required when using the PORT (EPRT) command).  In
   addition, using EPSV as defined in this document does not require
   NATs to change the network address in the traffic as it is forwarded.
   The NAT would have to change the address if the EPRT command was
   used.  Finally, if the client issues an "EPSV ALL" command, NATs may
   be able to put the connection on a "fast path" through the
   translator, as the EPRT command will never be used and therefore,
   translation of the data portion of the segments will never be needed.
   When a client only expects to do two-way FTP transfers, it SHOULD
   issue this command as soon as possible.  If a client later finds that
   it must do a three-way FTP transfer after issuing an EPSV ALL
   command, a new FTP session MUST be started.

4.1.3.  FTP Service Commands

   The FTP service commands define the file transfer or the file system
   function requested by the user.  The argument of an FTP service
   command will normally be a pathname.  The syntax of pathnames must
   conform to server site conventions (with standard defaults
   applicable), and the language conventions of the control connection.
   The suggested default handling is to use the last specified device,
   directory or file name, or the standard default defined for local
   users.  The commands MAY be in any order except that a "rename from"
   command MUST be followed by a "rename to" command and the restart
   command MUST be followed by the interrupted service command (e.g.,



Bryan                    Expires August 7, 2011                [Page 39]

Internet-Draft           File Transfer Protocol            February 2011


   STOR or RETR).  The data, when transferred in response to FTP service
   commands, shall always be sent over the data connection, except for
   certain informative replies.  The following commands specify FTP
   service requests:

   RETRIEVE (RETR)

      This command causes the server-DTP to transfer a copy of the file,
      specified in the pathname, to the server- or user-DTP at the other
      end of the data connection.  The status and contents of the file
      at the server site shall be unaffected.

   STORE (STOR)

      This command causes the server-DTP to accept the data transferred
      via the data connection and to store the data as a file at the
      server site.  If the file specified in the pathname exists at the
      server site, then its contents shall be replaced by the data being
      transferred.  A new file is created at the server site if the file
      specified in the pathname does not already exist.

   STORE UNIQUE (STOU)

      The STOU command stores into a uniquely named file.  When it
      receives an STOU command, a Server-FTP MUST return the actual file
      name in the "125 Transfer Starting" or the "150 Opening Data
      Connection" message that precedes the transfer (the 250 reply code
      mentioned in [RFC0959] is incorrect).  The exact format of these
      messages is hereby defined to be as follows:

         125 FILE: pppp

         150 FILE: pppp

      where pppp represents the unique pathname of the file that will be
      written.

   APPEND (with create) (APPE)

      This command causes the server-DTP to accept the data transferred
      via the data connection and to store the data in a file at the
      server site.  If the file specified in the pathname exists at the
      server site, then the data shall be appended to that file;
      otherwise the file specified in the pathname shall be created at
      the server site.

   ALLOCATE (ALLO)




Bryan                    Expires August 7, 2011                [Page 40]

Internet-Draft           File Transfer Protocol            February 2011


      This command may be required by some servers to reserve sufficient
      storage to accommodate the new file to be transferred.  The
      argument shall be a decimal integer representing the number of
      bytes (using the logical byte size) of storage to be reserved for
      the file.  For files sent with record or page structure a maximum
      record or page size (in logical bytes) might also be necessary;
      this is indicated by a decimal integer in a second argument field
      of the command.  This second argument is optional, but when
      present should be separated from the first by the three Telnet
      characters <SP> R <SP>.  This command shall be followed by a STORe
      or APPEnd command.  The ALLO command should be treated as a NOOP
      (no operation) by those servers which do not require that the
      maximum size of the file be declared beforehand, and those servers
      interested in only the maximum record or page size should accept a
      dummy value in the first argument and ignore it.

   RENAME FROM (RNFR)

      This command specifies the old pathname of the file which is to be
      renamed.  This command MUST be immediately followed by a "rename
      to" command specifying the new file pathname.

   RENAME TO (RNTO)

      This command specifies the new pathname of the file specified in
      the immediately preceding "rename from" command.  Together the two
      commands cause a file to be renamed.

   ABORT (ABOR)

      This command tells the server to abort the previous FTP service
      command and any associated transfer of data.  The abort command
      may require "special action", as discussed in the "Special Action"
      portion at the end of Section 4.1.3, to force recognition by the
      server.  No action is to be taken if the previous command has been
      completed (including data transfer).  The control connection is
      not to be closed by the server, but the data connection must be
      closed.

      There are two cases for the server upon receipt of this command:
      (1) the FTP service command was already completed, or (2) the FTP
      service command is still in progress.

      In the first case, the server closes the data connection (if it is
      open) and responds with a 226 reply, indicating that the abort
      command was successfully processed.





Bryan                    Expires August 7, 2011                [Page 41]

Internet-Draft           File Transfer Protocol            February 2011


      In the second case, the server aborts the FTP service in progress
      and closes the data connection, returning a 426 reply to indicate
      that the service request terminated abnormally.  The server then
      sends a 226 reply, indicating that the abort command was
      successfully processed.

   DELETE (DELE)

      This command causes the file specified in the pathname to be
      deleted at the server site.  If an extra level of protection is
      desired (such as the query, "Do you really wish to delete?"), it
      should be provided by the user-FTP process.

   REMOVE DIRECTORY (RMD)

      This command causes the directory specified in the pathname to be
      removed as a directory (if the pathname is absolute) or as a
      subdirectory of the current working directory (if the pathname is
      relative).  See Appendix B.

   MAKE DIRECTORY (MKD)

      This command causes the directory specified in the pathname to be
      created as a directory (if the pathname is absolute) or as a
      subdirectory of the current working directory (if the pathname is
      relative).  See Appendix B.

   PRINT WORKING DIRECTORY (PWD)

      This command causes the name of the current working directory to
      be returned in the reply.  See Appendix B.

   LIST (LIST)

      This command causes a list to be sent from the server to the
      passive DTP.  If the pathname specifies a directory or other group
      of files, the server should transfer a list of files in the
      specified directory.  If the pathname specifies a file then the
      server should send current information on the file.  A null
      argument implies the user's current working or default directory.
      The data transfer is over the data connection in type ASCII or
      type EBCDIC.  (The user must ensure that the TYPE is appropriately
      ASCII or EBCDIC).  Since the information on a file may vary widely
      from system to system, this information may be hard to use
      automatically in a program, but may be quite useful to a human
      user.

   NAME LIST (NLST)



Bryan                    Expires August 7, 2011                [Page 42]

Internet-Draft           File Transfer Protocol            February 2011


      This command causes a directory listing to be sent from server to
      user site.  The pathname should specify a directory or other
      system-specific file group descriptor; a null argument implies the
      current directory.  The server will return a stream of names of
      files and no other information.  The data will be transferred in
      ASCII or EBCDIC type over the data connection as valid pathname
      strings separated by <CRLF> or <NL>.  (Again the user must ensure
      that the TYPE is correct.)  This command is intended to return
      information that can be used by a program to further process the
      files automatically.  For example, in the implementation of a
      "multiple get" function.

   SITE PARAMETERS (SITE)

      This command is used by the server to provide services specific to
      his system that are essential to file transfer but not
      sufficiently universal to be included as commands in the protocol.
      The nature of these services and the specification of their syntax
      can be stated in a reply to the HELP SITE command.

      A Server-FTP SHOULD use the SITE command for non-standard
      features, rather than invent new private commands or
      unstandardized extensions to existing commands.

   SYSTEM (SYST)

      This command is used to find out the type of operating system at
      the server.  The reply shall have as its first word one of the
      system names listed in the current version of the IANA "Operating
      System Names" Registry (
      http://www.iana.org/assignments/operating-system-names at the time
      of this writing)

   STATUS (STAT)

      This command shall cause a status response to be sent over the
      control connection in the form of a reply.  The command MAY be
      sent during a file transfer (along with the Telnet IP and Synch
      signals--see the "Special Action" portion at the end of
      Section 4.1.3) in which case the server will respond with the
      status of the operation in progress, or it MAY be sent between
      file transfers.  In the latter case, the command MAY have an
      argument field.  If the argument is a pathname, the command is
      analogous to the "list" command except that data shall be
      transferred over the control connection.  If a partial pathname is
      given, the server MAY respond with a list of file names or
      attributes associated with that specification.  If no argument is
      given, the server should return general status information about



Bryan                    Expires August 7, 2011                [Page 43]

Internet-Draft           File Transfer Protocol            February 2011


      the server FTP process.  This should include current values of all
      transfer parameters and the status of connections.

   HELP (HELP)

      This command shall cause the server to send helpful information
      regarding its implementation status over the control connection to
      the user.  The command MAY take an argument (e.g., any command
      name) and return more specific information as a response.  The
      reply is type 211 or 214.  It is suggested that HELP be allowed
      before entering a USER command.  The server MAY use this reply to
      specify site-dependent parameters, e.g., in response to HELP SITE.

   NOOP (NOOP)

      This command does not affect any parameters or previously entered
      commands.  It specifies no action other than that the server send
      an OK reply.

   The File Transfer Protocol follows the specifications of the Telnet
   protocol for all communications over the control connection.  Since
   the language used for Telnet communication may be a negotiated
   option, all references in the next two sections will be to the
   "Telnet language" and the corresponding "Telnet end-of-line code".
   Currently, one may take these to mean NVT-ASCII and <CRLF>.  No other
   specifications of the Telnet protocol will be cited.

   FTP commands are "Telnet strings" terminated by the "Telnet end of
   line code".  The command codes themselves are alphabetic characters
   terminated by the character <SP> (Space) if parameters follow and
   Telnet-EOL otherwise.  Implementors MUST NOT assume any
   correspondence between READ boundaries on the control connection and
   the Telnet EOL sequences (CR LF).  The command codes and the
   semantics of commands are described in this section; the detailed
   syntax of commands is specified in Section 5.3, the reply sequences
   are discussed in Section 5.4, and scenarios illustrating the use of
   commands are provided in Section 7.

   LIST and NLST Commands

      The data returned by an NLST command MUST contain only a simple
      list of legal pathnames, such that the server can use them
      directly as the arguments of subsequent data transfer commands for
      the individual files.

      The data returned by a LIST or NLST command SHOULD use an implied
      TYPE AN, unless the current type is EBCDIC, in which case an
      implied TYPE EN SHOULD be used.



Bryan                    Expires August 7, 2011                [Page 44]

Internet-Draft           File Transfer Protocol            February 2011


   Special Action

   FTP commands may be partitioned as those specifying access-control
   identifiers, data transfer parameters, or FTP service requests.
   Certain commands (such as ABOR, STAT, QUIT) MAY be sent over the
   control connection while a data transfer is in progress.  Some
   servers may not be able to monitor the control and data connections
   simultaneously, in which case some special action will be necessary
   to get the server's attention.  The following ordered format is
   tentatively recommended:

      1.  User system inserts the Telnet "Interrupt Process" (IP) signal
      in the Telnet stream.

      2.  User system sends the Telnet "Synch" signal.

      3.  User system inserts the command (e.g., ABOR) in the Telnet
      stream.

      4.  Server PI, after receiving "IP", scans the Telnet stream for
      EXACTLY ONE FTP command.

   (For other servers this may not be necessary but the actions listed
   above should have no unusual effect.)

4.1.4.  Feature Negotiation Mechanism

   The "FEAT" and "OPTS" commands allow a client to discover which
   optional commands a server supports, and how they are supported, and
   to select among various options that any FTP command may support.

   It is not to be expected that all servers will necessarily support
   all of the new commands defined in all future amendments to the FTP
   protocol.  In order to permit clients to determine which new commands
   are supported by a particular server, without trying each possible
   command, one new command is added to the FTP command repertoire.
   This command requests the server to list all extension commands, or
   extended mechanisms, that it supports.  That is, all defined and
   specified commands and features not defined in [RFC0959], or this
   document, must be included in the FEAT command output in the form
   specified in the document that defines the extension.

   User-FTP PIs must expect to see, in FEAT command responses, unknown
   features listed.  This is not an error, and simply indicates that the
   server-FTP implementor has seen, and implemented, the specification
   of a new feature that is unknown to the user-FTP.





Bryan                    Expires August 7, 2011                [Page 45]

Internet-Draft           File Transfer Protocol            February 2011


4.1.4.1.  Feature (FEAT) Command Syntax


           feat            = "Feat" CRLF

   The FEAT command consists solely of the word "FEAT".  It has no
   parameters or arguments.

4.1.4.2.  FEAT Command Responses

   Where a server-FTP process does not support the FEAT command, it will
   respond to the FEAT command with a 500 or 502 reply.  This is simply
   the normal "unrecognized command" reply that any unknown command
   would elicit.  Errors in the command syntax, such as giving
   parameters, will result in a 501 reply.

   Server-FTP processes that recognize the FEAT command, but implement
   no extended features, and therefore have nothing to report, SHOULD
   respond with the "no-features" 211 reply.  However, as this case is
   practically indistinguishable from a server-FTP that does not
   recognize the FEAT command, a 500 or 502 reply MAY also be used.  The
   "no-features" reply MUST NOT use the multi-line response format,
   exactly one response line is required and permitted.

   Replies to the FEAT command MUST comply with the following syntax.
   Text on the first line of the reply is free form, and not
   interpreted, and has no practical use, as this text is not expected
   to be revealed to end users.  The syntax of other reply lines is
   precisely defined, and if present, MUST be exactly as specified.


        feat-response   = error-response / no-features / feature-listing
        no-features     = "211" SP *TCHAR CRLF
        feature-listing = "211-" *TCHAR CRLF
                          1*( SP feature CRLF )
                          "211 End" CRLF
        feature         = feature-label [ SP feature-parms ]
        feature-label   = 1*VCHAR
        feature-parms   = 1*TCHAR

   Note that each feature line in the feature-listing begins with a
   single space.  That space is not optional, nor does it indicate
   general white space.  This space guarantees that the feature line can

   never be misinterpreted as the end of the feature-listing, but is
   required even where there is no possibility of ambiguity.

   Each extension supported must be listed on a separate line to



Bryan                    Expires August 7, 2011                [Page 46]

Internet-Draft           File Transfer Protocol            February 2011


   facilitate the possible inclusion of parameters supported by each
   extension command.  The feature-label to be used in the response to
   the FEAT command will be specified as each new feature is added to
   the FTP command set.  Often it will be the name of a new command
   added, however this is not required.  In fact it is not required that
   a new feature actually add a new command.  Any parameters included
   are to be specified with the definition of the command concerned.
   That specification shall also specify how any parameters present are
   to be interpreted.

   The feature-label and feature-parms are nominally case sensitive,
   however the definitions of specific labels and parameters specify the
   precise interpretation, and it is to be expected that those
   definitions will usually specify the label and parameters in a case
   independent manner.  Where this is done, implementations are
   recommended to use upper case letters when transmitting the feature
   response.

   The FEAT command itself is not included in the list of features
   supported, support for the FEAT command is indicated by return of a
   reply other than a 500 or 502 reply.

   A typical example reply to the FEAT command might be a multiline
   reply of the form:


           C> feat
           S> 211-Extensions supported:
           S>  MLST size*;create;modify*;perm;media-type
           S>  SIZE
           S>  COMPRESSION
           S>  MDTM
           S> 211 END

   The particular extensions shown here are simply examples of what may
   be defined in other places, no particular meaning should be
   attributed to them.  Recall also, that the feature names returned are
   not command names, as such, but simply indications that the server
   possesses some attribute or other.

   The order in which the features are returned is of no importance,
   server-FTP processes are not required to implement any particular
   order, or even to consistently return the same order when the command
   is repeated.

   FTP implementations which support FEAT MUST include in the response
   to the FEAT command all properly documented FTP extensions beyond
   those commands and mechanisms described in RFC959, including any



Bryan                    Expires August 7, 2011                [Page 47]

Internet-Draft           File Transfer Protocol            February 2011


   which existed before the existence of FEAT.  That is, when a client
   receives a FEAT response from an FTP server, it can assume that the
   only extensions the server supports are those that are listed in the
   FEAT response.

   User-FTP processes should, however, be aware that there have been
   several FTP extensions developed, and in widespread use, prior to the
   adoption of this document and the FEAT command.  The effect of this
   is that an error response to the FEAT command does not necessarily
   imply that those extensions are not supported by the server-FTP
   process.  User-PIs should test for such extensions individually if an
   error response has been received to the FEAT command.

4.1.4.3.  Rationale for FEAT

   While not absolutely necessary, a standard mechanism for the
   server-PI to inform the user-PI of any features and extensions
   supported will help reduce unnecessary traffic between the user-PI
   and server-PI as more extensions may be introduced in the future.  If
   no mechanism existed for this, a user-FTP process would have to try
   each extension in turn resulting in a series of exchanges between the
   user-PI and server-PI.  Apart from being possibly wasteful, this
   procedure may not always be possible, as issuing of a command just to
   determine if it is supported or not may have some effect that is not
   desired.

4.1.4.4.  The OPTS Command

   The OPTS (options) command allows a user-PI to specify the desired
   behavior of a server-FTP process when another FTP command (the target
   command) is later issued.  The exact behavior, and syntax, will vary
   with the target command indicated, and will be specified with the
   definition of that command.  Where no OPTS behavior is defined for a
   particular command there are no options available for that command.


   Request Syntax:
        opts             = opts-cmd SP command-name
                               [ SP command-options ] CRLF
        opts-cmd         = "opts"
        command-name     = <any FTP command which allows option setting>
        command-options  = <format specified by individual FTP command>

   Response Syntax:
        opts-response    = opts-good / opts-bad
        opts-good        = "200" SP response-message CRLF
        opts-bad         = "451" SP response-message CRLF /
                           "501" SP response-message CRLF



Bryan                    Expires August 7, 2011                [Page 48]

Internet-Draft           File Transfer Protocol            February 2011


        response-message = *TCHAR


   An "opts-good" response (200 reply) MUST be sent when the command-
   name specified in the OPTS command is recognized, and the command-
   options, if any, are recognized, and appropriate.  An "opts-bad"
   response is sent in other cases.  A 501 reply is appropriate for any
   permanent error.  That is, for any case where simply repeating the
   command at some later time, without other changes of state, will also
   be an error.  A 451 reply should be sent where some temporary
   condition at the server, not related to the state of communications
   between user and server, prevents the command being accepted when
   issued, but where if repeated at some later time, a changed
   environment for the server-FTP process may permit the command to
   succeed.  If the OPTS command itself is not recognized, a 500 or 502
   reply will, of course, result.

   The OPTS command MUST be implemented whenever the FEAT command is
   implemented.  Because of that, there is no indication in the list of
   features returned by FEAT to indicate that the OPTS command itself is
   supported.  Neither the FEAT command, nor the OPTS command, have any
   optional functionality, thus there are no "OPTS FEAT" or "OPTS OPTS"
   commands.

4.1.5.  Extensions to FTP

4.1.5.1.  File Modification Time (MDTM)

   The FTP command, MODIFICATION TIME (MDTM), can be used to determine
   when a file in the server NVFS was last modified.  This command has
   existed in many FTP servers for many years, as an adjunct to the REST
   command for STREAM mode, thus is widely available.  However, where
   supported, the "modify" fact that can be provided in the result from
   the new MLST command is recommended as a superior alternative.

   When attempting to restart a RETRieve, the user-FTP can use the MDTM
   command or the "modify" fact to check if the modification time of the
   source file is more recent than the modification time of the
   partially transferred file.  If it is, then most likely the source
   file has changed, and it would be unsafe to restart the previously
   incomplete file transfer.

   Because the user- and server-FTPs' clocks are not necessarily
   synchronised, user-FTPs intending to use this method should usually
   obtain the modification time of the file from the server before the
   initial RETRieval, and compare that with the modification time before
   a RESTart.  If they differ, the files may have changed, and RESTart
   would be inadvisable.  Where this is not possible, the user-FTP



Bryan                    Expires August 7, 2011                [Page 49]

Internet-Draft           File Transfer Protocol            February 2011


   should make sure to allow for possible clock skew when comparing
   times.

   When attempting to restart a STORe, the User FTP can use the MDTM
   command to discover the modification time of the partially
   transferred file.  If it is older than the modification time of the
   file that is about to be STORed, then most likely the source file has
   changed, and it would be unsafe to restart the file transfer.

   Note that using MLST (described below), where available, can provide
   this information and much more, thus giving an even better indication
   that a file has changed and that restarting a transfer would not give
   valid results.

   Note that this is applicable to any RESTart attempt, regardless of
   the mode of the file transfer.

4.1.5.1.1.  Syntax

   The syntax for the MDTM command is:


         mdtm          = "MdTm" SP pathname CRLF

   As with all FTP commands, the "MDTM" command label is interpreted in
   a case-insensitive manner.

   The "pathname" specifies an object in the NVFS that may be the object
   of a RETR command.  Attempts to query the modification time of files
   that exist but are unable to be retrieved may generate an error-
   response, or can result in a positive response carrying a time-val
   with an unspecified value, the choice being made by the server-PI.

   The server-PI will respond to the MDTM command with a 213 reply
   giving the last modification time of the file whose pathname was
   supplied, or a 550 reply if the file does not exist, the modification
   time is unavailable, or some other error has occurred.


         mdtm-response = "213" SP time-val CRLF /
                         error-response

   Note that when the 213 response is issued, that is, when there is no
   error, the format MUST be exactly as specified.  Multi-line responses
   are not permitted.






Bryan                    Expires August 7, 2011                [Page 50]

Internet-Draft           File Transfer Protocol            February 2011


4.1.5.1.2.  Error Responses

   Where the command is correctly parsed but the modification time is
   not available, either because the pathname identifies no existing
   entity or because the information is not available for the entity
   named, then a 550 reply should be sent.  Where the command cannot be
   correctly parsed, a 500 or 501 reply should be sent, as specified in
   [RFC0959].  Various 4yz replies are also possible in appropriate
   circumstances.

4.1.5.1.3.  FEAT Response for MDTM

   When replying to the FEAT command [RFC2389], a server-FTP process
   that supports the MDTM command MUST include a line containing the
   single word "MDTM".  This MAY be sent in upper or lower case or a
   mixture of both (it is case insensitive), but SHOULD be transmitted
   in upper case only.  That is, the response SHOULD be:


         C> Feat
         S> 211- <any descriptive text>
         S>  ...
         S>  MDTM
         S>  ...
         S> 211 End

   The ellipses indicate place holders where other features may be
   included, but are not required.  The one-space indentation of the
   feature lines is mandatory [RFC2389].

4.1.5.1.4.  MDTM Examples

   If we assume the existence of three files, A B and C, a directory D,
   two files with names that end with the string "ile6", and no other
   files at all, then the MDTM command may behave as indicated.  The
   "C>" lines are commands from user-PI to server-PI, the "S>" lines are
   server-PI replies.














Bryan                    Expires August 7, 2011                [Page 51]

Internet-Draft           File Transfer Protocol            February 2011


         C> MDTM A
         S> 213 19980615100045.014
         C> MDTM B
         S> 213 19980615100045.014
         C> MDTM C
         S> 213 19980705132316
         C> MDTM D
         S> 550 D is not retrievable
         C> MDTM E
         S> 550 No file named "E"
         C> mdtm file6
         S> 213 19990929003355
         C> MdTm 19990929043300 File6
         S> 213 19991005213102
         C> MdTm 19990929043300 file6
         S> 550 19990929043300 file6: No such file or directory.

   From that we can conclude that both A and B were last modified at the
   same time (to the nearest millisecond), and that C was modified 20
   days and several hours later.

   The times are in GMT, so file A was modified on the 15th of June,
   1998, at approximately 11am in London (summer time was then in
   effect), or perhaps at 8pm in Melbourne, Australia, or at 6am in New
   York.  All of those represent the same absolute time, of course.  The
   location where the file was modified, and consequently the local wall
   clock time at that location, is not available.

   There is no file named "E" in the current directory, but there are
   files named both "file6" and "19990929043300 File6".  The
   modification times of those files were obtained.  There is no file
   named "19990929043300 file6".

4.1.5.2.  File SIZE

   The FTP command, SIZE OF FILE (SIZE), is used to obtain the transfer
   size of a file from the server-FTP process.  This is the exact number
   of octets (8 bit bytes) that would be transmitted over the data
   connection should that file be transmitted.  This value will change
   depending on the current STRUcture, MODE, and TYPE of the data
   connection or of a data connection that would be created were one
   created now.  Thus, the result of the SIZE command is dependent on
   the currently established STRU, MODE, and TYPE parameters.

   The SIZE command returns how many octets would be transferred if the
   file were to be transferred using the current transfer structure,
   mode, and type.  This command is normally used in conjunction with
   the RESTART (REST) command when STORing a file to a remote server in



Bryan                    Expires August 7, 2011                [Page 52]

Internet-Draft           File Transfer Protocol            February 2011


   STREAM mode, to determine the restart point.  The server-PI might
   need to read the partially transferred file, do any appropriate
   conversion, and count the number of octets that would be generated
   when sending the file in order to correctly respond to this command.
   Estimates of the file transfer size MUST NOT be returned; only
   precise information is acceptable.

4.1.5.2.1.  Syntax

   The syntax of the SIZE command is:


         size          = "Size" SP pathname CRLF

   The server-PI will respond to the SIZE command with a 213 reply
   giving the transfer size of the file whose pathname was supplied, or
   an error response if the file does not exist, the size is
   unavailable, or some other error has occurred.  The value returned is
   in a format suitable for use with the RESTART (REST) command for mode
   STREAM, provided the transfer mode and type are not altered.


         size-response = "213" SP 1*DIGIT CRLF /
                         error-response

   Note that when the 213 response is issued, that is, when there is no
   error, the format MUST be exactly as specified.  Multi-line responses
   are not permitted.

4.1.5.2.2.  Error Responses

   Where the command is correctly parsed but the size is not available,
   perhaps because the pathname identifies no existing entity or because
   the entity named cannot be transferred in the current MODE and TYPE
   (or at all), then a 550 reply should be sent.  Where the command
   cannot be correctly parsed, a 500 or 501 reply should be sent, as
   specified in [RFC0959].  The presence of the 550 error response to a
   SIZE command MUST NOT be taken by the client as an indication that
   the file cannot be transferred in the current MODE and TYPE.  A
   server may generate this error for other reasons -- for instance if
   the processing overhead is considered too great.  Various 4yz replies
   are also possible in appropriate circumstances.

4.1.5.2.3.  FEAT Response for SIZE

   When replying to the FEAT command [RFC2389], a server-FTP process
   that supports the SIZE command MUST include a line containing the
   single word "SIZE".  This word is case insensitive, and MAY be sent



Bryan                    Expires August 7, 2011                [Page 53]

Internet-Draft           File Transfer Protocol            February 2011


   in any mixture of upper or lower case, however it SHOULD be sent in
   upper case.  That is, the response SHOULD be:


         C> FEAT
         S> 211- <any descriptive text>
         S>  ...
         S>  SIZE
         S>  ...
         S> 211 END

   The ellipses indicate place holders where other features may be
   included, and are not required.  The one-space indentation of the
   feature lines is mandatory [RFC2389].

4.1.5.2.4.  Size Examples

   Consider a text file "Example" stored on a Unix(TM) server where each
   end of line is represented by a single octet.  Assume the file
   contains 112 lines, and 1830 octets total.  Then the SIZE command
   would produce:


         C> TYPE I
         S> 200 Type set to I.
         C> size Example
         S> 213 1830
         C> TYPE A
         S> 200 Type set to A.
         C> Size Example
         S> 213 1942

   Notice that with TYPE=A the SIZE command reports an extra 112 octets.
   Those are the extra octets that need to be inserted, one at the end
   of each line, to provide correct end-of-line semantics for a transfer
   using TYPE=A. Other systems might need to make other changes to the
   transfer format of files when converting between TYPEs and MODEs.
   The SIZE command takes all of that into account.

   Since calculating the size of a file with this degree of precision
   may take considerable effort on the part of the server-PI, user-PIs
   should not used this command unless this precision is essential (such
   as when about to restart an interrupted transfer).  For other uses,
   the "Size" fact of the MLST command (see Section 4.1.5.5.5.7) ought
   be requested.






Bryan                    Expires August 7, 2011                [Page 54]

Internet-Draft           File Transfer Protocol            February 2011


4.1.5.3.  Restart of Interrupted Transfer (REST)

   To avoid having to resend the entire file if the file is only
   partially transferred, both sides need some way to agree on where in
   the data stream to restart the data transfer.

   The FTP specification [RFC0959] includes three modes of data
   transfer, STREAM, Block, and Compressed.  In Block and Compressed
   modes, the data stream that is transferred over the data connection
   is formatted, allowing the embedding of restart markers into the
   stream.  The sending DTP can include a restart marker with whatever
   information it needs to be able to restart a file transfer at that
   point.  The receiving DTP can keep a list of these restart markers,
   and correlate them with how the file is being saved.  To restart the
   file transfer, the receiver just sends back that last restart marker,
   and both sides know how to resume the data transfer.

   A restart reply message, sent over the control connection from the
   receiving FTP to the User-FTP, has the format:

      110 MARK ssss = rrrr

   Here:

      * ssss is a text string that appeared in a Restart Marker in the
      data stream and encodes a position in the sender's file system;

      * rrrr encodes the corresponding position in the receiver's file
      system.

   The encoding, which is specific to a particular file system and
   network implementation, is always generated and interpreted by the
   same system, either sender or receiver.

   When an FTP that implements restart receives a Restart Marker in the
   data stream, it SHOULD force the data to that point to be written to
   stable storage before encoding the corresponding position rrrr.  An
   FTP sending Restart Markers MUST NOT assume that 110 replies will be
   returned synchronously with the data, i.e., it must not await a 110
   reply before sending more data.

4.1.5.3.1.  Restarting in STREAM Mode

   In STREAM mode, the data connection contains just a stream of
   unformatted octets of data.  Explicit restart markers thus cannot be
   inserted into the data stream, they would be indistinguishable from
   data.  For this reason, the FTP specification [RFC0959] did not
   provide the ability to do restarts in stream mode.  However, there is



Bryan                    Expires August 7, 2011                [Page 55]

Internet-Draft           File Transfer Protocol            February 2011


   not really a need to have explicit restart markers in this case, as
   restart markers can be implied by the octet offset into the data
   stream.

   Because the data stream defines the file in STREAM mode, a different
   data stream would represent a different file.  Thus, an offset will
   always represent the same position within a file.  On the other hand,
   in other modes than STREAM, the same file can be transferred using
   quite different octet sequences and yet be reconstructed into the one
   identical file.  Thus an offset into the data stream in transfer
   modes other than STREAM would not give an unambiguous restart point.

   If the data representation TYPE is IMAGE and the STRUcture is File,
   for many systems the file will be stored exactly in the same format
   as it is sent across the data connection.  It is then usually very
   easy for the receiver to determine how much data was previously
   received, and notify the sender of the offset where the transfer
   should be restarted.  In other representation types and structures
   more effort will be required, but it remains always possible to
   determine the offset with finite, but perhaps non-negligible, effort.
   In the worst case, an FTP process may need to open a data connection
   to itself, set the appropriate transfer type and structure, and
   actually transmit the file, counting the transmitted octets.

   If the user-FTP process is intending to restart a retrieve, it will
   directly calculate the restart marker and send that information in
   the RESTart command.  However, if the user-FTP process is intending
   to restart sending the file, it needs to be able to determine how
   much data was previously sent, and correctly received and saved.  A
   new FTP command is needed to get this information.  This is the
   purpose of the SIZE command, as documented in Section 4.1.5.2.

4.1.5.3.2.  Error Recovery and Restart

   STREAM mode transfers with FILE STRUcture may be restarted even
   though no restart marker has been transferred in addition to the data
   itself.  This is done by using the SIZE command, if needed, in
   combination with the RESTART (REST) command, and one of the standard
   file transfer commands.

   When using TYPE ASCII or IMAGE, the SIZE command will return the
   number of octets that would actually be transferred if the file were
   to be sent between the two systems, i.e., with type IMAGE, the SIZE
   normally would be the number of octets in the file.  With type ASCII,
   the SIZE would be the number of octets in the file including any
   modifications required to satisfy the TYPE ASCII CR-LF end-of-line
   convention.




Bryan                    Expires August 7, 2011                [Page 56]

Internet-Draft           File Transfer Protocol            February 2011


4.1.5.3.3.  Syntax

   The syntax for the REST command when the current transfer mode is
   STREAM is:


         rest          = "Rest" SP 1*DIGIT CRLF

   The numeric value gives the number of octets of the immediately-
   following transfer to not actually send, effectively causing the
   transmission to be restarted at a later point.  A value of zero
   effectively disables restart, causing the entire file to be
   transmitted.  The server-PI will respond to the REST command with a
   350 reply, indicating that the REST parameter has been saved, and
   that another command, which should be either RETR or STOR, should
   then follow to complete the restart.


         rest-response = "350" SP *TCHAR CRLF /
                         error-response

   Server-FTP processes may permit transfer commands other than RETR and
   STOR, such as APPE and STOU, to complete a restart; however, this is
   not recommended.  STOU (store unique) is undefined in this usage, as
   storing the remainder of a file into a unique file name is rarely
   going to be useful.  If APPE (append) is permitted, it MUST act
   identically to STOR when a restart marker has been set.  That is, in
   both cases, octets from the data connection are placed into the file
   at the location indicated by the restart marker value.

   The REST command is intended to complete a failed transfer.  Use with
   RETR is comparatively well defined in all cases, as the client bears
   the responsibility of merging the retrieved data with the partially
   retrieved file.  It may choose to use the data obtained other than to
   complete an earlier transfer, or to re-retrieve data that had been
   retrieved before.  With STOR, however, the server must insert the
   data into the file named.  The results are undefined if a client uses
   REST to do other than restart to complete a transfer of a file that
   had previously failed to completely transfer.  In particular, if the
   restart marker set with a REST command is not at the end of the data
   currently stored at the server, as reported by the server, or if
   insufficient data are provided in a STOR that follows a REST to
   extend the destination file to at least its previous size, then the
   effects are undefined.

   The REST command must be the last command issued before the data
   transfer command that is to cause a restarted, rather than a
   complete, file transfer.  The effect of issuing a REST command at any



Bryan                    Expires August 7, 2011                [Page 57]

Internet-Draft           File Transfer Protocol            February 2011


   other time is undefined.  The server-PI may react to a badly
   positioned REST command by issuing an error response to the following
   command, not being a restartable data transfer command, or it may
   save the restart value and apply it to the next data transfer
   command, or it may silently ignore the inappropriate restart attempt.
   Because of this, a user-PI that has issued a REST command, but that
   has not successfully transmitted the following data transfer command
   for any reason, should send another REST command before the next data
   transfer command.  If that transfer is not to be restarted, then
   "REST 0" should be issued.

   An error response will follow a REST command only when the server
   does not implement the command, or when the restart marker value is
   syntactically invalid for the current transfer mode (e.g., in STREAM
   mode, something other than one or more digits appears in the
   parameter to the REST command).  Any other errors, including such
   problems as restart marker out of range, should be reported when the
   following transfer command is issued.  Such errors will cause that
   transfer request to be rejected with an error indicating the invalid
   restart attempt.

4.1.5.3.4.    FEAT Response for REST

   Where a server-FTP process supports RESTart in STREAM mode, as
   specified here, it MUST include, in the response to the FEAT command
   [RFC2389], a line containing exactly the string "REST STREAM".  This
   string is not case sensitive, but it SHOULD be transmitted in upper
   case.  Where REST is not supported at all or supported only in block
   or compressed modes, the REST line MUST NOT be included in the FEAT
   response.  Where required, the response SHOULD be:


         C> feat
         S> 211- <any descriptive text>
         S>  ...
         S>  REST STREAM
         S>  ...
         S> 211 end

   The ellipses indicate place holders where other features may be
   included, and are not required.  The one-space indentation of the
   feature lines is mandatory [RFC2389].

4.1.5.3.5.  REST Example

   Assume that the transfer of a largish file has previously been
   interrupted after 802816 octets had been received, that the previous
   transfer was with TYPE=I, and that it has been verified that the file



Bryan                    Expires August 7, 2011                [Page 58]

Internet-Draft           File Transfer Protocol            February 2011


   on the server has not since changed.


         C> TYPE I
         S> 200 Type set to I.
         C> PORT 127,0,0,1,15,107
         S> 200 PORT command successful.
         C> REST 802816
         S> 350 Restarting at 802816. Send STORE or RETRIEVE
         C> RETR cap60.pl198.tar
         S> 150 Opening BINARY mode data connection
         [...]
         S> 226 Transfer complete.


4.1.5.4.  A Trivial Virtual File Store (TVFS)

   Traditionally, FTP has placed almost no constraints upon the file
   store (NVFS) provided by a server.  This specification does not alter
   that.  However, it has become common for servers to attempt to
   provide at least file system naming conventions modeled loosely upon
   those of the UNIX(TM) file system.  This is a tree-structured file
   system, built of directories, each of which can contain other
   directories, or other kinds of files, or both.  Each file and
   directory has a name relative to the directory that contains it,
   except for the directory at the root of the tree, which is contained
   in no other directory, and hence has no name of its own.

   That which has so far been described is perfectly consistent with the
   standard FTP NVFS and access mechanisms.  The "CWD" command is used
   to move from one directory to an embedded directory.  "CDUP" may be
   provided to return to the parent directory, and the various file
   manipulation commands ("RETR", "STOR", the rename commands, etc.) are
   used to manipulate files within the current directory.

   However, it is often useful to be able to reference files other than
   by changing directories, especially as FTP provides no guaranteed
   mechanism to return to a previous directory.  The Trivial Virtual
   File Store (TVFS), if implemented, provides that mechanism.

4.1.5.4.1.  TVFS File Names

   Where a server implements the TVFS, no elementary file name shall
   contain the character "/".  Where the underlying natural file store
   permits files, or directories, to contain the "/" character in their
   names, a server-PI implementing TVFS must encode that character in
   some manner whenever file or directory names are being returned to
   the user-PI, and reverse that encoding whenever such names are being



Bryan                    Expires August 7, 2011                [Page 59]

Internet-Draft           File Transfer Protocol            February 2011


   accepted from the user-PI.

   The encoding method to be used is not specified here.  Where some
   other character is illegal in file and directory names in the
   underlying file store, a simple transliteration may be sufficient.
   Where there is no suitable substitute character a more complex
   encoding scheme, possibly using an escape character, is likely to be
   required.

   With the one exception of the unnamed root directory, a TVFS file
   name may not be empty.  That is, all other file names contain at
   least one character.

   With the sole exception of the "/" character, any valid IS10646
   character [10] may be used in a TVFS file name.  When transmitted,
   file name characters are encoded using the UTF-8 encoding [2].  Note
   that the two-character sequence CR LF occurring in a file name will
   make that name impossible to transmit over a data connection.
   Consequently, it should be avoided, or if that is impossible to
   achieve, it MUST be encoded in some reversible way.

4.1.5.4.2.  TVFS Pathnames

   A TVFS "Pathname" combines the file or directory name of a target
   file or directory, with the directory names of zero or more enclosing
   directories, so as to allow the target file or directory to be
   referenced other than when the server's "current working directory"
   is the directory directly containing the target file or directory.

   By definition, every TVFS file or directory name is also a TVFS
   pathname.  Such a pathname is valid to reference the file from the
   directory containing the name, that is, when that directory is the
   server-FTP's current working directory.

   Other TVFS pathnames are constructed by prefixing a pathname by a
   name of a directory from which the path is valid, and separating the
   two with the "/" character.  Such a pathname is valid to reference
   the file or directory from the directory containing the newly added
   directory name.

   Where a pathname has been extended to the point where the directory
   added is the unnamed root directory, the pathname will begin with the
   "/" character.  Such a path is known as a fully qualified pathname.
   Fully qualified paths may, obviously, not be further extended, as, by
   definition, no directory contains the root directory.  Being unnamed,
   it cannot be represented in any other directory.  A fully qualified
   pathname is valid to reference the named file or directory from any
   location (that is, regardless of what the current working directory



Bryan                    Expires August 7, 2011                [Page 60]

Internet-Draft           File Transfer Protocol            February 2011


   may be) in the virtual file store.

   Any pathname that is not a fully qualified pathname may be referred
   to as a "relative pathname" and will only correctly reference the
   intended file when the current working directory of the server-FTP is
   a directory from which the relative pathname is valid.

   As a special case, the pathname "/" is defined to be a fully
   qualified pathname referring to the root directory.  That is, the
   root directory does not have a directory (or file) name, but does
   have a pathname.  This special pathname may be used only as is as a
   reference to the root directory.  It may not be combined with other
   pathnames using the rules above, as doing so would lead to a pathname
   containing two consecutive "/" characters, which is an undefined
   sequence.

4.1.5.4.2.1.  Notes

   + It is not required, or expected, that there be only one fully
   qualified pathname that will reference any particular file or
   directory.

   + As a caveat, though the TVFS file store is basically tree
   structured, there is no requirement that any file or directory have
   only one parent directory.

   + As defined, no TVFS pathname will ever contain two consecutive "/"
   characters.  Such a name is not illegal however, and may be defined
   by the server for any purpose that suits it.  Clients implementing
   this specification should not assume any semantics for such names.

   + Similarly, other than the special case path that refers to the root
   directory, no TVFS pathname constructed as defined here will ever end
   with the "/" character.  Such names are also not illegal, but are
   undefined.

   + While any legal IS10646 character is permitted to occur in a TVFS
   file or directory name, other than "/", server FTP implementations
   are not required to support all possible IS10646 characters.  The

   subset supported is entirely at the discretion of the server.  The
   case (where it exists) of the characters that make up file,
   directory, and pathnames may be significant.  Unless determined
   otherwise by means unspecified here, clients should assume that all
   such names are comprised of characters whose case is significant.
   Servers are free to treat case (or any other attribute) of a name as
   irrelevant, and hence map two names that appear to be distinct onto
   the same underlying file.



Bryan                    Expires August 7, 2011                [Page 61]

Internet-Draft           File Transfer Protocol            February 2011


   + There are no defined "magic" names, like ".", ".." or "C:".
   Servers may implement such names, with any semantics they choose, but
   are not required to do so.

   + TVFS imposes no particular semantics or properties upon files,
   guarantees no access control schemes, or any of the other common
   properties of a file store.  Only the naming scheme is defined.

4.1.5.4.3.  FEAT Response for TVFS

   In response to the FEAT command [RFC2389] a server that wishes to
   indicate support for the TVFS as defined here will include a line
   that begins with the four characters "TVFS" (in any case, or mixture
   of cases, upper case is not required).  Servers SHOULD send upper
   case.

   Such a response to the FEAT command MUST NOT be returned unless the
   server implements TVFS as defined here.

   Later specifications may add to the TVFS definition.  Such additions
   should be notified by means of additional text appended to the TVFS
   feature line.  Such specifications, if any, will define the extra
   text.

   Until such a specification is defined, servers should not include
   anything after "TVFS" in the TVFS feature line.  Clients, however,
   should be prepared to deal with arbitrary text following the four
   defined characters, and simply ignore it if unrecognized.

   A typical response to the FEAT command issued by a server
   implementing only this specification would be:


         C> feat
         S> 211- <any descriptive text>
         S>  ...
         S>  TVFS
         S>  ...
         S> 211 end

   The ellipses indicate place holders where other features may be
   included, but are not required.  The one-space indentation of the
   feature lines is mandatory [RFC2389] and is not counted as one of the
   first four characters for the purposes of this feature listing.

   The TVFS feature adds no new commands to the FTP command repertoire.





Bryan                    Expires August 7, 2011                [Page 62]

Internet-Draft           File Transfer Protocol            February 2011


4.1.5.4.4.  OPTS for TVFS

   There are no options in this TVFS specification, and hence there is
   no OPTS command defined.

4.1.5.4.5.  TVFS Examples

   Assume a TVFS file store is comprised of a root directory, which
   contains two directories (A and B) and two non-directory files (X and
   Y).  The A directory contains two directories (C and D) and one other
   file (Z).  The B directory contains just two non-directory files (P
   and Q) and the C directory also two non-directory files (also named P
   and Q, by chance).  The D directory is empty, that is, contains no
   files or directories.  This structure may depicted graphically as...


               (unnamed root)
                 /  |  \   \
                /   |   \   \
               A    X    B   Y
              /|\       / \
             / | \     /   \
            C  D  Z   P     Q
           / \
          /   \
         P     Q


   Given this structure, the following fully qualified pathnames exist.


            /
            /A
            /B
            /X
            /Y
            /A/C
            /A/D
            /A/Z
            /A/C/P
            /A/C/Q
            /B/P
            /B/Q

   It is clear that none of the paths / /A /B or /A/D refer to the same
   directory, as the contents of each is different.  Nor do any of / /A
   /A/C or /A/D. However /A/C and /B might be the same directory, there
   is insufficient information given to tell.  Any of the other



Bryan                    Expires August 7, 2011                [Page 63]

Internet-Draft           File Transfer Protocol            February 2011


   pathnames (/X /Y /A/Z /A/C/P /A/C/Q /B/P and /B/Q) may refer to the
   same underlying files, in almost any combination.

   If the current working directory of the server-FTP is /A then the
   following pathnames, in addition to all the fully qualified
   pathnames, are valid


         C
         D
         Z
         C/P
         C/Q

   These all refer to the same files or directories as the corresponding
   fully qualified path with "/A/" prepended.

   That those pathnames all exist does not imply that the TVFS server
   will necessarily grant any kind of access rights to the named paths,
   or that access to the same file via different pathnames will
   necessarily be granted equal rights.

   None of the following relative paths are valid when the current
   directory is /A


         A
         B
         X
         Y
         B/P
         B/Q
         P
         Q

   Any of those could be made valid by changing the server-FTP's current
   working directory to the appropriate directory.  Note that the paths
   "P" and "Q" might refer to different files depending upon which
   directory is selected to cause those to become valid TVFS relative
   paths.

4.1.5.5.  Listings for Machine Processing (MLST and MLSD)

   The MLST and MLSD commands are intended to standardize the file and
   directory information returned by the server-FTP process.  These
   commands differ from the LIST command in that the format of the
   replies is strictly defined although extensible.




Bryan                    Expires August 7, 2011                [Page 64]

Internet-Draft           File Transfer Protocol            February 2011


   Two commands are defined, MLST and MLSD.  MLST provides data about
   exactly the object named on its command line, and no others.  MLSD,
   on the other, lists the contents of a directory if a directory is
   named, otherwise a 501 reply is returned.  In either case, if no
   object is named, the current directory is assumed.  That will cause
   MLST to send a one-line response, describing the current directory
   itself, and MLSD to list the contents of the current directory.

   In the following, the term MLSx will be used wherever either MLST or
   MLSD may be inserted.

   The MLST and MLSD commands also extend the FTP protocol as presented
   in STD 9, [RFC0959] and STD 3, [RFC1123] to allow the transmission of
   8-bit data over the control connection.  Note this is not specifying
   character sets which are 8-bit, but specifying that FTP
   implementations are to specifically allow the transmission and
   reception of 8-bit bytes, with all bits significant, over the control
   connection.  That is, all 256 possible octet values are permitted.
   The MLSx command allows both UTF-8/Unicode and "raw" forms as
   arguments, and in responses both to the MLST and MLSD commands, and
   all other FTP commands which take pathnames as arguments.

4.1.5.5.1.  Format of MLSx Requests

   The MLST and MLSD commands each allow a single optional argument.
   This argument may be either a directory name or, for MLST only, a
   file name.  For these purposes, a "file name" is the name of any
   entity in the server NVFS which is not a directory.  Where TVFS is
   supported, any TVFS relative pathname valid in the current working
   directory, or any TVFS fully qualified pathname, may be given.  If a
   directory name is given then MLSD must return a listing of the
   contents of the named directory, otherwise it issues a 501 reply, and
   does not open a data connection.  In all cases for MLST, a single set
   of fact lines (usually a single fact line) containing the information
   about the named file or directory shall be returned over the control
   connection, without opening a data connection.

   If no argument is given then MLSD must return a listing of the
   contents of the current working directory, and MLST must return a
   listing giving information about the current working directory
   itself.  For these purposes, the contents of a directory are whatever
   file or directory names (not pathnames) the server-PI will allow to
   be referenced when the current working directory is the directory
   named, and which the server-PI desires to reveal to the user-PI.
   Note that omitting the argument is the only defined way to obtain a
   listing of the current directory, unless a pathname that represents
   the directory happens to be known.  In particular, there is no
   defined shorthand name for the current directory.  This does not



Bryan                    Expires August 7, 2011                [Page 65]

Internet-Draft           File Transfer Protocol            February 2011


   prohibit any particular server-PI implementing such a shorthand.

   No title, header, or summary, lines, or any other formatting, other
   than as is specified below, is ever returned in the output of an MLST
   or MLSD command.

   If the Client-FTP sends an invalid argument, the server-FTP MUST
   reply with an error code of 501.

   The syntax for the MLSx command is:


         mlst             = "MLst" [ SP pathname ] CRLF
         mlsd             = "MLsD" [ SP pathname ] CRLF

4.1.5.5.2.  Format of MLSx Response

   The format of a response to an MLSx command is as follows:


         mlst-response    = control-response / error-response
         mlsd-response    = ( initial-response final-response ) /
                            error-response

         control-response = "250-" [ response-message ] CRLF
                            1*( SP entry CRLF )
                            "250" [ SP response-message ] CRLF

         initial-response = "150" [ SP response-message ] CRLF
         final-response   = "226" SP response-message CRLF

         response-message = *TCHAR

         data-response    = *( entry CRLF )

         entry            = [ facts ] SP pathname
         facts            = 1*( fact ";" )
         fact             = factname "=" value
         factname         = "Size" / "Modify" / "Create" /
                            "Type" / "Unique" / "Perm" /
                            "Lang" / "Media-Type" / "CharSet" /
                            os-depend-fact / local-fact
         os-depend-fact   = <IANA assigned OS name> "." token

         local-fact       = "X." token
         value            = *SCHAR

   Upon receipt of an MLSx command, the server will verify the



Bryan                    Expires August 7, 2011                [Page 66]

Internet-Draft           File Transfer Protocol            February 2011


   parameter, and if invalid return an error-response.  For this
   purpose, the parameter should be considered to be invalid if the
   client issuing the command does not have permission to perform the
   requested operation.

   If the parameter is valid, then for an MLST command, the server-PI
   will send the first (leading) line of the control response, the entry
   for the pathname given, or the current directory if no pathname was
   provided, and the terminating line.  Normally exactly one entry would
   be returned, more entries are permitted only when required to
   represent a file that is to have multiple "Type" facts returned.  In
   this case, the pathname component of every response MUST be
   identical.

   Note that for MLST the fact set is preceded by a space.  That is
   provided to guarantee that the fact set cannot be accidentally
   interpreted as the terminating line of the control response, but is
   required even when that would not be possible.  Exactly one space
   exists between the set of facts and the pathname.  Where no facts are
   present, there will be exactly two leading spaces before the
   pathname.  No spaces are permitted in the facts, any other spaces in
   the response are to be treated as being a part of the pathname.

   If the command was an MLSD command, the server will open a data
   connection as indicated in section 3.2 of STD 9, [RFC0959].  If that
   fails, the server will return an error-response.  If all is OK, the
   server will return the initial-response, send the appropriate data-
   response over the new data connection, close that connection, and
   then send the final-response over the control connection.  The
   grammar above defines the format for the data-response, which defines
   the format of the data returned over the data connection established.

   The data connection opened for a MLSD response shall be a connection
   as if the "TYPE L 8", "MODE S", and "STRU F" commands had been given,
   whatever FTP transfer type, mode and structure had actually been set,
   and without causing those settings to be altered for future commands.
   That is, this transfer type shall be set for the duration of the data
   connection established for this command only.  While the content of
   the data sent can be viewed as a series of lines, implementations
   should note that there is no maximum line length defined.
   Implementations should be prepared to deal with arbitrarily long
   lines.

   The facts part of the specification would contain a series of "file
   facts" about the file or directory named on the same line.  Typical
   information to be presented would include file size, last
   modification time, creation time, a unique identifier, and a file/
   directory flag.



Bryan                    Expires August 7, 2011                [Page 67]

Internet-Draft           File Transfer Protocol            February 2011


   The complete format for a successful reply to the MLSD command would
   be:


         facts SP pathname CRLF
         facts SP pathname CRLF
         facts SP pathname CRLF
         ...

   Note that the format is intended for machine processing, not human
   viewing, and as such the format is very rigid.  Implementations MUST
   NOT vary the format by, for example, inserting extra spaces for
   readability, replacing spaces by tabs, including header or title
   lines, or inserting blank lines, or in any other way alter this
   format.  Exactly one space is always required after the set of facts
   (which may be empty).  More spaces may be present on a line if, and
   only if, the pathname presented contains significant spaces.  The set
   of facts must not contain any spaces anywhere inside it.  Facts
   should be provided in each output line only if they both provide
   relevant information about the file named on the same line, and they
   are in the set requested by the user-PI.  See Section 4.1.5.5.9.
   There is no requirement that the same set of facts be provided for
   each file, or that the facts presented occur in the same order for
   each file.

4.1.5.5.2.1.  Error Responses to MLSx commands

   Many of the 4yz and 5yz responses defined in section 4.2 of STD 9,
   [RFC0959] are possible in response to the MLST and MLSD commands.  In
   particular, syntax errors can generate 500 or 501 replies.  Giving a
   pathname that exists but is not a directory as the argument to a MLSD
   command generates a 501 reply.  Giving a name that does not exist, or
   for which access permission (to obtain directory information as
   requested) is not granted will elicit a 550 reply.  Other replies
   (530, 553, 503, 504, and any of the 4yz replies) are also possible in
   appropriate circumstances.

4.1.5.5.3.  File Name Encoding

   An FTP implementation supporting the MLSx commands must be 8-bit
   clean.  This is necessary in order to transmit UTF-8 encoded file
   names.  This specification recommends the use of UTF-8 encoded file
   names.  FTP implementations SHOULD use UTF-8 whenever possible to
   encourage the maximum inter-operability.

   File names are not restricted to UTF-8, however treatment of
   arbitrary character encodings is not specified by this standard.
   Applications are encouraged to treat non-UTF-8 encodings of file



Bryan                    Expires August 7, 2011                [Page 68]

Internet-Draft           File Transfer Protocol            February 2011


   names as octet sequences.

   Note that this encoding is unrelated to that of the contents of the
   file, even if the file contains character data.

   Further information about file name encoding for FTP may be found in
   "Internationalization of the File Transfer Protocol" [RFC2640].

4.1.5.5.3.1.  Notes about the File Name

   The file name returned in the MLST response should be the same name
   as was specified in the MLST command, or, where TVFS is supported, a
   fully qualified TVFS path naming the same file.  Where no argument
   was given to the MLST command, the server-PI may either include an
   empty file name in the response, or it may supply a name that refers
   to the current directory, if such a name is available.  Where TVFS is
   supported, a fully qualified pathname of the current directory SHOULD
   be returned.

   File names returned in the output from an MLSD command SHOULD be
   unqualified names within the directory named, or the current
   directory if no argument was given.  That is, the directory named in
   the MLSD command SHOULD NOT appear as a component of the file names
   returned.

   If the server-FTP process is able, and the "type" fact is being
   returned, it MAY return in the MLSD response, an entry whose type is
   "cdir", which names the directory from which the contents of the
   listing were obtained.  Where TVFS is supported, the name MAY be the
   fully qualified pathname of the directory, or MAY be any other
   pathname that is valid to refer to that directory from the current
   working directory of the server-FTP.  Where more than one name
   exists, multiple of these entries may be returned.  In a sense, the
   "cdir" entry can be viewed as a heading for the MLSD output.
   However, it is not required to be the first entry returned, and may
   occur anywhere within the listing.

   When TVFS is supported, a user-PI can refer to any file or directory
   in the listing by combining a type "cdir" name, with the appropriate
   name from the directory listing using the procedure defined in
   Section 4.1.5.4.2.

   Alternatively, whether TVFS is supported or not, the user-PI can
   issue a CWD command ([RFC0959]) giving a name of type "cdir" from the
   listing returned, and from that point reference the files returned in
   the MLSD response from which the cdir was obtained by using the file
   name components of the listing.




Bryan                    Expires August 7, 2011                [Page 69]

Internet-Draft           File Transfer Protocol            February 2011


4.1.5.5.4.  Format of Facts

   The "facts" for a file in a reply to a MLSx command consist of
   information about that file.  The facts are a series of keyword=value
   pairs each followed by semi-colon (";") characters.  An individual
   fact may not contain a semi-colon in its name or value.  The complete
   series of facts may not contain the space character.  See the
   definition or "RCHAR" in Section 2.1 for a list of the characters
   that can occur in a fact value.  Not all are applicable to all facts.

   A sample of a typical series of facts would be: (spread over two
   lines for presentation here only)

   size=4161;lang=en-US;modify=19970214165800;create=19961001124534;
   type=file;x.myfact=foo,bar;

4.1.5.5.5.  Standard Facts

   This document defines a standard set of facts as follows:


       size       -- Size in octets
       modify     -- Last modification time
       create     -- Creation time
       type       -- Entry type
       unique     -- Unique id of file/directory
       perm       -- File permissions, whether read, write, execute is
                     allowed for the login id.
       lang       -- Language of the file name per IANA [11] registry.
       media-type -- MIME media-type of file contents per IANA registry.
       charset    -- Character set per IANA registry (if not UTF-8)

   Fact names are case-insensitive.  Size, size, SIZE, and SiZe are the
   same fact.

   Further operating system specific keywords could be specified by
   using the IANA operating system name as a prefix (examples only):


         OS/2.ea   -- OS/2 extended attributes
         MACOS.rf  -- MacIntosh resource forks
         UNIX.mode -- Unix file modes (permissions)

   Implementations may define keywords for experimental, or private use.
   All such keywords MUST begin with the two character sequence "x.".
   As type names are case independent, "x." and "X." are equivalent.
   For example:




Bryan                    Expires August 7, 2011                [Page 70]

Internet-Draft           File Transfer Protocol            February 2011


         x.desc -- File description

4.1.5.5.5.1.  The Type Fact

   The type fact needs a special description.  Part of the problem with
   current practices is deciding when a file is a directory.  If it is a
   directory, is it the current directory, a regular directory, or a
   parent directory?  The MLST specification makes this unambiguous
   using the type fact.  The type fact given specifies information about
   the object listed on the same line of the MLST response.

   Five values are possible for the type fact:


         file         -- a file entry
         cdir         -- the listed directory
         pdir         -- a parent directory
         dir          -- a directory or sub-directory
         OS.name=type -- an OS or file system dependent file type

   The syntax is defined to be:


         type-fact       = type-label "=" type-val
         type-label      = "Type"
         type-val        = "File" / "cdir" / "pdir" / "dir" /
                           os-type

   The value of the type fact (the "type-val") is a case independent
   string.

4.1.5.5.5.1.1.  type=file

   The presence of the type=file fact indicates the listed entry is a
   file containing non-system data.  That is, it may be transferred from
   one system to another of quite different characteristics, and perhaps
   still be meaningful.

4.1.5.5.5.1.2.  type=cdir

   The type=cdir fact indicates the listed entry contains a pathname of
   the directory whose contents are listed.  An entry of this type will
   only be returned as a part of the result of an MLSD command when the

   type fact is included, and provides a name for the listed directory,
   and facts about that directory.  In a sense, it can be viewed as
   representing the title of the listing, in a machine friendly format.
   It may appear at any point of the listing, it is not restricted to



Bryan                    Expires August 7, 2011                [Page 71]

Internet-Draft           File Transfer Protocol            February 2011


   appearing at the start, though frequently may do so, and may occur
   multiple times.  It MUST NOT be included if the type fact is not
   included, or there would be no way for the user-PI to distinguish the
   name of the directory from an entry in the directory.

   Where TVFS is supported by the server-FTP, this name may be used to
   construct pathnames with which to refer to the files and directories
   returned in the same MLSD output (see Section 4.1.5.4.2).  These
   pathnames are only expected to work when the server-PI's position in
   the NVFS file tree is the same as its position when the MLSD command
   was issued, unless a fully qualified pathname results.

   Where TVFS is not supported, the only defined semantics associated
   with a "type=cdir" entry are that, provided the current working
   directory of the server-PI has not been changed, a pathname of type
   "cdir" may be used as an argument to a CWD command, which will cause
   the current directory of the server-PI to change so that the
   directory that was listed in its current working directory.

4.1.5.5.5.1.3.  type=dir

   If present, the type=dir entry gives the name of a directory.  Such
   an entry typically cannot be transferred from one system to another
   using RETR, etc., but should (permissions permitting) be able to be
   the object of an MLSD command.

4.1.5.5.5.1.4.  type=pdir

   If present, which will occur only in the response to a MLSD command
   when the type fact is included, the type=pdir entry represents a
   pathname of the parent directory of the listed directory.  As well as
   having the properties of a type=dir, a CWD command that uses the
   pathname from this entry should change the user to a parent directory
   of the listed directory.  If the listed directory is the current
   directory, a CDUP command may also have the effect of changing to the
   named directory.  User-FTP processes should note not all responses
   will include this information, and that some systems may provide
   multiple type=pdir responses.

   Where TVFS is supported, a "type=pdir" name may be a relative
   pathname, or a fully qualified pathname.  A relative pathname will be
   relative to the directory being listed, not to the current directory
   of the server-PI at the time.

   For the purposes of this type value, a "parent directory" is any
   directory in which there is an entry of type=dir that refers to the
   directory in which the type=pdir entity was found.  Thus it is not
   required that all entities with type=pdir refer to the same



Bryan                    Expires August 7, 2011                [Page 72]

Internet-Draft           File Transfer Protocol            February 2011


   directory.  The "unique" fact (if supported and supplied) can be used
   to determine whether there is a relationship between the type=pdir
   entries or not.

4.1.5.5.5.1.5.  System Defined Types

   Files types that are specific to a specific operating system, or file
   system, can be encoded using the "OS." type names.  The format is:


         os-type   = "OS." os-name "=" os-kind
         os-name   = <an IANA registered operating system name>
         os-kind   = token

   The "os-name" indicates the specific system type that supports the
   particular localtype.  OS specific types are registered by the IANA
   using the procedures specified in section 10.  The "os-kind" provides
   the system dependent information as to the type of the file listed.
   The os-name and os-kind strings in an os-type are case independent.
   "OS.unix=block" and "OS.Unix=BLOCK" represent the same type (or
   would, if such a type were registered.)

   Note: Where the underlying system supports a file type that is
   essentially an indirect pointer to another file, the NVFS
   representation of that type should normally be to represent the file
   that the reference indicates.  That is, the underlying basic file
   will appear more than once in the NVFS, each time with the "unique"
   fact (see immediately following section) containing the same value,
   indicating that the same file is represented by all such names.
   User-PIs transferring the file need then transfer it only once, and
   then insert their own form of indirect reference to construct
   alternate names where desired, or perhaps even copy the local file if
   that is the only way to provide two names with the same content.  A
   file which would be a reference to another file, if only the other
   file actually existed, may be represented in any OS dependent manner
   appropriate, or not represented at all.

4.1.5.5.5.1.6.  Multiple Types

   Where a file is such that it may validly, and sensibly, treated by
   the server-PI as being of more than one of the above types, then
   multiple entries should be returned, each with its own "Type" fact of
   the appropriate type, and each containing the same pathname.  This
   may occur, for example, with a structured file, which may contain
   sub-files, and where the server-PI permits the structured file to be

   treated as a unit, or treated as a directory allowing the sub-files
   within it to be referenced.  When this is done, the pathname returned



Bryan                    Expires August 7, 2011                [Page 73]

Internet-Draft           File Transfer Protocol            February 2011


   with each entry MUST be identical to the others representing the same
   file.

4.1.5.5.5.2.  The unique Fact

   The unique fact is used to present a unique identifier for a file or
   directory in the NVFS accessed via a server-FTP process.  The value
   of this fact should be the same for any number of pathnames that
   refer to the same underlying file.  The fact should have different
   values for names that reference distinct files.  The mapping between
   files, and unique fact tokens should be maintained, and remain
   consistent, for at least the lifetime of the control connection from
   user-PI to server-PI.


         unique-fact  = "Unique" "=" token

   This fact would be expected to be used by server-FTPs whose host
   system allows things such as symbolic links so that the same file may
   be represented in more than one directory on the server.  The only
   conclusion that should be drawn is that if two different names each
   have the same value for the unique fact, they refer to the same
   underlying object.  The value of the unique fact (the token) should
   be considered an opaque string for comparison purposes, and is a case
   dependent value.  The tokens "A" and "a" do not represent the same
   underlying object.

4.1.5.5.5.3.  The modify Fact

   The modify fact is used to determine the last time the content of the
   file (or directory) indicated was modified.  Any change of substance
   to the file should cause this value to alter.  That is, if a change
   is made to a file such that the results of a RETR command would
   differ, then the value of the modify fact should alter.  User-PIs
   should not assume that a different modify fact value indicates that
   the file contents are necessarily different than when last retrieved.
   Some systems may alter the value of the modify fact for other
   reasons, though this is discouraged wherever possible.  Also a file
   may alter, and then be returned to its previous content, which would
   often be indicated as two incremental alterations to the value of the
   modify fact.

   For directories, this value should alter whenever a change occurs to
   the directory such that different file names would (or might) be
   included in MLSD output of that directory.


         modify-fact  = "Modify" "=" time-val



Bryan                    Expires August 7, 2011                [Page 74]

Internet-Draft           File Transfer Protocol            February 2011


4.1.5.5.5.4.  The create Fact

   The create fact indicates when a file, or directory, was first
   created.  Exactly what "creation" is for this purpose is not
   specified here, and may vary from server to server.  About all that
   can be said about the value returned is that it can never indicate a
   later time than the modify fact.


         create-fact  = "Create" "=" time-val

   Implementation Note: Implementors of this fact on UNIX(TM) systems
   should note that the unix "stat" "st_ctime" field does not give
   creation time, and that unix file systems do not record creation time
   at all.  Unix (and POSIX) implementations will normally not include
   this fact.

4.1.5.5.5.5.  The perm Fact

   The perm fact is used to indicate access rights the current FTP user
   has over the object listed.  Its value is always an unordered
   sequence of alphabetic characters.


         perm-fact    = "Perm" "=" *pvals
         pvals        = "a" / "c" / "d" / "e" / "f" /
                        "l" / "m" / "p" / "r" / "w"

   There are ten permission indicators currently defined.  Many are
   meaningful only when used with a particular type of object.  The
   indicators are case independent, "d" and "D" are the same indicator.

   The "a" permission applies to objects of type=file, and indicates
   that the APPE (append) command may be applied to the file named.

   The "c" permission applies to objects of type=dir (and type=pdir,
   type=cdir).  It indicates that files may be created in the directory
   named.  That is, that a STOU command is likely to succeed, and that
   STOR and APPE commands might succeed if the file named did not
   previously exist, but is to be created in the directory object that
   has the "c" permission.  It also indicates that the RNTO command is
   likely to succeed for names in the directory.

   The "d" permission applies to all types.  It indicates that the
   object named may be deleted, that is, that the RMD command may be
   applied to it if it is a directory, and otherwise that the DELE
   command may be applied to it.




Bryan                    Expires August 7, 2011                [Page 75]

Internet-Draft           File Transfer Protocol            February 2011


   The "e" permission applies to the directory types.  When set on an
   object of type=dir, type=cdir, or type=pdir it indicates that a CWD
   command naming the object should succeed, and the user should be able
   to enter the directory named.  For type=pdir it also indicates that
   the CDUP command may succeed (if this particular pathname is the one
   to which a CDUP would apply.)

   The "f" permission for objects indicates that the object named may be
   renamed - that is, may be the object of an RNFR command.

   The "l" permission applies to the directory file types, and indicates
   that the listing commands, LIST, NLST, and MLSD may be applied to the
   directory in question.

   The "m" permission applies to directory types, and indicates that the
   MKD command may be used to create a new directory within the
   directory under consideration.

   The "p" permission applies to directory types, and indicates that
   objects in the directory may be deleted, or (stretching naming a
   little) that the directory may be purged.  Note: it does not indicate
   that the RMD command may be used to remove the directory named
   itself, the "d" permission indicator indicates that.

   The "r" permission applies to type=file objects, and for some
   systems, perhaps to other types of objects, and indicates that the
   RETR command may be applied to that object.

   The "w" permission applies to type=file objects, and for some
   systems, perhaps to other types of objects, and indicates that the
   STOR command may be applied to the object named.

   Note: That a permission indicator is set can never imply that the
   appropriate command is guaranteed to work -- just that it might.
   Other system specific limitations, such as limitations on available
   space for storing files, may cause an operation to fail, where the
   permission flags may have indicated that it was likely to succeed.
   The permissions are a guide only.

   Implementation note: The permissions are described here as they apply
   to FTP commands.  They may not map easily into particular permissions
   available on the server's operating system.  Servers are expected to
   synthesize these permission bits from the permission information
   available from operating system.  For example, to correctly determine
   whether the "D" permission bit should be set on a directory for a
   server running on the UNIX(TM) operating system, the server should
   check that the directory named is empty, and that the user has write
   permission on both the directory under consideration, and its parent



Bryan                    Expires August 7, 2011                [Page 76]

Internet-Draft           File Transfer Protocol            February 2011


   directory.

   Some systems may have more specific permissions than those listed
   here, such systems should map those to the flags defined as best they
   are able.  Other systems may have only more broad access controls.
   They will generally have just a few possible permutations of
   permission flags, however they should attempt to correctly represent
   what is permitted.

4.1.5.5.5.6.  The lang Fact

   The lang fact describes the natural language of the file name for use
   in display purposes.  Values used here should be taken from the
   language registry of the IANA.  See [12] for the syntax, and
   procedures, related to language tags.


         lang-fact  = "Lang" "=" token

   Server-FTP implementations MUST NOT guess language values.  Language
   values must be determined in an unambiguous way such as file system
   tagging of language or by user configuration.  Note that the lang
   fact provides no information at all about the content of a file, only
   about the encoding of its name.

4.1.5.5.5.7.  The size Fact

   The size fact applies to non-directory file types and should always
   reflect the approximate size of the file.  This should be as accurate
   as the server can make it, without going to extraordinary lengths,
   such as reading the entire file.  The size is expressed in units of
   octets of data in the file.

   Given limitations in some systems, Client-FTP implementations must
   understand this size may not be precise and may change between the
   time of a MLST and RETR operation.

   Clients that need highly accurate size information for some
   particular reason should use the SIZE command as defined in
   Section 4.1.5.2.  The most common need for this accuracy is likely to
   be in conjunction with the REST command described in Section 4.1.5.3.
   The size fact, on the other hand, should be used for purposes such as
   indicating to a human user the approximate size of the file to be
   transferred, and perhaps to give an idea of expected transfer
   completion time.


         size-fact  = "Size" "=" 1*DIGIT



Bryan                    Expires August 7, 2011                [Page 77]

Internet-Draft           File Transfer Protocol            February 2011


4.1.5.5.5.8.  The media-type Fact

   The media-type fact represents the IANA media type of the file named,
   and applies only to non-directory types.  The list of values used
   must follow the guidelines set by the IANA registry.


         media-type  = "Media-Type" "=" <per IANA guidelines>

   Server-FTP implementations MUST NOT guess media type values.  Media
   type values must be determined in an unambiguous way such as file
   system tagging of media-type or by user configuration.  This fact
   gives information about the content of the file named.  Both the
   primary media type, and any appropriate subtype should be given,
   separated by a slash "/" as is traditional.

4.1.5.5.5.9.  The charset Fact

   The charset fact provides the IANA character set name, or alias, for
   the encoded pathnames in a MLSx response.  The default character set
   is UTF-8 unless specified otherwise.  FTP implementations SHOULD use
   UTF-8 if possible to encourage maximum inter-operability.  The value
   of this fact applies to the pathname only, and provides no
   information about the contents of the file.


         charset-type  = "Charset" "=" token

4.1.5.5.5.10.  Required Facts

   Servers are not required to support any particular set of the
   available facts.  However, servers SHOULD, if conceivably possible,
   support at least the type, perm, size, unique, and modify facts.

4.1.5.5.6.  System Dependent and Local Facts

   By using an system dependent fact, or a local fact, a server-PI may
   communicate to the user-PI information about the file named that is
   peculiar to the underlying file system.

4.1.5.5.6.1.  System Dependent Facts

   System dependent fact names are labeled by prefixing a label
   identifying the specific information returned by the name of the
   appropriate operating system from the IANA maintained list of
   operating system names.

   The value of an OS dependent fact may be whatever is appropriate to



Bryan                    Expires August 7, 2011                [Page 78]

Internet-Draft           File Transfer Protocol            February 2011


   convey the information available.  It must be encoded as a "token" as
   defined in Section 2.1 however.

   In order to allow reliable inter-operation between users of system
   dependent facts, the IANA will maintain a registry of system
   dependent fact names, their syntax, and the interpretation to be
   given to their values.  Registrations of system dependent facts are
   to be accomplished according to the procedures of section 10.

4.1.5.5.6.2.  Local Facts

   Implementations may also make available other facts of their own
   choosing.  As the method of interpretation of such information will
   generally not be widely understood, server-PIs should be aware that
   clients will typically ignore any local facts provided.  As there is
   no registration of locally defined facts, it is entirely possible
   that different servers will use the same local fact name to provide
   vastly different information.  Hence user-PIs should be hesitant
   about making any use of any information in a locally defined fact
   without some other specific assurance that the particular fact is one
   that they do comprehend.

   Local fact names all begin with the sequence "X.".  The rest of the
   name is a "token" (see Section 2.1).  The value of a local fact can
   be anything at all, provided it can be encoded as a "token".

4.1.5.5.7.  MLSx Examples

   The following examples are all taken from dialogues between existing
   FTP clients and servers.  Because of this, not all possible
   variations of possible response formats are shown in the examples.
   This should not be taken as limiting the options of other server
   implementors.  Where the examples show OS dependent information, that
   is to be treated as being purely for the purposes of demonstration of
   some possible OS specific information that could be defined.  As at
   the time of the writing of this document, no OS specific facts or
   file types have been defined, the examples shown here should not be
   treated as in any way to be preferred over other possible similar
   definitions.  Consult the IANA registries to determine what types and
   facts have been defined.  Finally also beware that as the examples
   shown are taken from existing implementations, coded before this
   document was completed, the possibility of variations between the
   text of this document and the examples exists.  In any such case of
   inconsistency, the example is to be treated as incorrect.

   In the examples shown, only relevant commands and responses have been
   included.  This is not to imply that other commands (including
   authentication, directory modification, PORT or PASV commands, or



Bryan                    Expires August 7, 2011                [Page 79]

Internet-Draft           File Transfer Protocol            February 2011


   similar) would not be present in an actual connection, or were not,
   in fact, actually used in the examples before editing.  Note also
   that the formats shown are those that are transmitted between client
   and server, not formats that would normally ever be reported to the
   user of the client.

4.1.5.5.7.1.  Simple MLST


   C> PWD
   S> 257 "/tmp" is current directory.
   C> MLst cap60.pl198.tar.gz
   S> 250- Listing cap60.pl198.tar.gz
   S>  Type=file;Size=1024990;Perm=r; /tmp/cap60.pl198.tar.gz
   S> 250 End

   The client first asked to be told the current directory of the
   server.  This was purely for the purposes of clarity of this example.
   The client then requested facts about a specific file.  The server
   returned the "250-" first control-response line, followed by a single
   line of facts about the file, followed by the terminating "250 "
   line.  The text on the control-response line and the terminating line
   can be anything the server decides to send.  Notice that the fact
   line is indented by a single space.  Notice also that there are no
   spaces in the set of facts returned, until the single space before
   the file name.  The file name returned on the fact line is a fully
   qualified pathname of the file listed.  The facts returned show that
   the line refers to a file, that file contains approximately 1024990
   bytes, though more or less than that may be transferred if the file
   is retrieved, and a different number may be required to store the
   file at the client's file store, and the connected user has
   permission to retrieve the file but not to do anything else
   particularly interesting.

4.1.5.5.7.2.  MLST of a directory


   C> PWD
   S> 257 "/" is current directory.
   C> MLst tmp
   S> 250- Listing tmp
   S>  Type=dir;Modify=19981107085215;Perm=el; /tmp
   S> 250 End

   Again the PWD is just for the purposes of demonstration for the
   example.  The MLST fact line this time shows that the file listed is
   a directory, that it was last modified at 08:52:15 on the 7th of
   November, 1998 UTC, and that the user has permission to enter the



Bryan                    Expires August 7, 2011                [Page 80]

Internet-Draft           File Transfer Protocol            February 2011


   directory, and to list its contents, but not to modify it in any way.
   Again, the fully qualified pathname of the directory listed is given.

4.1.5.5.7.3.  MLSD of a directory


C> MLSD tmp
S> 150 BINARY connection open for MLSD tmp
D> Type=cdir;Modify=19981107085215;Perm=el; tmp
D> Type=cdir;Modify=19981107085215;Perm=el; /tmp
D> Type=pdir;Modify=19990112030508;Perm=el; ..
D> Type=file;Size=25730;Modify=19940728095854;Perm=; capmux.tar.z
D> Type=file;Size=1830;Modify=19940916055648;Perm=r; hatch.c
D> Type=file;Size=25624;Modify=19951003165342;Perm=r; MacIP-02.txt
D> Type=file;Size=2154;Modify=19950501105033;Perm=r; uar.netbsd.patch
D> Type=file;Size=54757;Modify=19951105101754;Perm=r; iptnnladev.1.0.sit.hqx
D> Type=file;Size=226546;Modify=19970515023901;Perm=r; melbcs.tif
D> Type=file;Size=12927;Modify=19961025135602;Perm=r; tardis.1.6.sit.hqx
D> Type=file;Size=17867;Modify=19961025135602;Perm=r; timelord.1.4.sit.hqx
D> Type=file;Size=224907;Modify=19980615100045;Perm=r; uar.1.2.3.sit.hqx
D> Type=file;Size=1024990;Modify=19980130010322;Perm=r; cap60.pl198.tar.gz
S> 226 MLSD completed

   In this example notice that there is no leading space on the fact
   lines returned over the data connection.  Also notice that two lines
   of "type=cdir" have been given.  These show two alternate names for
   the directory listed, one a fully qualified pathname, and the other a
   local name relative to the servers current directory when the MLSD
   was performed.  Note that all other file names in the output are
   relative to the directory listed, though the server could, if it
   chose, give a fully qualified pathname for the "type=pdir" line.
   This server has chosen not to.  The other files listed present a
   fairly boring set of files that are present in the listed directory.
   Note that there is no particular order in which they are listed.
   They are not sorted by file name, by size, or by modify time.  Note
   also that the "perm" fact has an empty value for the file
   "capmux.tar.z" indicating that the connected user has no permissions
   at all for that file.  This server has chosen to present the "cdir"
   and "pdir" lines before the lines showing the content of the
   directory, it is not required to do so.  The "size" fact does not
   provide any meaningful information for a directory, so is not
   included in the fact lines for the directory types shown.

4.1.5.5.7.4.  A More Complex Example







Bryan                    Expires August 7, 2011                [Page 81]

Internet-Draft           File Transfer Protocol            February 2011


   C> MLst test
   S> 250- Listing test
   S>  Type=dir;Perm=el;Unique=keVO1+ZF4 test
   S> 250 End
   C> MLSD test
   S> 150 BINARY connection open for MLSD test
   D> Type=cdir;Perm=el;Unique=keVO1+ZF4; test
   D> Type=pdir;Perm=e;Unique=keVO1+d?3; ..
   D> Type=OS.unix=slink:/foobar;Perm=;Unique=keVO1+4G4; foobar
   D> Type=OS.unix=chr-13/29;Perm=;Unique=keVO1+5G4; device
   D> Type=OS.unix=blk-11/108;Perm=;Unique=keVO1+6G4; block
   D> Type=file;Perm=awr;Unique=keVO1+8G4; writable
   D> Type=dir;Perm=cpmel;Unique=keVO1+7G4; promiscuous
   D> Type=dir;Perm=;Unique=keVO1+1t2; no-exec
   D> Type=file;Perm=r;Unique=keVO1+EG4; two words
   D> Type=file;Perm=r;Unique=keVO1+IH4;  leading space
   D> Type=file;Perm=r;Unique=keVO1+1G4; file1
   D> Type=dir;Perm=cpmel;Unique=keVO1+7G4; incoming
   D> Type=file;Perm=r;Unique=keVO1+1G4; file2
   D> Type=file;Perm=r;Unique=keVO1+1G4; file3
   D> Type=file;Perm=r;Unique=keVO1+1G4; file4
   S> 226 MLSD completed
   C> MLSD test/incoming
   S> 150 BINARY connection open for MLSD test/incoming
   D> Type=cdir;Perm=cpmel;Unique=keVO1+7G4; test/incoming
   D> Type=pdir;Perm=el;Unique=keVO1+ZF4; ..
   D> Type=file;Perm=awdrf;Unique=keVO1+EH4; bar
   D> Type=file;Perm=awdrf;Unique=keVO1+LH4;
   D> Type=file;Perm=rf;Unique=keVO1+1G4; file5
   D> Type=file;Perm=rf;Unique=keVO1+1G4; file6
   D> Type=dir;Perm=cpmdelf;Unique=keVO1+!s2; empty
   S> 226 MLSD completed

   For the purposes of this example the fact set requested has been
   modified to delete the "size" and "modify" facts, and add the
   "unique" fact.  First, facts about a file name have been obtained via
   MLST.  Note that no fully qualified pathname was given this time.
   That was because the server was unable to determine that information.
   Then having determined that the file name represents a directory,
   that directory has been listed.  That listing also shows no fully
   qualified pathname, for the same reason, thus has but a single
   "type=cdir" line.  This directory (which was created especially for
   the purpose) contains several interesting files.  There are some with
   OS dependent file types, several sub-directories, and several
   ordinary files.

   Not much can be said here about the OS dependent file types, as none
   of the information shown there should be treated as any more than



Bryan                    Expires August 7, 2011                [Page 82]

Internet-Draft           File Transfer Protocol            February 2011


   possibilities.  It can be seen that the OS type of the server is
   "unix" though, which is one of the OS types in the IANA registry of
   Operating System names.

   Of the three directories listed, "no-exec" has no permission granted
   to this user to access at all.  From the "Unique" fact values, it can
   be determined that "promiscuous" and "incoming" in fact represent the
   same directory.  Its permissions show that the connected user has
   permission to do essentially anything other than to delete the
   directory.  That directory was later listed.  It happens that the
   directory can not be deleted because it is not empty.

   Of the normal files listed, two contain spaces in their names.  The
   file called " leading space" actually contains two spaces in its
   name, one before the "l" and one between the "g" and the "s".  The
   two spaces that separate the facts from the visible part of the
   pathname make that clear.  The file "writable" has the "a" and "w"
   permission bits set, and consequently the connected user should be
   able to STOR or APPE to that file.

   The other four file names, "file1", "file2", "file3", and "file4" all
   represent the same underlying file, as can be seen from the values of
   the "unique" facts of each.  It happens that "file1" and "file2" are
   Unix "hard" links, and that "file3" and "file4" are "soft" or
   "symbolic" links to the first two.  None of that information is
   available via standard MLST facts, it is sufficient for the purposes
   of FTP to note that all represent the same file, and that the same
   data would be fetched no matter which of them was retrieved, and that
   all would be simultaneously modified were data stored in any.

   Finally, the sub-directory "incoming" is listed.  Since "promiscuous"
   is the same directory there would be no point listing it as well.  In
   that directory, the files "file5" and "file6" represent still more
   names for the "file1" file we have seen before.  Notice the entry
   between that for "bar" and "file5".  Though it is not possible to
   easily represent it in this document, that shows a file with a name
   comprising exactly three spaces (" ").  A client will have no
   difficulty determining that name from the output presented to it
   however.  The directory "empty" is, as its name implies, empty,
   though that is not shown here.  It can, however, be deleted, as can
   file "bar" and the file whose name is three spaces.  All the files
   that reside in this directory can be renamed.  This is a consequence
   of the UNIX semantics of the directory that contains them being
   modifiable.







Bryan                    Expires August 7, 2011                [Page 83]

Internet-Draft           File Transfer Protocol            February 2011


4.1.5.5.7.5.  More Accurate Time Information


   C> MLst file1
   S> 250- Listing file1
   S>  Type=file;Modify=19990929003355.237; file1
   S> 250 End

   In this example, the server-FTP is indicating that "file1" was last
   modified 237 milliseconds after 00:33:55 UTC on the 29th of
   September, 1999.

4.1.5.5.7.6.  A Different Server






































Bryan                    Expires August 7, 2011                [Page 84]

Internet-Draft           File Transfer Protocol            February 2011


C> MLST
S> 250-Begin
S>  type=dir;unique=AQkAAAAAAAABCAAA; /
S> 250 End.
C> MLSD
S> 150 Opening ASCII mode data connection for MLS.
D> type=cdir;unique=AQkAAAAAAAABCAAA; /
D> type=dir;unique=AQkAAAAAAAABEAAA; bin
D> type=dir;unique=AQkAAAAAAAABGAAA; etc
D> type=dir;unique=AQkAAAAAAAAB8AwA; halflife
D> type=dir;unique=AQkAAAAAAAABoAAA; incoming
D> type=dir;unique=AQkAAAAAAAABIAAA; lib
D> type=dir;unique=AQkAAAAAAAABWAEA; linux
D> type=dir;unique=AQkAAAAAAAABKAEA; ncftpd
D> type=dir;unique=AQkAAAAAAAABGAEA; outbox
D> type=dir;unique=AQkAAAAAAAABuAAA; quake2
D> type=dir;unique=AQkAAAAAAAABQAEA; winstuff
S> 226 Listing completed.
C> MLSD linux
S> 150 Opening ASCII mode data connection for MLS.
D> type=cdir;unique=AQkAAAAAAAABWAEA; /linux
D> type=pdir;unique=AQkAAAAAAAABCAAA; /
D> type=dir;unique=AQkAAAAAAAABeAEA; firewall
D> type=file;size=12;unique=AQkAAAAAAAACWAEA; helo_world
D> type=dir;unique=AQkAAAAAAAABYAEA; kernel
D> type=dir;unique=AQkAAAAAAAABmAEA; scripts
D> type=dir;unique=AQkAAAAAAAABkAEA; security
S> 226 Listing completed.
C> MLSD linux/kernel
S> 150 Opening ASCII mode data connection for MLS.
D> type=cdir;unique=AQkAAAAAAAABYAEA; /linux/kernel
D> type=pdir;unique=AQkAAAAAAAABWAEA; /linux
D> type=file;size=6704;unique=AQkAAAAAAAADYAEA; k.config
D> type=file;size=7269221;unique=AQkAAAAAAAACYAEA; linux-2.0.36.tar.gz
D> type=file;size=12514594;unique=AQkAAAAAAAAEYAEA; linux-2.1.130.tar.gz
S> 226 Listing completed.

   Note that this server returns its "unique" fact value in quite a
   different format.  It also returns fully qualified pathnames for the
   "pdir" entry.

4.1.5.5.7.7.  Some IANA Files









Bryan                    Expires August 7, 2011                [Page 85]

Internet-Draft           File Transfer Protocol            February 2011


C> MLSD
S> 150 BINARY connection open for MLSD .
D> Type=cdir;Modify=19990219183438; /iana/assignments
D> Type=pdir;Modify=19990112030453; ..
D> Type=dir;Modify=19990219073522; media-types
D> Type=dir;Modify=19990112033515; character-set-info
D> Type=dir;Modify=19990112033529; languages
D> Type=file;Size=44242;Modify=19990217230400; character-sets
D> Type=file;Size=1947;Modify=19990209215600; operating-system-names
S> 226 MLSD completed
C> MLSD media-types
S> 150 BINARY connection open for MLSD media-types
D> Type=cdir;Modify=19990219073522; media-types
D> Type=cdir;Modify=19990219073522; /iana/assignments/media-types
D> Type=pdir;Modify=19990219183438; ..
D> Type=dir;Modify=19990112033045; text
D> Type=dir;Modify=19990219183442; image
D> Type=dir;Modify=19990112033216; multipart
D> Type=dir;Modify=19990112033254; video
D> Type=file;Size=30249;Modify=19990218032700; media-types
S> 226 MLSD completed
C> MLSD character-set-info
S> 150 BINARY connection open for MLSD character-set-info
D> Type=cdir;Modify=19990112033515; character-set-info
D> Type=cdir;Modify=19990112033515; /iana/assignments/character-set-info
D> Type=pdir;Modify=19990219183438; ..
D> Type=file;Size=1234;Modify=19980903020400; windows-1251
D> Type=file;Size=4557;Modify=19980922001400; tis-620
D> Type=file;Size=801;Modify=19970324130000; ibm775
D> Type=file;Size=552;Modify=19970320130000; ibm866
D> Type=file;Size=922;Modify=19960505140000; windows-1258
S> 226 MLSD completed
C> MLSD languages
S> 150 BINARY connection open for MLSD languages
D> Type=cdir;Modify=19990112033529; languages
D> Type=cdir;Modify=19990112033529; /iana/assignments/languages
D> Type=pdir;Modify=19990219183438; ..
D> Type=file;Size=2391;Modify=19980309130000; default
D> Type=file;Size=943;Modify=19980309130000; tags
D> Type=file;Size=870;Modify=19971026130000; navajo
D> Type=file;Size=699;Modify=19950911140000; no-bok
S> 226 MLSD completed
C> PWD
S> 257 "/iana/assignments" is current directory.

   This example shows some of the IANA maintained files that are
   relevant for this specification in MLSD format.  Note that these
   listings have been edited by deleting many entries, the actual



Bryan                    Expires August 7, 2011                [Page 86]

Internet-Draft           File Transfer Protocol            February 2011


   listings are much longer.

4.1.5.5.7.8.  A Stress Test of Case (In)dependence

   The following example is intended to make clear some cases where case
   dependent strings are permitted in the MLSx commands, and where case
   independent strings are required.

   Note first that the "MLSD" command, shown here as "MlsD" is case
   independent.  Clients may issue this command in any case, or
   combination of cases, they desire.  This is the case for all FTP
   commands.


C> MlsD
S> 150 BINARY connection open for MLSD .
D> Type=pdir;Modify=19990929011228;Perm=el;Unique=keVO1+ZF4; ..
D> Type=file;Size=4096;Modify=19990929011440;Perm=r;Unique=keVO1+Bd8; FILE2
D> Type=file;Size=4096;Modify=19990929011440;Perm=r;Unique=keVO1+aG8; file3
D> Type=file;Size=4096;Modify=19990929011440;Perm=r;Unique=keVO1+ag8; FILE3
D> Type=file;Size=4096;Modify=19990929011440;Perm=r;Unique=keVO1+bD8; file1
D> Type=file;Size=4096;Modify=19990929011440;Perm=r;Unique=keVO1+bD8; file2
D> Type=file;Size=4096;Modify=19990929011440;Perm=r;Unique=keVO1+Ag8; File3
D> Type=file;Size=4096;Modify=19990929011440;Perm=r;Unique=keVO1+bD8; File1
D> Type=file;Size=4096;Modify=19990929011440;Perm=r;Unique=keVO1+Bd8; File2
D> Type=file;Size=4096;Modify=19990929011440;Perm=r;Unique=keVO1+bd8; FILE1
S> 226 MLSD completed

   Next, notice the labels of the facts.  These are also case-
   independent strings; the server-FTP is permitted to return them in
   any case desired.  User-FTP must be prepared to deal with any case,
   though it may do this by mapping the labels to a common case if
   desired.

   Then, notice that there are nine objects of "type" file returned.  In
   a case-independent NVFS these would represent three different file
   names, "file1", "file2", and "file3".  With a case-dependent NVFS all
   nine represent different file names.  Either is possible, server-FTPs
   may implement a case dependent or a case independent NVFS.  User-FTPs
   must allow for case dependent selection of files to manipulate on the
   server.

   Lastly, notice that the value of the "unique" fact is case dependent.
   In the example shown, "file1", "File1", and "file2" all have the same
   "unique" fact value "keVO1+bD8", and thus all represent the same
   underlying file.  On the other hand, "FILE1" has a different "unique"
   fact value ("keVO1+bd8") and hence represents a different file.
   Similarly, "FILE2" and "File2" are two names for the same underlying



Bryan                    Expires August 7, 2011                [Page 87]

Internet-Draft           File Transfer Protocol            February 2011


   file, whereas "file3", "File3" and "FILE3" all represent different
   underlying files.

   That the approximate sizes ("size" fact) and last modification times
   ("modify" fact) are the same in all cases might be no more than a
   coincidence.

   It is not suggested that the operators of server-FTPs create an NVFS
   that stresses the protocols to this extent; however, both user and
   server implementations must be prepared to deal with such extreme
   examples.

4.1.5.5.7.9.  Example from Another Server






































Bryan                    Expires August 7, 2011                [Page 88]

Internet-Draft           File Transfer Protocol            February 2011


   C> MlsD
   S> 150 File Listing Follows in IMAGE / Binary mode.
   D> type=cdir;modify=19990426150227;perm=el; /MISC
   D> type=pdir;modify=19791231130000;perm=el; /
   D> type=dir;modify=19990426150227;perm=el; CVS
   D> type=dir;modify=19990426150228;perm=el; SRC
   S> 226 Transfer finished successfully.
   C> MlsD src
   S> 150 File Listing Follows in IMAGE / Binary mode.
   D> type=cdir;modify=19990426150228;perm=el; /MISC/src
   D> type=pdir;modify=19990426150227;perm=el; /MISC
   D> type=dir;modify=19990426150228;perm=el; CVS
   D> type=dir;modify=19990426150228;perm=el; INSTALL
   D> type=dir;modify=19990426150230;perm=el; INSTALLI
   D> type=dir;modify=19990426150230;perm=el; TREES
   S> 226 Transfer finished successfully.
   C> MlsD src/install
   S> 150 File Listing Follows in IMAGE / Binary mode.
   D> type=cdir;modify=19990426150228;perm=el; /MISC/src/install
   D> type=pdir;modify=19990426150228;perm=el; /MISC/src
   D> type=file;modify=19990406234304;perm=r;size=20059; BOOTPC.C
   D> type=file;modify=19980401170153;perm=r;size=278; BOOTPC.H
   D> type=file;modify=19990413153736;perm=r;size=54220; BOOTPC.O
   D> type=file;modify=19990223044003;perm=r;size=3389; CDROM.C
   D> type=file;modify=19990413153739;perm=r;size=30192; CDROM.O
   D> type=file;modify=19981119155324;perm=r;size=1055; CHANGELO
   D> type=file;modify=19981204171040;perm=r;size=8297; COMMANDS.C
   D> type=file;modify=19980508041749;perm=r;size=580; COMMANDS.H
   D> type=file;modify=19990419052351;perm=r;size=54264; URLMETHO.O
   D> type=file;modify=19980218161629;perm=r;size=993; WINDOWS.C
   D> type=file;modify=19970912154859;perm=r;size=146; WINDOWS.H
   D> type=file;modify=19990413153731;perm=r;size=16812; WINDOWS.O
   D> type=file;modify=19990322174959;perm=r;size=129; _CVSIGNO
   D> type=file;modify=19990413153640;perm=r;size=82536; _DEPEND
   S> 226 Transfer finished successfully.
   C> MLst src/install/windows.c
   S> 250-Listing src/install/windows.c
   S>  type=file;perm=r;size=993; /misc/src/install/windows.c
   S> 250 End
   S> ftp> mlst SRC/INSTALL/WINDOWS.C
   C> MLst SRC/INSTALL/WINDOWS.C
   S> 250-Listing SRC/INSTALL/WINDOWS.C
   S>  type=file;perm=r;size=993; /misc/SRC/INSTALL/WINDOWS.C
   S> 250 End

   Note that this server gives fully qualified pathnames for the "pdir"
   and "cdir" entries in MLSD listings.  Also notice that this server
   does, though it is not required to, sort its directory listing



Bryan                    Expires August 7, 2011                [Page 89]

Internet-Draft           File Transfer Protocol            February 2011


   outputs.  That may be an artifact of the underlying file system
   access mechanisms of course.  Finally notice that the NVFS supported
   by this server, in contrast to the earlier ones, implements its
   pathnames in a case independent manner.  The server seems to return
   files using the case in which they were requested, when the name was
   sent by the client, and otherwise uses an algorithm known only to
   itself to select the case of the names it returns.

4.1.5.5.7.10.  A Server Listing Itself


   C> MLst f
   S> 250-MLST f
   S>  Type=dir;Modify=20000710052229;Unique=AAD/AAAABIA; f
   S> 250 End
   C> CWD f
   S> 250 CWD command successful.
   C> MLSD
   S> 150 Opening ASCII mode data connection for 'MLSD'.
   D> Type=cdir;Unique=AAD/AAAABIA; .
   D> Type=pdir;Unique=AAD/AAAAAAI; ..
   D> Type=file;Size=987;Unique=AAD/AAAABIE; Makefile
   D> Type=file;Size=20148;Unique=AAD/AAAABII; conf.c
   D> Type=file;Size=11111;Unique=AAD/AAAABIM; extern.h
   D> Type=file;Size=38721;Unique=AAD/AAAABIQ; ftpcmd.y
   D> Type=file;Size=17922;Unique=AAD/AAAABIU; ftpd.8
   D> Type=file;Size=60732;Unique=AAD/AAAABIY; ftpd.c
   D> Type=file;Size=3127;Unique=AAD/AAAABIc; logwtmp.c
   D> Type=file;Size=2294;Unique=AAD/AAAABIg; pathnames.h
   D> Type=file;Size=7605;Unique=AAD/AAAABIk; popen.c
   D> Type=file;Size=9951;Unique=AAD/AAAABIo; ftpd.conf.5
   D> Type=file;Size=5023;Unique=AAD/AAAABIs; ftpusers.5
   D> Type=file;Size=3547;Unique=AAD/AAAABIw; logutmp.c
   D> Type=file;Size=2064;Unique=AAD/AAAABI0; version.h
   D> Type=file;Size=20420;Unique=AAD/AAAAAAM; cmds.c
   D> Type=file;Size=15864;Unique=AAD/AAAAAAg; ls.c
   D> Type=file;Size=2898;Unique=AAD/AAAAAAk; ls.h
   D> Type=file;Size=2769;Unique=AAD/AAAAAAo; lsextern.h
   D> Type=file;Size=2042;Unique=AAD/AAAAAAs; stat_flags.h
   D> Type=file;Size=5708;Unique=AAD/AAAAAAw; cmp.c
   D> Type=file;Size=9280;Unique=AAD/AAAAAA0; print.c
   D> Type=file;Size=4657;Unique=AAD/AAAAAA4; stat_flags.c
   D> Type=file;Size=2664;Unique=AAD/AAAAAA8; util.c
   D> Type=file;Size=10383;Unique=AAD/AAAABJ0; ftpd.conf.cat5
   D> Type=file;Size=3631;Unique=AAD/AAAABJ4; ftpusers.cat5
   D> Type=file;Size=17729;Unique=AAD/AAAABJ8; ftpd.cat8
   S> 226 MLSD complete.




Bryan                    Expires August 7, 2011                [Page 90]

Internet-Draft           File Transfer Protocol            February 2011


   This examples shows yet another server implementation, showing a
   listing of its own source code.  Note that this implementation does
   not include the fully qualified path name in its "cdir" and "pdir"
   entries, nor in the output from "MLST".  Also note that the facts
   requested were modified between the "MLST" and "MLSD" commands,
   though that exchange has not been shown here.

4.1.5.5.7.11.  A Server with a Difference


   C> PASV
   S> 227 Entering Passive Mode (127,0,0,1,255,46)
   C> MLSD
   S> 150 I tink I tee a trisector tree
   D> Type=file;Unique=aaaaafUYqaaa;Perm=rf;Size=15741; x
   D> Type=cdir;Unique=aaaaacUYqaaa;Perm=cpmel; /
   D> Type=file;Unique=aaaaajUYqaaa;Perm=rf;Size=5760; x4
   D> Type=dir;Unique=aaabcaUYqaaa;Perm=elf; sub
   D> Type=file;Unique=aaaaagUYqaaa;Perm=rf;Size=8043; x1
   D> Type=dir;Unique=aaab8aUYqaaa;Perm=cpmelf; files
   D> Type=file;Unique=aaaaahUYqaaa;Perm=rf;Size=4983; x2
   D> Type=file;Unique=aaaaaiUYqaaa;Perm=rf;Size=6854; x3
   S> 226 That's all folks...
   C> CWD sub
   S> 250 CWD command successful.
   C> PWD
   S> 257 "/sub" is current directory.
   C> PASV
   S> 227 Entering Passive Mode (127,0,0,1,255,44)
   C> MLSD
   S> 150 I tink I tee a trisector tree
   D> Type=dir;Unique=aaabceUYqaaa;Perm=elf; dir
   D> Type=file;Unique=aaabcbUYqaaa;Perm=rf;Size=0; y1
   D> Type=file;Unique=aaabccUYqaaa;Perm=rf;Size=0; y2
   D> Type=file;Unique=aaabcdUYqaaa;Perm=rf;Size=0; y3
   D> Type=pdir;Unique=aaaaacUYqaaa;Perm=cpmel; /
   D> Type=pdir;Unique=aaaaacUYqaaa;Perm=cpmel; ..
   D> Type=cdir;Unique=aaabcaUYqaaa;Perm=el; /sub
   S> 226 That's all folks...
   C> PASV
   S> 227 Entering Passive Mode (127,0,0,1,255,42)
   C> MLSD dir
   S> 150 I tink I tee a trisector tree
   D> Type=pdir;Unique=aaabcaUYqaaa;Perm=el; /sub
   D> Type=pdir;Unique=aaabcaUYqaaa;Perm=el; ..
   D> Type=file;Unique=aaab8cUYqaaa;Perm=r;Size=15039; mlst.c
   D> Type=dir;Unique=aaabcfUYqaaa;Perm=el; ect
   D> Type=cdir;Unique=aaabceUYqaaa;Perm=el; dir



Bryan                    Expires August 7, 2011                [Page 91]

Internet-Draft           File Transfer Protocol            February 2011


   D> Type=cdir;Unique=aaabceUYqaaa;Perm=el; /sub/dir
   D> Type=dir;Unique=aaabchUYqaaa;Perm=el; misc
   D> Type=file;Unique=aaab8bUYqaaa;Perm=r;Size=34589; ftpd.c
   S> 226 That's all folks...
   C> CWD dir/ect
   S> 250 CWD command successful.
   C> PWD
   S> 257 "/sub/dir/ect" is current directory.
   C> PASV
   S> 227 Entering Passive Mode (127,0,0,1,255,40)
   C> MLSD
   S> 150 I tink I tee a trisector tree
   D> Type=dir;Unique=aaabcgUYqaaa;Perm=el; ory
   D> Type=pdir;Unique=aaabceUYqaaa;Perm=el; /sub/dir
   D> Type=pdir;Unique=aaabceUYqaaa;Perm=el; ..
   D> Type=cdir;Unique=aaabcfUYqaaa;Perm=el; /sub/dir/ect
   S> 226 That's all folks...
   C> CWD /files
   S> 250 CWD command successful.
   C> PASV
   S> 227 Entering Passive Mode (127,0,0,1,255,36)
   C> MLSD
   S> 150 I tink I tee a trisector tree
   D> Type=cdir;Unique=aaab8aUYqaaa;Perm=cpmel; /files
   D> Type=pdir;Unique=aaaaacUYqaaa;Perm=cpmel; /
   D> Type=pdir;Unique=aaaaacUYqaaa;Perm=cpmel; ..
   D> Type=file;Unique=aaab8cUYqaaa;Perm=rf;Size=15039; mlst.c
   D> Type=file;Unique=aaab8bUYqaaa;Perm=rf;Size=34589; ftpd.c
   S> 226 That's all folks...
   C> RNFR mlst.c
   S> 350 File exists, ready for destination name
   C> RNTO list.c
   S> 250 RNTO command successful.
   C> PASV
   S> 227 Entering Passive Mode (127,0,0,1,255,34)
   C> MLSD
   S> 150 I tink I tee a trisector tree
   D> Type=file;Unique=aaab8cUYqaaa;Perm=rf;Size=15039; list.c
   D> Type=pdir;Unique=aaaaacUYqaaa;Perm=cpmel; /
   D> Type=pdir;Unique=aaaaacUYqaaa;Perm=cpmel; ..
   D> Type=file;Unique=aaab8bUYqaaa;Perm=rf;Size=34589; ftpd.c
   D> Type=cdir;Unique=aaab8aUYqaaa;Perm=cpmel; /files
   S> 226 That's all folks...


   The server shown here returns its directory listings in seemingly
   random order, and even seems to modify the order of the directory as
   its contents change -- perhaps the underlying directory structure is



Bryan                    Expires August 7, 2011                [Page 92]

Internet-Draft           File Transfer Protocol            February 2011


   based upon hashing of some kind.  Note that the "pdir" and "cdir"
   entries are interspersed with other entries in the directory.  Note
   also that this server does not show a "pdir" entry when listing the
   contents of the root directory of the virtual filestore; however, it
   does however include multiple "cdir" and "pdir" entries when it feels
   inclined.  The server also uses obnoxiously "cute" messages.

4.1.5.5.8.  FEAT Response for MLSx

   When responding to the FEAT command, a server-FTP process that
   supports MLST, and MLSD, plus internationalization of pathnames, MUST
   indicate that this support exists.  It does this by including a MLST
   feature line.  As well as indicating the basic support, the MLST
   feature line indicates which MLST facts are available from the
   server, and which of those will be returned if no subsequent "OPTS
   MLST" command is sent.


         mlst-feat     = SP "MLST" [SP factlist] CRLF
         factlist      = 1*( factname ["*"] ";" )

   The initial space shown in the mlst-feat response is that required by
   the FEAT command, two spaces are not permitted.  If no factlist is
   given, then the server-FTP process is indicating that it supports
   MLST, but implements no facts.  Only pathnames can be returned.  This
   would be a minimal MLST implementation, and useless for most
   practical purposes.  Where the factlist is present, the factnames
   included indicate the facts supported by the server.  Where the
   optional asterisk appears after a factname, that fact will be
   included in MLST format responses, until an "OPTS MLST" is given to
   alter the list of facts returned.  After that, subsequent FEAT
   commands will return the asterisk to show the facts selected by the
   most recent "OPTS MLST".

   Note that there is no distinct FEAT output for MLSD.  The presence of
   the MLST feature indicates that both MLST and MLSD are supported.

4.1.5.5.8.1.  Examples


C> Feat
S> 211- Features supported
S>  REST STREAM
S>  MDTM
S>  SIZE
S>  TVFS
S>  UTF8
S>  MLST Type*;Size*;Modify*;Perm*;Unique*;UNIX.mode;UNIX.chgd;X.hidden;



Bryan                    Expires August 7, 2011                [Page 93]

Internet-Draft           File Transfer Protocol            February 2011


S> 211 End

   Aside from some features irrelevant here, this server indicates that
   it supports MLST including several, but not all, standard facts, all
   of which it will send by default.  It also supports two OS dependent
   facts, and one locally defined fact.  The latter three must be
   requested expressly by the client for this server to supply them.


   C> Feat
   S> 211-Extensions supported:
   S>  CLNT
   S>  MDTM
   S>  MLST type*;size*;modify*;UNIX.mode*;UNIX.owner;UNIX.group;unique;
   S>  PASV
   S>  REST STREAM
   S>  SIZE
   S>  TVFS
   S>  Compliance Level: 19981201 (IETF mlst-05)
   S> 211 End.

   Again, in addition to some irrelevant features here, this server
   indicates that it supports MLST, four of the standard facts, one of
   which ("unique") is not enabled by default, and several OS dependent
   facts, one of which is provided by the server by default.  This
   server actually supported more OS dependent facts.  Others were
   deleted for the purposes of this document to comply with document
   formatting restrictions.


   C> FEAT
   S> 211-Features supported
   S>  MDTM
   S>  MLST Type*;Size*;Modify*;Perm;Unique*;
   S>  REST STREAM
   S>  SIZE
   S>  TVFS
   S> 211 End

   This server has wisely chosen not to implement any OS dependent
   facts.  At the time of writing this document, no such facts have been
   defined (using the mechanisms of section 10.1) so rational support
   for them would be difficult at best.  All but one of the facts
   supported by this server are enabled by default.







Bryan                    Expires August 7, 2011                [Page 94]

Internet-Draft           File Transfer Protocol            February 2011


4.1.5.5.9.  OPTS Parameters for MLST

   For the MLSx commands, the Client-FTP may specify a list of facts it
   wishes to be returned in all subsequent MLSx commands until another
   OPTS MLST command is sent.  The format is specified by:


         mlst-opts     = "OPTS" SP "MLST"
                         [ SP 1*( factname ";" ) ]

   By sending the "OPTS MLST" command, the client requests the server to
   include only the facts listed as arguments to the command in
   subsequent output from MLSx commands.  Facts not included in the
   "OPTS MLST" command MUST NOT be returned by the server.  Facts that
   are included should be returned for each entry returned from the MLSx
   command where they meaningfully apply.  Facts requested that are not
   supported, or that are inappropriate to the file or directory being
   listed should simply be omitted from the MLSx output.  This is not an
   error.  Note that where no factname arguments are present, the client
   is requesting that only the file names be returned.  In this case,
   and in any other case where no facts are included in the result, the
   space that separates the fact names and their values from the file
   name is still required.  That is, the first character of the output
   line will be a space, (or two characters will be spaces when the line
   is returned over the control connection) and the file name will start
   immediately thereafter.

   Clients should note that generating values for some facts can be
   possible, but very expensive, for some servers.  It is generally
   acceptable to retrieve any of the facts that the server offers as its
   default set before any "OPTS MLST" command has been given, however
   clients should use particular caution before requesting any facts not
   in that set.  That is, while other facts may be available from the
   server, clients should refrain from requesting such facts unless
   there is a particular operational requirement for that particular
   information, which ought be more significant than perhaps simply
   improving the information displayed to an end user.

   Note, there is no "OPTS MLSD" command, the fact names set with the
   "OPTS MLST" command apply to both MLST and MLSD commands.

   Servers are not required to accept "OPTS MLST" commands before
   authentication of the user-PI, but may choose to permit them.

4.1.5.5.9.1.  OPTS MLST Response

   The "response-message" from [RFC2389] to a successful OPTS MLST
   command has the following syntax.



Bryan                    Expires August 7, 2011                [Page 95]

Internet-Draft           File Transfer Protocol            February 2011


         mlst-opt-resp = "MLST OPTS" [ SP 1*( factname ";" ) ]

   This defines the "response-message" as used in the "opts-good"
   message in [RFC2389].

   The facts named in the response are those that the server will now
   include in MLST (and MLSD) response, after the processing of the
   "OPTS MLST" command.  Any facts from the request not supported by the
   server will be omitted from this response message.  If no facts will
   be included, the list of facts will be empty.  Note that the list of
   facts returned will be the same as those marked by a trailing
   asterisk ("*") in a subsequent FEAT command response.  There is no
   requirement that the order of the facts returned be the same as that
   in which they were requested, or that in which they will be listed in
   a FEAT command response, or that in which facts are returned in MLST
   responses.  The fixed string "MLST OPTS" in the response may be
   returned in any case, or mixture of cases.

4.1.5.5.9.2.  Examples


  C> Feat
  S> 211- Features supported
  S>  MLST Type*;Size;Modify*;Perm;Unique;UNIX.mode;UNIX.chgd;X.hidden;
  S> 211 End
  C> OptS Mlst Type;UNIX.mode;Perm;
  S> 200 MLST OPTS Type;Perm;UNIX.mode;
  C> Feat
  S> 211- Features supported
  S>  MLST Type*;Size;Modify;Perm*;Unique;UNIX.mode*;UNIX.chgd;X.hidden;
  S> 211 End
  C> opts MLst lang;type;charset;create;
  S> 200 MLST OPTS Type;
  C> Feat
  S> 211- Features supported
  S>  MLST Type*;Size;Modify;Perm;Unique;UNIX.mode;UNIX.chgd;X.hidden;
  S> 211 End
  C> OPTS mlst size;frogs;
  S> 200 MLST OPTS Size;
  C> Feat
  S> 211- Features supported
  S>  MLST Type;Size*;Modify;Perm;Unique;UNIX.mode;UNIX.chgd;X.hidden;
  S> 211 End
  C> opts MLst unique type;
  S> 501 Invalid MLST options
  C> Feat
  S> 211- Features supported
  S>  MLST Type;Size*;Modify;Perm;Unique;UNIX.mode;UNIX.chgd;X.hidden;



Bryan                    Expires August 7, 2011                [Page 96]

Internet-Draft           File Transfer Protocol            February 2011


  S> 211 End

   For the purposes of this example, features other than MLST have been
   deleted from the output to avoid clutter.  The example shows the
   initial default feature output for MLST.  The facts requested are
   then changed by the client.  The first change shows facts that are
   available from the server being selected.  Subsequent FEAT output
   shows the altered features as being returned.  The client then
   attempts to select some standard features that the server does not
   support.  This is not an error, however the server simply ignores the
   requests for unsupported features, as the FEAT output that follows
   shows.  Then, the client attempts to request a non-standard, and
   unsupported, feature.  The server ignores that, and selects only the
   supported features requested.  Lastly, the client sends a request
   containing a syntax error (spaces cannot appear in the factlist.)
   The server-FTP sends an error response and completely ignores the
   request, leaving the fact set selected as it had been previously.

   Note that in all cases, except the error response, the response lists
   the facts that have been selected.































Bryan                    Expires August 7, 2011                [Page 97]

Internet-Draft           File Transfer Protocol            February 2011


C> Feat
S> 211- Features supported
S>  MLST Type*;Size*;Modify*;Perm*;Unique*;UNIX.mode;UNIX.chgd;X.hidden;
S> 211 End
C> Opts MLST
S> 200 MLST OPTS
C> Feat
S> 211- Features supported
S>  MLST Type;Size;Modify;Perm;Unique;UNIX.mode;UNIX.chgd;X.hidden;
S> 211 End
C> MLst tmp
S> 250- Listing tmp
S>   /tmp
S> 250 End
C> OPTS mlst unique;size;
S> 200 MLST OPTS Size;Unique;
C>  MLst tmp
S> 250- Listing tmp
S>  Unique=keVO1+YZ5; /tmp
S> 250 End
C> OPTS mlst unique;type;modify;
S> 200 MLST OPTS Type;Modify;Unique;
C> MLst tmp
S> 250- Listing tmp
S>  Type=dir;Modify=19990930152225;Unique=keVO1+YZ5; /tmp
S> 250 End
C> OPTS mlst fish;cakes;
S> 200 MLST OPTS
C> MLst tmp
S> 250- Listing tmp
S>   /tmp
S> 250 End
C> OptS Mlst Modify;Unique;
S> 200 MLST OPTS Modify;Unique;
C> MLst tmp
S> 250- Listing tmp
S>  Modify=19990930152225;Unique=keVO1+YZ5; /tmp
S> 250 End
C> opts MLst fish cakes;
S> 501 Invalid MLST options
C> MLst tmp
S> 250- Listing tmp
S>  Modify=19990930152225;Unique=keVO1+YZ5; /tmp
S> 250 End

   This example shows the effect of changing the facts requested upon
   subsequent MLST commands.  Notice that a syntax error leaves the set
   of selected facts unchanged.  Also notice exactly two spaces



Bryan                    Expires August 7, 2011                [Page 98]

Internet-Draft           File Transfer Protocol            February 2011


   preceding the pathname when no facts were selected, either
   deliberately, or because none of the facts requested were available.

4.1.5.6.  Impact on Other FTP Commands

   Along with the introduction of MLST, traditional FTP commands must be
   extended to allow for the use of more than US-ASCII [1] or EBCDIC
   character sets.  In general, the support of MLST requires support for
   arbitrary character sets wherever file names and directory names are
   allowed.  This applies equally to both arguments given to the
   following commands and to the replies from them, as appropriate.


         APPE                                RMD
         CWD                                 RNFR
         DELE                                RNTO
         MKD                                 STAT
         PWD                                 STOR
         RETR                                STOU

   The arguments to all of these commands should be processed the same
   way that MLST commands and responses are processed with respect to
   handling embedded spaces, CRs and NULs.  See Section 2.2.

4.1.5.7.  Character Sets and Internationalization

   FTP commands are protocol elements, and are always expressed in
   ASCII.  FTP responses are composed of the numeric code, which is a
   protocol element, and a message, which is often expected to convey
   information to the user.  It is not expected that users normally
   interact directly with the protocol elements, rather the user-FTP
   process constructs the commands, and interprets the results, in the
   manner best suited for the particular user.  Explanatory text in
   responses generally has no particular meaning to the protocol.  The
   numeric codes provide all necessary information.  Server-PIs are free
   to provide the text in any language that can be adequately
   represented in ASCII, or where an alternative language and
   representation has been negotiated (see [RFC2640]) in that language
   and representation.

   Pathnames are expected to be encoded in UTF-8 allowing essentially
   any character to be represented in a pathname.  Meaningful pathnames
   are defined by the server NVFS.

   No restrictions at all are placed upon the contents of files
   transferred using the FTP protocols.  Unless the "media-type" fact is
   provided in a MLSx response no advice is given here that would allow
   determining the content type.  That information is assumed to be



Bryan                    Expires August 7, 2011                [Page 99]

Internet-Draft           File Transfer Protocol            February 2011


   obtained via other means.

4.1.6.  Other Extensions

      [RFC2228] describes OPTIONAL extensions: AUTH, ADAT, PROT, PBSZ,
      CCC, MIC, CONF, ENC.

      [RFC2640] describes OPTIONAL extension: LANG.

   A User-FTP program MUST implement a "QUOTE" command that will pass an
   arbitrary character string to the server and display all resulting
   response messages to the user.

   To make the "QUOTE" command useful, a User-FTP SHOULD send transfer
   control commands to the server as the user enters them, rather than
   saving all the commands and sending them to the server only when a
   data transfer is started.

4.1.7.  Non-standard Command Verbs

   FTP allows "experimental" commands, whose names begin with "X".  If
   these commands are subsequently adopted as standards, there may still
   be existing implementations using the "X" form.  At present, this is
   true for the directory commands:

                   RFC 959   "Experimental"

                     MKD        XMKD
                     RMD        XRMD
                     PWD        XPWD
                     CDUP       XCUP
                     CWD        XCWD

   All FTP implementations SHOULD recognize both forms of these
   commands, by simply equating them with extra entries in the command
   lookup table.

4.2.  FTP Replies

   Replies to File Transfer Protocol commands are devised to ensure the
   synchronization of requests and actions in the process of file
   transfer, and to guarantee that the user process always knows the
   state of the Server.  Every command MUST generate at least one reply,
   although there MAY be more than one; in the latter case, the multiple
   replies MUST be easily distinguished.  In addition, some commands
   occur in sequential groups, such as USER, PASS and ACCT, or RNFR and
   RNTO.  The replies show the existence of an intermediate state if all
   preceding commands have been successful.  A failure at any point in



Bryan                    Expires August 7, 2011               [Page 100]

Internet-Draft           File Transfer Protocol            February 2011


   the sequence necessitates the repetition of the entire sequence from
   the beginning.

      The details of the command-reply sequence are made explicit in a
      set of state diagrams below.

   An FTP reply consists of a three digit number (transmitted as three
   alphanumeric characters) followed by some text.  The number is
   intended for use by automata to determine what state to enter next;
   the text is intended for the human user.  It is intended that the
   three digits contain enough encoded information that the user-process
   (the User-PI) will not need to examine the text and MAY either
   discard it or pass it on to the user, as appropriate.  In particular,
   the text MAY be server-dependent, so there are likely to be varying
   texts for each reply code.

   A reply is defined to contain the 3-digit code, followed by Space
   <SP>, followed by one line of text (where some maximum line length
   has been specified), and terminated by the Telnet end-of-line code.
   There will be cases however, where the text is longer than a single
   line.  In these cases the complete text must be bracketed so the
   User-process knows when it MAY stop reading the reply (i.e. stop
   processing input on the control connection) and go do other things.
   This requires a special format on the first line to indicate that
   more than one line is coming, and another on the last line to
   designate it as the last.  At least one of these must contain the
   appropriate reply code to indicate the state of the transaction.  To
   satisfy all factions, it was decided that both the first and last
   line codes should be the same.

   Thus the format for multi-line replies is that the first line will
   begin with the exact required reply code, followed immediately by a
   Hyphen, "-" (also known as Minus), followed by text.  The last line
   will begin with the same code, followed immediately by Space <SP>,
   optionally some text, and the Telnet end-of-line code.



               For example:
                                   123-First line
                                   Second line
                                     234 A line beginning with numbers
                                   123 The last line

   The user-process then simply needs to search for the second
   occurrence of the same reply code, followed by <SP> (Space), at the
   beginning of a line, and ignore all intermediary lines.  If an
   intermediary line begins with a 3-digit number, the Server must pad



Bryan                    Expires August 7, 2011               [Page 101]

Internet-Draft           File Transfer Protocol            February 2011


   the front to avoid confusion.

   This scheme allows standard system routines to be used for reply
   information (such as for the STAT reply), with "artificial" first and
   last lines tacked on.  In rare cases where these routines are able to
   generate three digits and a Space at the beginning of any line, the
   beginning of each text line should be offset by some neutral text,
   like Space.

   This scheme assumes that multi-line replies may not be nested.

   A Server-FTP MUST send only correctly formatted replies on the
   control connection.  Note that [RFC0959] (unlike earlier versions of
   the FTP specification) contains no provision for a "spontaneous"
   reply message.

   A Server-FTP SHOULD use the reply codes defined here whenever they
   apply.  However, a server-FTP MAY use a different reply code when
   needed, as long as the general rules of this section are followed.
   When the implementor has a choice between a 4xx and 5xx reply code, a
   Server-FTP SHOULD send a 4xx (temporary failure) code when there is
   any reasonable possibility that a failed FTP will succeed a few hours
   later.

   A User-FTP SHOULD generally use only the highest-order digit of a
   3-digit reply code for making a procedural decision, to prevent
   difficulties when a Server-FTP uses non-standard reply codes.

   A User-FTP MUST be able to handle multi-line replies.  If the
   implementation imposes a limit on the number of lines and if this
   limit is exceeded, the User-FTP MUST recover, e.g., by ignoring the
   excess lines until the end of the multi-line reply is reached.

   A User-FTP SHOULD NOT interpret a 421 reply code ("Service not
   available, closing control connection") specially, but SHOULD detect
   closing of the control connection by the server.

   A User-FTP SHOULD display to the user the full text of all error
   reply messages it receives.  It SHOULD have a "verbose" mode in which
   all commands it sends and the full text and reply codes it receives
   are displayed, for diagnosis of problems.

   The state machine in a User-FTP SHOULD be forgiving of missing and
   unexpected reply messages, in order to maintain command
   synchronization with the server.

   The three digits of the reply each have a special significance.  This
   is intended to allow a range of very simple to very sophisticated



Bryan                    Expires August 7, 2011               [Page 102]

Internet-Draft           File Transfer Protocol            February 2011


   responses by the user-process.  The first digit denotes whether the
   response is good, bad or incomplete.  (Referring to the state
   diagram), an unsophisticated user-process will be able to determine
   its next action (proceed as planned, redo, retrench, etc.) by simply
   examining this first digit.  A user-process that wants to know
   approximately what kind of error occurred (e.g. file system error,
   command syntax error) MAY examine the second digit, reserving the
   third digit for the finest gradation of information (e.g., RNTO
   command without a preceding RNFR).


         There are five values for the first digit of the reply code:

            1yz   Positive Preliminary reply

               The requested action is being initiated; expect another
               reply before proceeding with a new command.  (The
               user-process sending another command before the
               completion reply would be in violation of protocol; but
               server-FTP processes should queue any commands that
               arrive while a preceding command is in progress.)  This
               type of reply can be used to indicate that the command
               was accepted and the user-process may now pay attention
               to the data connections, for implementations where
               simultaneous monitoring is difficult.  The server-FTP
               process MAY send at most, one 1yz reply per command.

            2yz   Positive Completion reply

                The requested action has been successfully completed.  A
                new request may be initiated.

            3yz   Positive Intermediate reply

               The command has been accepted, but the requested action
               is being held in abeyance, pending receipt of further
               information.  The user should send another command
               specifying this information.  This reply is used in
               command sequence groups.

            4yz   Transient Negative Completion reply

               The command was not accepted and the requested action did
               not take place, but the error condition is temporary and
               the action MAY be requested again.  The user should
               return to the beginning of the command sequence, if any.
               It is difficult to assign a meaning to "transient",
               particularly when two distinct sites (Server- and



Bryan                    Expires August 7, 2011               [Page 103]

Internet-Draft           File Transfer Protocol            February 2011


               User-processes) have to agree on the interpretation.
               Each reply in the 4yz category might have a slightly
               different time value, but the intent is that the
               user-process is encouraged to try again.  A rule of thumb
               in determining if a reply fits into the 4yz or the 5yz
               (Permanent Negative) category is that replies are 4yz if
               the commands can be repeated without any change in
               command form or in properties of the User or Server
               (e.g., the command is spelled the same with the same
               arguments used; the user does not change his file access
               or user name; the server does not put up a new
               implementation.)

            5yz   Permanent Negative Completion reply

               The command was not accepted and the requested action did
               not take place.  The User-process is discouraged from
               repeating the exact request (in the same sequence).  Even
               some "permanent" error conditions can be corrected, so
               the human user may want to direct his User-process to
               reinitiate the command sequence by direct action at some
               point in the future (e.g., after the spelling has been
               changed, or the user has altered his directory status.)

   The following function groupings are encoded in the second digit:


            x0z   Syntax - These replies refer to syntax errors,
                  syntactically correct commands that don't fit any
                  functional category, unimplemented or superfluous
                  commands.

            x1z   Information -  These are replies to requests for
                  information, such as status or help.

            x2z   Connections - Replies referring to the control and
                  data connections.

            x3z   Authentication and accounting - Replies for the login
                  process and accounting procedures.

            x4z   Unspecified as yet.

            x5z   File system - These replies indicate the status of the
                  Server file system vis-a-vis the requested transfer or
                  other file system action.

   The third digit gives a finer gradation of meaning in each of the



Bryan                    Expires August 7, 2011               [Page 104]

Internet-Draft           File Transfer Protocol            February 2011


   function categories, specified by the second digit.  The list of
   replies below will illustrate this.  Note that the text associated
   with each reply is recommended, rather than mandatory, and MAY even
   change according to the command with which it is associated.  The
   reply codes, on the other hand, MUST strictly follow the
   specifications in the last section; that is, Server implementations
   SHOULD NOT invent new codes for situations that are only slightly
   different from the ones described here, but rather SHOULD adapt codes
   already defined.

      A command such as TYPE or ALLO whose successful execution does not
      offer the user-process any new information will cause a 200 reply
      to be returned.  If the command is not implemented by a particular
      Server-FTP process because it has no relevance to that computer
      system, for example ALLO at a TOPS20 site, a Positive Completion
      reply is still desired so that the simple User-process knows it
      can proceed with its course of action.  A 202 reply is used in
      this case with, for example, the reply text: "No storage
      allocation necessary."  If, on the other hand, the command
      requests a non-site-specific action and is unimplemented, the
      response is 502.  A refinement of that is the 504 reply for a
      command that is implemented, but that requests an unimplemented
      parameter.

4.2.1.  Protected Replies from RFC 2228


         6yz   Protected reply

            There are three reply codes of this type.  The first, reply
            code 631 indicates an integrity protected reply.  The
            second, reply code 632, indicates a confidentiality and
            integrity protected reply.  the third, reply code 633,
            indicates a confidentiality protected reply.

            The text part of a 631 reply is a Telnet string consisting
            of a base 64 encoded "safe" message produced by a security
            mechanism specific message integrity procedure.  The text
            part of a 632 reply is a Telnet string consisting of a base
            64 encoded "private" message produced by a security
            mechanism specific message confidentiality and integrity
            procedure.  The text part of a 633 reply is a Telnet string
            consisting of a base 64 encoded "confidential" message
            produced by a security mechanism specific message
            confidentiality procedure.

            The client will decode and verify the encoded reply.  How
            failures decoding or verifying replies are handled is



Bryan                    Expires August 7, 2011               [Page 105]

Internet-Draft           File Transfer Protocol            February 2011


            implementation-specific.  An end-of-line code need not be
            included, but if one is included, it must be a Telnet end-
            of-line code, not a local end-of-line code.

            A protected reply may only be sent if a security data
            exchange has succeeded.

            The 63z reply may be a multiline reply.  In this case, the
            plaintext reply must be broken up into a number of
            fragments.  Each fragment must be protected, then base 64
            encoded in order into a separate line of the multiline
            reply.  There need not be any correspondence between the
            line breaks in the plaintext reply and the encoded reply.
            Telnet end-of-line codes must appear in the plaintext of the
            encoded reply, except for the final end-of-line code, which
            is optional.

            The multiline reply must be formatted more strictly than the
            continuation specification in RFC0959.  In particular, each
            line before the last must be formed by the reply code,
            followed immediately by a hyphen, followed by a base 64
            encoded fragment of the reply.

            For example, if the plaintext reply is

               123-First line
               Second line
                 234 A line beginning with numbers
               123 The last line

            then the resulting protected reply could be any of the
            following (the first example has a line break only to fit
            within the margins):

  631 base64(protect("123-First line\r\nSecond line\r\n  234 A line
  631-base64(protect("123-First line\r\n"))
  631-base64(protect("Second line\r\n"))
  631-base64(protect("  234 A line beginning with numbers\r\n"))
  631 base64(protect("123 The last line"))

  631-base64(protect("123-First line\r\nSecond line\r\n  234 A line b"))
  631 base64(protect("eginning with numbers\r\n123 The last line\r\n"))

4.2.2.  Reply Code By Function Groups


      200 Command okay.
      500 Syntax error, command unrecognized.



Bryan                    Expires August 7, 2011               [Page 106]

Internet-Draft           File Transfer Protocol            February 2011


          This may include errors such as command line too long.
      501 Syntax error in parameters or arguments.
      202 Command not implemented, superfluous at this site.
      502 Command not implemented.
      503 Bad sequence of commands.
      504 Command not implemented for that parameter.

      110 Restart marker reply.
          A restart reply message, sent over the control connection
          from the receiving FTP to the User-FTP, has the format:
               110 MARK ssss = rrrr
          Here:
            * ssss is a text string that appeared in a
              Restart Marker in the data stream and encodes a
              position in the sender's file system;
            * rrrr encodes the corresponding position in the
              receiver's file system.
          See section on REST.
      211 System status, or system help reply.
      212 Directory status.
      213 File status.
      214 Help message.
          On how to use the server or the meaning of a particular
          non-standard command.  This reply is useful only to the
          human user.
      215 NAME system type.
          Where NAME is an official system name from the list in the
          Assigned Numbers document.

      120 Service ready in nnn minutes.
      220 Service ready for new user.
      221 Service closing control connection.
          Logged out if appropriate.
      421 Service not available, closing control connection.
          This may be a reply to any command if the service knows it
          must shut down.
      125 Data connection already open; transfer starting.
      225 Data connection open; no transfer in progress.
      425 Can't open data connection.
      226 Closing data connection.
          Requested file action successful (for example, file
          transfer or file abort).
      426 Connection closed; transfer aborted.
      227 Entering Passive Mode (h1,h2,h3,h4,p1,p2).

      230 User logged in, proceed.
      232 User logged in, authorized by security data exchange.
      234 Security data exchange complete.



Bryan                    Expires August 7, 2011               [Page 107]

Internet-Draft           File Transfer Protocol            February 2011


      235 [ADAT=base64data]
            ; This reply indicates that the security data exchange
            ; completed successfully.  The square brackets are not
            ; to be included in the reply, but indicate that
            ; security data in the reply is optional.
      331 User name okay, need password.
      332 Need account for login.
      334 [ADAT=base64data]
            ; This reply indicates that the requested security mechanism
            ; is ok, and includes security data to be used by the client
            ; to construct the next command.  The square brackets are
            ; not to be included in the reply, but indicate that
            ; security data in the reply is optional.
      335 [ADAT=base64data]
            ; This reply indicates that the security data is
            ; acceptable, and more is required to complete the
            ; security data exchange.  The square brackets
            ; are not to be included in the reply, but indicate
            ; that security data in the reply is optional.
      336 Username okay, need password.  Challenge is "...."
            ; The exact representation of the challenge should be chosen
            ; by the mechanism to be sensible to the human user of the
            ; system.
      431 Need some unavailable resource to process security.
      530 Not logged in.
      532 Need account for storing files.
      533 Command protection level denied for policy reasons.
      534 Request denied for policy reasons.
      535 Failed security check (hash, sequence, etc).
      536 Requested PROT level not supported by mechanism.
      537 Command protection level not supported by security mechanism.


      150 File status okay; about to open data connection.
      250 Requested file action okay, completed.
      257 "PATHNAME" created.
      350 Requested file action pending further information.
      450 Requested file action not taken.
          File unavailable (e.g., file busy).
      550 Requested action not taken.
          File unavailable (e.g., file not found, no access).
      451 Requested action aborted. Local error in processing.
      551 Requested action aborted. Page type unknown.
      452 Requested action not taken.
          Insufficient storage space in system.
      552 Requested file action aborted.
          Exceeded storage allocation (for current directory or
          dataset).



Bryan                    Expires August 7, 2011               [Page 108]

Internet-Draft           File Transfer Protocol            February 2011


      553 Requested action not taken.
          File name not allowed.
      554 Requested action not taken: invalid REST parameter.
          A 554 reply may result from a FTP service command that
          follows a REST command.  The reply indicates that the
          existing file at the Server-FTP cannot be repositioned
          as specified in the REST.
      555 Requested action not taken: type or stru mismatch.
          A 555 reply may result from an APPE command or from any
          FTP service command following a REST command.  The
          reply indicates that there is some mismatch between the
          current transfer parameters (type and stru) and the
          attributes of the existing file.

4.2.3.  Numeric Order List of Reply Codes


      110 Restart marker reply.
          A restart reply message, sent over the control connection
          from the receiving FTP to the User-FTP, has the format:
               110 MARK ssss = rrrr
          Here:
            * ssss is a text string that appeared in a
              Restart Marker in the data stream and encodes a
              position in the sender's file system;
            * rrrr encodes the corresponding position in the
              receiver's file system.
          See section on REST.
      120 Service ready in nnn minutes.
      125 Data connection already open; transfer starting.
      150 File status okay; about to open data connection.

      200 Command okay.
      202 Command not implemented, superfluous at this site.
      211 System status, or system help reply.
      212 Directory status.
      213 File status.
      214 Help message.
          On how to use the server or the meaning of a particular
          non-standard command.  This reply is useful only to the
          human user.
      215 NAME system type.
          Where NAME is an official system name from the list in the
          Assigned Numbers document.
      220 Service ready for new user.
      221 Service closing control connection.
          Logged out if appropriate.
      225 Data connection open; no transfer in progress.



Bryan                    Expires August 7, 2011               [Page 109]

Internet-Draft           File Transfer Protocol            February 2011


      226 Closing data connection.
          Requested file action successful (for example, file
          transfer or file abort).
      227 Entering Passive Mode (h1,h2,h3,h4,p1,p2).
      230 User logged in, proceed.
      232 User logged in, authorized by security data exchange.
      234 Security data exchange complete.
      235 [ADAT=base64data]
            ; This reply indicates that the security data exchange
            ; completed successfully.  The square brackets are not
            ; to be included in the reply, but indicate that
            ; security data in the reply is optional.
      250 Requested file action okay, completed.
      257 "PATHNAME" created.

      331 User name okay, need password.
      332 Need account for login.
      334 [ADAT=base64data]
            ; This reply indicates that the requested security mechanism
            ; is ok, and includes security data to be used by the client
            ; to construct the next command.  The square brackets are
            ; not to be included in the reply, but indicate that
            ; security data in the reply is optional.
      335 [ADAT=base64data]
            ; This reply indicates that the security data is
            ; acceptable, and more is required to complete the
            ; security data exchange.  The square brackets
            ; are not to be included in the reply, but indicate
            ; that security data in the reply is optional.
      336 Username okay, need password.  Challenge is "...."
            ; The exact representation of the challenge should be chosen
            ; by the mechanism to be sensible to the human user of the
            ; system.
      350 Requested file action pending further information.

      421 Service not available, closing control connection.
          This may be a reply to any command if the service knows it
          must shut down.
      425 Can't open data connection.
      426 Connection closed; transfer aborted.
      431 Need some unavailable resource to process security.
      450 Requested file action not taken.
          File unavailable (e.g., file busy).
      451 Requested action aborted: local error in processing.
      452 Requested action not taken.
          Insufficient storage space in system.

      500 Syntax error, command unrecognized.



Bryan                    Expires August 7, 2011               [Page 110]

Internet-Draft           File Transfer Protocol            February 2011


          This may include errors such as command line too long.
      501 Syntax error in parameters or arguments.
      502 Command not implemented.
      503 Bad sequence of commands.
      504 Command not implemented for that parameter.
      530 Not logged in.
      532 Need account for storing files.
      533 Command protection level denied for policy reasons.
      534 Request denied for policy reasons.
      535 Failed security check (hash, sequence, etc).
      536 Requested PROT level not supported by mechanism.
      537 Command protection level not supported by security mechanism.
      550 Requested action not taken.
          File unavailable (e.g., file not found, no access).
      551 Requested action aborted: page type unknown.
      552 Requested file action aborted.
          Exceeded storage allocation (for current directory or
          dataset).
      553 Requested action not taken.
          File name not allowed.
      554 Requested action not taken: invalid REST parameter.
          A 554 reply may result from a FTP service command that
          follows a REST command.  The reply indicates that the
          existing file at the Server-FTP cannot be repositioned
          as specified in the REST.
      555 Requested action not taken: type or stru mismatch.
          A 555 reply may result from an APPE command or from any
          FTP service command following a REST command.  The
          reply indicates that there is some mismatch between the
          current transfer parameters (type and stru) and the
          attributes of the existing file.


5.  Declarative Specifications

5.1.  Minimum Implementation

   The following commands and options MUST be supported by every server-
   FTP and user-FTP, except in cases where the underlying file system or
   operating system does not allow or support a particular command.











Bryan                    Expires August 7, 2011               [Page 111]

Internet-Draft           File Transfer Protocol            February 2011


            Type: ASCII Non-print, IMAGE, LOCAL 8
            Mode: Stream
            Structure: File, Record*
            Commands:
               USER, PASS, ACCT,
               PORT, PASV,
               TYPE, MODE, STRU,
               RETR, STOR, APPE,
               RNFR, RNTO, DELE,
               CWD,  CDUP, RMD,  MKD,  PWD,
               LIST, NLST,
               SYST, STAT,
               HELP, NOOP, QUIT.

   *Record structure is REQUIRED only for hosts whose file systems
   support record structure.

   The default values for transfer parameters are:



            TYPE - ASCII Non-print
            MODE - Stream
            STRU - File

   All hosts must accept the above as the standard defaults.

5.2.  Connections

   The server protocol interpreter shall "listen" on Port L. The user or
   user protocol interpreter shall initiate the full-duplex control
   connection.  Server- and user- processes should follow the
   conventions of the Telnet protocol as specified in the ARPA-Internet
   Protocol Handbook [IPTW].  Servers are under no obligation to provide
   for editing of command lines and MAY require that it be done in the
   user host.  The control connection shall be closed by the server at
   the user's request after all transfers and replies are completed.

   The user-DTP MUST "listen" on the specified data port; this may be
   the default user port (U) or a port specified in the PORT command.
   The server shall initiate the data connection from his own default
   data port (L-1) using the specified user data port.  The direction of
   the transfer will be determined by the FTP service command.

   On a multihomed server host, the default data transfer port (L-1)
   MUST be associated with the same local IP address as the
   corresponding control connection to port L.




Bryan                    Expires August 7, 2011               [Page 112]

Internet-Draft           File Transfer Protocol            February 2011


   Note that all FTP implementation MUST support data transfer using the
   default port, and that only the USER-PI MAY initiate the use of non-
   default ports.

   When data is to be transferred between two servers, A and B (refer to
   Figure 2), the user-PI, C, sets up control connections with both
   server-PI's.  One of the servers, say A, is then sent a PASV command
   telling him to "listen" on his data port rather than initiate a
   connection when he receives a transfer service command.  When the
   user-PI receives an acknowledgment to the PASV command, which
   includes the identity of the host and port being listened on, the
   user-PI then sends A's port, a, to B in a PORT command; a reply is
   returned.  The user-PI may then send the corresponding service
   commands to A and B. Server B initiates the connection and the
   transfer proceeds.  The command-reply sequence is listed below where
   the messages are vertically synchronous but horizontally
   asynchronous:



         User-PI - Server A                User-PI - Server B
         ------------------                ------------------

         C->A : Connect                    C->B : Connect
         C->A : PASV
         A->C : 227 Entering Passive Mode. A1,A2,A3,A4,a1,a2
                                           C->B : PORT A1,A2,A3,A4,a1,a2
                                           B->C : 200 Okay
         C->A : STOR                       C->B : RETR
                    B->A : Connect to HOST-A, PORT-a

                                Figure 3

   The data connection shall be closed by the server under the
   conditions described in Section 3.2.  If the data connection is to be
   closed following a data transfer where closing the connection is not
   required to indicate the end-of-file, the server must do so
   immediately.  Waiting until after a new transfer command is not
   permitted because the user-process will have already tested the data
   connection to see if it needs to do a "listen"; (remember that the
   user must "listen" on a closed data port BEFORE sending the transfer
   request).  To prevent a race condition here, the server sends a reply
   (226) after closing the data connection (or if the connection is left
   open, a "file transfer completed" reply (250) and the user-PI should
   wait for one of these replies before issuing a new transfer command).

   Any time either the user or server see that the connection is being
   closed by the other side, it should promptly read any remaining data



Bryan                    Expires August 7, 2011               [Page 113]

Internet-Draft           File Transfer Protocol            February 2011


   queued on the connection and issue the close on its own side.

   A Server-FTP process SHOULD have an idle timeout, which will
   terminate the process and close the control connection if the server
   is inactive (i.e., no command or data transfer in progress) for a
   long period of time.  The idle timeout time SHOULD be configurable,
   and the default should be at least 5 minutes.

   A client FTP process ("User-PI" in [RFC0959]) will need timeouts on
   responses only if it is invoked from a program.

   A user-FTP MUST NOT send any Telnet controls other than SYNCH and IP
   on an FTP control connection.  In particular, it MUST NOT attempt to
   negotiate Telnet options on the control connection.  However, a
   server-FTP MUST be capable of accepting and refusing Telnet
   negotiations (i.e., sending DONT/WONT).

5.3.  Commands

   The commands are Telnet character strings transmitted over the
   control connections as described in Section 5.3.1.  The command
   functions and semantics are described in Section 4.1.1,
   Section 4.1.2, Section 4.1.3, and Miscellaneous Commands.  The
   command syntax is specified here.

   The commands begin with a command code followed by an argument field.
   The command codes are four or fewer alphabetic characters.  Upper and
   lower case alphabetic characters are to be treated identically.
   Thus, any of the following MAY represent the retrieve command:


                     RETR    Retr    retr    ReTr    rETr

   This also applies to any symbols representing parameter values, such
   as "A" or "a" for ASCII TYPE.  The command codes and the argument
   fields are separated by one or more spaces.

   The argument field consists of a variable length character string
   ending with the character sequence <CRLF> (Carriage Return, Line
   Feed) for NVT-ASCII representation; for other negotiated languages a
   different end of line character might be used.  It should be noted
   that the server is to take no action until the end of line code is
   received.

   The syntax is specified below in NVT-ASCII.  All characters in the
   argument field are ASCII characters including any ASCII represented
   decimal integers.  Square brackets denote an optional argument field.
   If the option is not taken, the appropriate default is implied.



Bryan                    Expires August 7, 2011               [Page 114]

Internet-Draft           File Transfer Protocol            February 2011


5.3.1.  FTP Commands

   The following are the FTP commands:



               USER <SP> <username> <CRLF>
               PASS <SP> <password> <CRLF>
               ACCT <SP> <account-information> <CRLF>
               CWD  <SP> <pathname> <CRLF>
               CDUP <CRLF>
               SMNT <SP> <pathname> <CRLF>
               QUIT <CRLF>
               REIN <CRLF>
               PORT <SP> <host-port> <CRLF>
               PASV <CRLF>
               TYPE <SP> <type-code> <CRLF>
               STRU <SP> <structure-code> <CRLF>
               MODE <SP> <mode-code> <CRLF>
   FIXME       EPRT<space><d><net-prt><d><net-addr><d><tcp-port><d>
   FIXME       EPSV<space><net-prt>
               RETR <SP> <pathname> <CRLF>
               STOR <SP> <pathname> <CRLF>
               STOU <CRLF>
               APPE <SP> <pathname> <CRLF>
               ALLO <SP> <decimal-integer>
                   [<SP> R <SP> <decimal-integer>] <CRLF>
               REST <SP> <marker> <CRLF>
               RNFR <SP> <pathname> <CRLF>
               RNTO <SP> <pathname> <CRLF>
               ABOR <CRLF>
               DELE <SP> <pathname> <CRLF>
               RMD  <SP> <pathname> <CRLF>
               MKD  <SP> <pathname> <CRLF>
               PWD  <CRLF>
               LIST [<SP> <pathname>] <CRLF>
               NLST [<SP> <pathname>] <CRLF>
               SITE <SP> <string> <CRLF>
               SYST <CRLF>
               STAT [<SP> <pathname>] <CRLF>
               HELP [<SP> <string>] <CRLF>
               NOOP <CRLF>
               feat            = "Feat" CRLF
               opts            = opts-cmd SP command-name
                                  [ SP command-options ] CRLF






Bryan                    Expires August 7, 2011               [Page 115]

Internet-Draft           File Transfer Protocol            February 2011


5.3.2.  FTP Command Arguments

   The syntax of the above argument fields (using BNF notation where
   applicable) is:


   FIXME UPDATE TO ABNF
   UPDATE FOR IPv6?
              <username> ::= <string>
              <password> ::= <string>
              <account-information> ::= <string>
              <string> ::= <char> | <char><string>
              <char> ::= any of the 128 ASCII characters except <CR> and
              <LF>
              <marker> ::= <pr-string>
              <pr-string> ::= <pr-char> | <pr-char><pr-string>
              <pr-char> ::= printable characters, any
                            ASCII code 33 through 126
              <byte-size> ::= <number>
              <host-port> ::= <host-number>,<port-number>
              <host-number> ::= <number>,<number>,<number>,<number>
              <port-number> ::= <number>,<number>
              <number> ::= any decimal integer 1 through 255
              <form-code> ::= N | T | C
              <type-code> ::= A [<sp> <form-code>]
                            | E [<sp> <form-code>]
                            | I
                            | L <sp> <byte-size>
              <structure-code> ::= F | R | P
              <mode-code> ::= S | B | C
              <decimal-integer> ::= any decimal integer

5.4.  Sequencing of Commands and Replies

   The communication between the user and server is intended to be an
   alternating dialogue.  As such, the user issues an FTP command and
   the server responds with a prompt primary reply.  The user should
   wait for this initial primary success or failure response before
   sending further commands.

   Certain commands require a second reply for which the user should
   also wait.  These replies may, for example, report on the progress or
   completion of file transfer or the closing of the data connection.
   They are secondary replies to file transfer commands.

   One important group of informational replies is the connection
   greetings.  Under normal circumstances, a server will send a 220
   reply, "awaiting input", when the connection is completed.  The user



Bryan                    Expires August 7, 2011               [Page 116]

Internet-Draft           File Transfer Protocol            February 2011


   should wait for this greeting message before sending any commands.
   If the server is unable to accept input right away, a 120 "expected
   delay" reply should be sent immediately and a 220 reply when ready.
   The user will then know not to hang up if there is a delay.

   Spontaneous Replies
      Sometimes "the system" spontaneously has a message to be sent to a
      user (usually all users).  For example, "System going down in 15
      minutes".  There is no provision in FTP for such spontaneous
      information to be sent from the server to the user.  It is
      recommended that such information be queued in the server-PI and
      delivered to the user-PI in the next reply (possibly making it a
      multi-line reply).

   The table below lists alternative success and failure replies for
   each command.  These MUST be strictly adhered to; a server MAY
   substitute text in the replies, but the meaning and action implied by
   the code numbers and by the specific command reply sequence cannot be
   altered.

   Command-Reply Sequences
      In this section, the command-reply sequence is presented.  Each
      command is listed with its possible replies; command groups are
      listed together.  Preliminary replies are listed first (with their
      succeeding replies indented and under them), then positive and
      negative completion, and finally intermediary replies with the
      remaining commands from the sequence following.  This listing
      forms the basis for the state diagrams, which will be presented
      separately.



               Connection Establishment
                  120
                     220
                  220
                  421
               Login
                  USER
                     230
                     530
                     500, 501, 421
                     331, 332
                  PASS
                     230
                     202
                     530
                     500, 501, 503, 421



Bryan                    Expires August 7, 2011               [Page 117]

Internet-Draft           File Transfer Protocol            February 2011


                     332
                  ACCT
                     230
                     202
                     530
                     500, 501, 503, 421
                  CWD
                     250
                     500, 501, 502, 421, 530, 550
                  CDUP
                     200
                     500, 501, 502, 421, 530, 550
                  SMNT
                     202, 250
                     500, 501, 502, 421, 530, 550
               Logout
                  REIN
                     120
                        220
                     220
                     421
                     500, 502
                  QUIT
                     221
                     500

               Transfer parameters
                  PORT
                     200
                     500, 501, 421, 530
                  PASV
                     227
                     500, 501, 502, 421, 530
                  MODE
                     200
                     500, 501, 504, 421, 530
                  TYPE
                     200
                     500, 501, 504, 421, 530
                  STRU
                     200
                     500, 501, 504, 421, 530
               File action commands
                  ALLO
                     200
                     202
                     500, 501, 504, 421, 530
                  REST



Bryan                    Expires August 7, 2011               [Page 118]

Internet-Draft           File Transfer Protocol            February 2011


                     500, 501, 502, 421, 530
                     350
                  STOR
                     125, 150
                        (110)
                        226, 250
                        425, 426, 451, 551, 552
                     532, 450, 452, 553
                     500, 501, 421, 530
                  STOU
                     125, 150
                        (110)
                        226, 250
                        425, 426, 451, 551, 552
                     532, 450, 452, 553
                     500, 501, 421, 530
                  RETR
                     125, 150
                        (110)
                        226, 250
                        425, 426, 451
                     450, 550
                     500, 501, 421, 530

                  LIST
                     125, 150
                        226, 250
                        425, 426, 451
                     450
                     500, 501, 502, 421, 530
                  NLST
                     125, 150
                        226, 250
                        425, 426, 451
                     450
                     500, 501, 502, 421, 530
                  APPE
                     125, 150
                        (110)
                        226, 250
                        425, 426, 451, 551, 552
                     532, 450, 550, 452, 553
                     500, 501, 502, 421, 530
                  RNFR
                     450, 550
                     500, 501, 502, 421, 530
                     350
                  RNTO



Bryan                    Expires August 7, 2011               [Page 119]

Internet-Draft           File Transfer Protocol            February 2011


                     250
                     532, 553
                     500, 501, 502, 503, 421, 530
                  DELE
                     250
                     450, 550
                     500, 501, 502, 421, 530
                  RMD
                     250
                     500, 501, 502, 421, 530, 550
                  MKD
                     257
                     500, 501, 502, 421, 530, 550
                  PWD
                     257
                     500, 501, 502, 421, 550
                  ABOR
                     225, 226
                     500, 501, 502, 421

               Informational commands
                  SYST
                     215
                     500, 501, 502, 421
                  STAT
                     211, 212, 213
                     450
                     500, 501, 502, 421, 530
                  HELP
                     211, 214
                     500, 501, 502, 421
               Miscellaneous commands
                  SITE
                     200
                     202
                     500, 501, 530
                  NOOP
                     200
                     500 421


6.  State Diagrams

   Here we present state diagrams for a very simple minded FTP
   implementation.  Only the first digit of the reply codes is used.
   There is one state diagram for each group of FTP commands or command
   sequences.




Bryan                    Expires August 7, 2011               [Page 120]

Internet-Draft           File Transfer Protocol            February 2011


   The command groupings were determined by constructing a model for
   each command then collecting together the commands with structurally
   identical models.

   For each command or command sequence there are three possible
   outcomes: success (S), failure (F), and error (E).  In the state
   diagrams below we use the symbol B for "begin", and the symbol W for
   "wait for reply".

   We first present the diagram that represents the largest group of FTP
   commands:



                                  1,3    +---+
                             ----------->| E |
                            |            +---+
                            |
         +---+    cmd    +---+    2      +---+
         | B |---------->| W |---------->| S |
         +---+           +---+           +---+
                            |
                            |     4,5    +---+
                             ----------->| F |
                                         +---+

   This diagram models the commands:

      ABOR, ALLO, DELE, CWD, CDUP, SMNT, HELP, MODE, NOOP, PASV, QUIT,
      SITE, PORT, SYST, STAT, RMD, MKD, PWD, STRU, and TYPE.

   The other large group of commands is represented by a very similar
   diagram:



                                  3      +---+
                             ----------->| E |
                            |            +---+
                            |
         +---+    cmd    +---+    2      +---+
         | B |---------->| W |---------->| S |
         +---+       --->+---+           +---+
                    |     | |
                    |     | |     4,5    +---+
                    |  1  |  ----------->| F |
                     -----               +---+




Bryan                    Expires August 7, 2011               [Page 121]

Internet-Draft           File Transfer Protocol            February 2011


   This diagram models the commands:

      APPE, LIST, NLST, REIN, RETR, STOR, and STOU.

   Note that this second model could also be used to represent the first
   group of commands, the only difference being that in the first group
   the 100 series replies are unexpected and therefore treated as error,
   while the second group expects (some MAY require) 100 series replies.
   Remember that at most, one 100 series reply is allowed per command.

   The remaining diagrams model command sequences, perhaps the simplest
   of these is the rename sequence:



         +---+   RNFR    +---+    1,2    +---+
         | B |---------->| W |---------->| E |
         +---+           +---+        -->+---+
                          | |        |
                   3      | | 4,5    |
            --------------  ------   |
           |                      |  |   +---+
           |               ------------->| S |
           |              |   1,3 |  |   +---+
           |             2|  --------
           |              | |     |
           V              | |     |
         +---+   RNTO    +---+ 4,5 ----->+---+
         |   |---------->| W |---------->| F |
         +---+           +---+           +---+

   The next diagram is a simple model of the Restart command:



















Bryan                    Expires August 7, 2011               [Page 122]

Internet-Draft           File Transfer Protocol            February 2011


         +---+   REST    +---+    1,2    +---+
         | B |---------->| W |---------->| E |
         +---+           +---+        -->+---+
                          | |        |
                   3      | | 4,5    |
            --------------  ------   |
           |                      |  |   +---+
           |               ------------->| S |
           |              |   3   |  |   +---+
           |             2|  --------
           |              | |     |
           V              | |     |
         +---+   cmd     +---+ 4,5 ----->+---+
         |   |---------->| W |---------->| F |
         +---+        -->+---+           +---+
                     |      |
                     |  1   |
                      ------

   Where "cmd" is APPE, STOR, or RETR.

   We note that the above three models are similar.  The Restart differs
   from the Rename two only in the treatment of 100 series replies at
   the second stage, while the second group expects (some MAY require)
   100 series replies.  Remember that at most, one 100 series reply is
   allowed per command.

   The most complicated diagram is for the Login sequence:























Bryan                    Expires August 7, 2011               [Page 123]

Internet-Draft           File Transfer Protocol            February 2011


                               1
         +---+   USER    +---+------------->+---+
         | B |---------->| W | 2       ---->| E |
         +---+           +---+------  |  -->+---+
                          | |       | | |
                        3 | | 4,5   | | |
            --------------   -----  | | |
           |                      | | | |
           |                      | | | |
           |                 ---------  |
           |               1|     | |   |
           V                |     | |   |
         +---+   PASS    +---+ 2  |  ------>+---+
         |   |---------->| W |------------->| S |
         +---+           +---+   ---------->+---+
                          | |   | |     |
                        3 | |4,5| |     |
            --------------   --------   |
           |                    | |  |  |
           |                    | |  |  |
           |                 -----------
           |             1,3|   | |  |
           V                |  2| |  |
         +---+   ACCT    +---+--  |   ----->+---+
         |   |---------->| W | 4,5 -------->| F |
         +---+           +---+------------->+---+

   Finally, we present a generalized diagram that could be used to model
   the command and reply interchange:






















Bryan                    Expires August 7, 2011               [Page 124]

Internet-Draft           File Transfer Protocol            February 2011


                  ------------------------------------
                 |                                    |
         Begin   |                                    |
           |     V                                    |
           |   +---+  cmd   +---+ 2         +---+     |
            -->|   |------->|   |---------->|   |     |
               |   |        | W |           | S |-----|
            -->|   |     -->|   |-----      |   |     |
           |   +---+    |   +---+ 4,5 |     +---+     |
           |     |      |    | |      |               |
           |     |      |   1| |3     |     +---+     |
           |     |      |    | |      |     |   |     |
           |     |       ----  |       ---->| F |-----
           |     |             |            |   |
           |     |             |            +---+
            -------------------
                 |
                 |
                 V
                End


7.  Typical FTP Scenario

   User at host U wanting to transfer files to/from host S:

   In general, the user will communicate to the server via a mediating
   user-FTP process.  The following may be a typical scenario.  The
   user-FTP prompts are shown in parentheses, '---->' represents
   commands from host U to host S, and '<----' represents replies from
   host S to host U.




















Bryan                    Expires August 7, 2011               [Page 125]

Internet-Draft           File Transfer Protocol            February 2011


      LOCAL COMMANDS BY USER              ACTION INVOLVED

      ftp (host) multics<CR>         Connect to host S, port L,
                                     establishing control connections.
                                     <---- 220 Service ready <CRLF>.
      username Doe <CR>              USER Doe<CRLF>---->
                                     <---- 331 User name ok,
                                               need password<CRLF>.
      password mumble <CR>           PASS mumble<CRLF>---->
                                     <---- 230 User logged in<CRLF>.
      retrieve (local type) ASCII<CR>
      (local pathname) test 1 <CR>   User-FTP opens local file in ASCII.
      (for. pathname) test.pl1<CR>   RETR test.pl1<CRLF> ---->
                                     <---- 150 File status okay;
                                           about to open data
                                           connection<CRLF>.
                                     Server makes data connection
                                     to port U.

                                     <---- 226 Closing data connection,
                                         file transfer successful<CRLF>.
      type Image<CR>                 TYPE I<CRLF> ---->
                                     <---- 200 Command OK<CRLF>
      store (local type) image<CR>
      (local pathname) file dump<CR> User-FTP opens local file in Image.
      (for.pathname) >udd>cn>fd<CR>  STOR >udd>cn>fd<CRLF> ---->
                                     <---- 550 Access denied<CRLF>
      terminate                      QUIT <CRLF> ---->
                                     Server closes all
                                     connections.


8.  Connection Establishment

   The FTP control connection is established via TCP between the user
   process port U and the server process port L. This protocol is
   assigned the service port 21 (25 octal), that is L=21.


9.  IANA Considerations

   This specification makes use of some lists of values currently
   maintained by the IANA.  It does not add any values to any existing
   registries.







Bryan                    Expires August 7, 2011               [Page 126]

Internet-Draft           File Transfer Protocol            February 2011


10.  Security Considerations

10.1.  Privacy and Passwords with Clear Text Protocols

   All data and control information (including passwords) is sent across
   the network in unencrypted form by standard FTP [RFC0959].  To
   guarantee the privacy of the information FTP transmits, a strong
   encryption scheme should be used whenever possible.  One such
   mechanism is defined in [RFC2228].

   Standard FTP [RFC0959] sends passwords in clear text using the "PASS"
   command.  It is suggested that FTP clients and servers use alternate
   authentication mechanisms that are not subject to eavesdropping (such
   as the mechanisms being developed by the IETF Common Authentication
   Technology Working Group [RFC2228]).

10.2.  Securing FTP with TLS

   [RFC4217] describes a mechanism that can be used by FTP clients and
   servers to implement security and authentication using the TLS
   protocol defined by RFC 2246, "The TLS Protocol Version 1.0.", and
   the extensions to the FTP protocol defined by [RFC2228], "FTP
   Security Extensions".  It describes the subset of the extensions that
   are required and the parameters to be used, discusses some of the
   policy issues that clients and servers will need to take, considers
   some of the implications of those policies, and discusses some
   expected behaviours of implementations to allow interoperation.

10.3.  The Bounce Attack

   The version of FTP specified in the standard [RFC0959] provides a
   method for attacking well known network servers, while making the
   perpetrators difficult to track down.  The attack involves sending an
   FTP "PORT" command to an FTP server containing the network address
   and the port number of the machine and service being attacked.  At
   this point, the original client can instruct the FTP server to send a
   file to the service being attacked.  Such a file would contain
   commands relevant to the service being attacked (SMTP, NNTP, etc.).
   Instructing a third party to connect to the service, rather than
   connecting directly, makes tracking down the perpetrator difficult
   and can circumvent network-address-based access restrictions.

   As an example, a client uploads a file containing SMTP commands to an
   FTP server.  Then, using an appropriate PORT command, the client
   instructs the server to open a connection to a third machine's SMTP
   port.  Finally, the client instructs the server to transfer the
   uploaded file containing SMTP commands to the third machine.  This
   may allow the client to forge mail on the third machine without



Bryan                    Expires August 7, 2011               [Page 127]

Internet-Draft           File Transfer Protocol            February 2011


   making a direct connection.  This makes it difficult to track
   attackers.

10.3.1.  Protecting Against the Bounce Attack

   The original FTP specification [RFC0959] assumes that data
   connections will be made using the Transmission Control Protocol
   (TCP) [RFC0793].  TCP port numbers in the range 0 - 1023 are reserved
   for well known services such as mail, network news and FTP control
   connections (See IANA "Port Numbers" Registry at
   http://www.iana.org/assignments/port-numbers ).  The FTP
   specification makes no restrictions on the TCP port number used for
   the data connection.  Therefore, using proxy FTP, clients have the
   ability to tell the server to attack a well known service on any
   machine.

   To avoid such bounce attacks, it is suggested that servers not open
   data connections to TCP ports less than 1024.  If a server receives a
   PORT command containing a TCP port number less than 1024, the
   suggested response is 504 (defined as "Command not implemented for
   that parameter" by [RFC0959]).  Note that this still leaves non-well
   known servers (those running on ports greater than 1023) vulnerable
   to bounce attacks.

   Section 4.1.2.1 and [RFC1639] (now obsolete) provide a mechanism that
   would allow data connections to be made using a transport protocol
   other than TCP.  Similar precautions should be taken to protect well
   known services when using these protocols.

   Also note that the bounce attack generally requires that a
   perpetrator be able to upload a file to an FTP server and later
   download it to the service being attacked.  Using proper file
   protections will prevent this behavior.  However, attackers can also
   attack services by sending random data from a remote FTP server which
   may cause problems for some services.

   Disabling the PORT command is also an option for protecting against
   the bounce attack.  Most file transfers can be made using only the
   PASV command [Bel94].  The disadvantage of disabling the PORT command
   is that one loses the ability to use proxy FTP, but proxy FTP may not
   be necessary in a particular environment.

10.4.  Restricted Access

   For some FTP servers, it is desirable to restrict access based on
   network address.  For example, a server might want to restrict access
   to certain files from certain places (e.g., a certain file should not
   be transferred out of an organization).  In such a situation, the



Bryan                    Expires August 7, 2011               [Page 128]

Internet-Draft           File Transfer Protocol            February 2011


   server should confirm that the network address of the remote hosts on
   both the control connection and the data connection are within the
   organization before sending a restricted file.  By checking both
   connections, a server is protected against the case when the control
   connection is established with a trusted host and the data connection
   is not.  Likewise, the client should verify the IP address of the
   remote host after accepting a connection on a port opened in listen
   mode to verify that the connection was made by the expected server.

   Note that restricting access based on network address leaves the FTP
   server vulnerable to "spoof" attacks.  In a spoof attack, for
   example, an attacking machine could assume the host address of
   another machine inside an organization and download files that are
   not accessible from outside the organization.  Whenever possible,
   secure authentication mechanisms should be used, such as those
   outlined in [RFC2228].

10.5.  Protecting Passwords Against Brute Force Attacks

   To minimize the risk of brute force password guessing through the FTP
   server, it is suggested that servers limit the number of attempts
   that can be made at sending a correct password.  After a small number
   of attempts (3-5), the server should close the control connection
   with the client.  Before closing the control connection the server
   must send a return code of 421 ("Service not available, closing
   control connection."  [RFC0959]) to the client.  In addition, it is
   suggested that the server impose a 5 second delay before replying to
   an invalid "PASS" command to diminish the efficiency of a brute force
   attack.  If available, mechanisms already provided by the target
   operating system should be used to implement the above suggestions.

   An intruder can subvert the above mechanisms by establishing
   multiple, parallel control connections to a server.  To combat the
   use of multiple concurrent connections, the server could either limit
   the total number of control connections possible or attempt to detect
   suspicious activity across sessions and refuse further connections
   from the site.  However, both of these mechanisms open the door to
   "denial of service" attacks, in which an attacker purposely initiates
   the attack to disable access by a valid user.

10.6.  Protecting Usernames

   Standard FTP [RFC0959] specifies a 530 response to the USER command
   when the username is rejected.  If the username is valid and a
   password is required FTP returns a 331 response instead.  In order to
   prevent a malicious client from determining valid usernames on a
   server, it is suggested that a server always return 331 to the USER
   command and then reject the combination of username and password for



Bryan                    Expires August 7, 2011               [Page 129]

Internet-Draft           File Transfer Protocol            February 2011


   an invalid username.

10.7.  Port Stealing

   Many operating systems assign dynamic port numbers in increasing
   order.  By making a legitimate transfer, an attacker can observe the
   current port number allocated by the server and "guess" the next one
   that will be used.  The attacker can make a connection to this port,
   thus denying another legitimate client the ability to make a
   transfer.  Alternatively, the attacker can steal a file meant for a
   legitimate user.  In addition, an attacker can insert a forged file
   into a data stream thought to come from an authenticated client.
   This problem can be mitigated by making FTP clients and servers use
   random local port numbers for data connections, either by requesting
   random ports from the operating system or using system dependent
   mechanisms.

10.8.  Software-Base Security Problems

   The emphasis in this document is on protocol-related security issues.
   There are a number of documented FTP security-related problems that
   are due to poor implementation as well.  Although the details of
   these types of problems are beyond the scope of this document, it
   should be pointed out that the following FTP features have been
   abused in the past and should be treated with great care by future
   implementers:

   Anonymous FTP

      Anonymous FTP refers to the ability of a client to connect to an
      FTP server with minimal authentication and gain access to public
      files.  Security problems arise when such a user can read all
      files on the system or can create files.  [CERT92:09] [CERT93:06]

   Remote Command Execution

      An optional FTP extension, "SITE EXEC", allows clients to execute
      arbitrary commands on the server.  This feature should obviously
      be implemented with great care.  There are several documented
      cases of the FTP "SITE EXEC" command being used to subvert server
      security [CERT94:08] [CERT95:16]

   Debug Code

      Several previous security compromises related to FTP can be
      attributed to software that was installed with debugging features
      enabled [CERT88:01].




Bryan                    Expires August 7, 2011               [Page 130]

Internet-Draft           File Transfer Protocol            February 2011


   This document recommends that implementors of FTP servers with these
   capabilities review all of the CERT advisories for attacks on these
   or similar mechanisms before releasing their software.

10.9.  Server Capabilities Exposed by FEAT

   No significant new security issues, not already present in the FTP
   protocol, are believed to have been created by this extension.
   However, FEAT does provide a mechanism by which users can determine
   the capabilities of an FTP server, and from which additional
   information may be able to be deduced.  While the same basic
   information could be obtained by probing the server for the various
   commands, if the FEAT command were not provided, that method may
   reveal an attacker by logging the attempts to access various
   extension commands.  This possibility is not considered a serious
   enough threat to be worthy of any remedial action.

   The security of any additional features that might be reported by the
   FEAT command, and manipulated by the OPTS command, should be
   addressed where those features are defined.

10.10.  SIZE and MLSx

   Implementing the SIZE command, and perhaps some of the facts of the
   MLSx commands, may impose a considerable load on the server, which
   could lead to denial of service attacks.  Servers have, however,
   implemented this for many years, without significant reported
   difficulties.

   The server-FTP should take care not to reveal sensitive information
   about files to unauthorised parties.  In particular, some underlying
   filesystems provide a file identifier that, if known, can allow many
   of the filesystem protection mechanisms to be by-passed.  That
   identifier would not be a suitable choice to use as the basis of the
   value of the unique fact.

   The FEAT and OPTS commands may be issued before the FTP
   authentication has occurred [RFC2389].  This allows unauthenticated
   clients to determine which of the features defined here are
   supported, and to negotiate the fact list for MLSx output.  No actual
   MLSx commands may be issued however, and no problems with permitting
   the selection of the format prior to authentication are foreseen.


11.  Authors of Included RFCs

   Authors of included RFCs:




Bryan                    Expires August 7, 2011               [Page 131]

Internet-Draft           File Transfer Protocol            February 2011


   RFC 0959:

   Jon Postel
   ISI

   RFC 0959:

   Joyce Reynolds
   ISI

   RFC 1123:

   Robert Braden
   USC/Information Sciences Institute
   4676 Admiralty Way
   Marina del Rey, CA 90292-6695
   Phone: (213) 822 1511
   EMail: Braden@ISI.EDU

   RFC 2389, RFC 3659:

   Paul Hethmon
   Hethmon Brothers
   2305 Chukar Road
   Knoxville
   TN 37923
   USA
   Phone:          +1 423 690 8990
   Email:          phethmon@hethmon.com

   RFC 2389:

   Robert Elz
   University of Melbourne
   Department of Computer Science
   Parkville
   Vic 3052
   Australia
   Email:          kre@munnari.OZ.AU

   RFC 2428, RFC 2577:

   Mark Allman
   NASA Lewis Research Center/Sterling Software
   21000 Brookpark Rd. MS 54-2
   Cleveland
   OH 44135
   Phone:          (216) 433-6586



Bryan                    Expires August 7, 2011               [Page 132]

Internet-Draft           File Transfer Protocol            February 2011


   Email:          mallman@lerc.nasa.gov
   URI:    http://gigahertz.lerc.nasa.gov/~mallman/

   RFC 2428, RFC 2577:

   Shawn Ostermann
   Ohio University
   School of Electrical Engineering & Computer Science
   416 Morton Hall
   Athens
   OH 45701
   Phone:          (740) 593-1234
   Email:          ostermann@cs.ohiou.edu

   RFC 2428:

   Craig Metz
   The Inner Net
   Box 10314-1954
   Blacksburg
   VA 24062-0314
   Phone:          (DSN) 754-8590
   Email:          cmetz@inner.net


12.  References

12.1.  Normative References

   [IPTW]     Feinler, E., "Internet Protocol Transition Workbook",  ,
              March 1982.

   [RFC0791]  Postel, J., "Internet Protocol", STD 5, RFC 791,
              September 1981.

   [RFC0793]  Postel, J., "Transmission Control Protocol", STD 7,
              RFC 793, September 1981.

   [RFC0854]  Postel, J. and J. Reynolds, "Telnet Protocol
              Specification", STD 8, RFC 854, May 1983.

   [RFC0959]  Postel, J. and J. Reynolds, "File Transfer Protocol",
              STD 9, RFC 959, October 1985.

   [RFC1123]  Braden, R., "Requirements for Internet Hosts - Application
              and Support", STD 3, RFC 1123, October 1989.

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate



Bryan                    Expires August 7, 2011               [Page 133]

Internet-Draft           File Transfer Protocol            February 2011


              Requirement Levels", BCP 14, RFC 2119, March 1997.

   [RFC2228]  Horowitz, M., "FTP Security Extensions", RFC 2228,
              October 1997.

   [RFC2389]  Hethmon, P. and R. Elz, "Feature negotiation mechanism for
              the File Transfer Protocol", RFC 2389, August 1998.

   [RFC2428]  Allman, M., Ostermann, S., and C. Metz, "FTP Extensions
              for IPv6 and NATs", RFC 2428, September 1998.

   [RFC2460]  Deering, S. and R. Hinden, "Internet Protocol, Version 6
              (IPv6) Specification", RFC 2460, December 1998.

   [RFC2577]  Allman, M. and S. Ostermann, "FTP Security
              Considerations", RFC 2577, May 1999.

   [RFC2640]  Curtin, B., "Internationalization of the File Transfer
              Protocol", RFC 2640, July 1999.

   [RFC3659]  Hethmon, P., "Extensions to FTP", RFC 3659, March 2007.

   [RFC4217]  Ford-Hutchinson, P., "Securing FTP with TLS", RFC 4217,
              October 2005.

12.2.  Informative References

   [RFC1639]  Piscitello, D., "FTP Operation Over Big Address Records
              (FOOBAR)", RFC 1639, June 1994.

   [RFC5234]  Crocker, D. and P. Overell, "Augmented BNF for Syntax
              Specifications: ABNF", STD 68, RFC 5234, January 2008.

   [RFC5797]  Klensin, J. and A. Hoenes, "FTP Command and Extension
              Registry", RFC 5797, March 2010.


Appendix A.  Page Structure

   The need for FTP to support page structure derives principally from
   the need to support efficient transmission of files between TOPS-20
   systems, particularly the files used by NLS.

   The file system of TOPS-20 is based on the concept of pages.  The
   operating system is most efficient at manipulating files as pages.
   The operating system provides an interface to the file system so that
   many applications view files as sequential streams of characters.
   However, a few applications use the underlying page structures



Bryan                    Expires August 7, 2011               [Page 134]

Internet-Draft           File Transfer Protocol            February 2011


   directly, and some of these create holey files.

   A TOPS-20 disk file consists of four things: a pathname, a page
   table, a (possibly empty) set of pages, and a set of attributes.

   The pathname is specified in the RETR or STOR command.  It includes
   the directory name, file name, file name extension, and generation
   number.

   The page table contains up to 2**18 entries.  Each entry may be
   EMPTY, or may point to a page.  If it is not empty, there are also
   some page-specific access bits; not all pages of a file need have the
   same access protection.

   A page is a contiguous set of 512 words of 36 bits each.

   The attributes of the file, in the File Descriptor Block (FDB),
   contain such things as creation time, write time, read time, writer's
   byte-size, end-of-file pointer, count of reads and writes, backup
   system tape numbers, etc.

   Note that there is NO requirement that entries in the page table be
   contiguous.  There may be empty page table slots between occupied
   ones.  Also, the end of file pointer is simply a number.  There is no
   requirement that it in fact point at the "last" datum in the file.
   Ordinary sequential I/O calls in TOPS-20 will cause the end of file
   pointer to be left after the last datum written, but other operations
   may cause it not to be so, if a particular programming system so
   requires.

   In fact, in both of these special cases, "holey" files and end-of-
   file pointers NOT at the end of the file, occur with NLS data files.

   The TOPS-20 paged files can be sent with the FTP transfer parameters:
   TYPE L 36, STRU P, and MODE S (in fact, any mode could be used).

   Each page of information has a header.  Each header field, which is a
   logical byte, is a TOPS-20 word, since the TYPE is L 36.

   The header fields are:

   Word 0: Header Length.

   The header length is 5.

   Word 1: Page Index.

   If the data is a disk file page, this is the number of that page in



Bryan                    Expires August 7, 2011               [Page 135]

Internet-Draft           File Transfer Protocol            February 2011


   the file's page map.  Empty pages (holes) in the file are simply not
   sent.  Note that a hole is NOT the same as a page of zeros.

   Word 2: Data Length.

   The number of data words in this page, following the header.  Thus,
   the total length of the transmission unit is the Header Length plus
   the Data Length.

   Word 3: Page Type.

   A code for what type of chunk this is.  A data page is type 3, the
   FDB page is type 2.

   Word 4: Page Access Control.

   The access bits associated with the page in the file's page map.
   (This full word quantity is put into AC2 of an SPACS by the program
   reading from net to disk.)

   After the header are Data Length data words.  Data Length is
   currently either 512 for a data page or 31 for an FDB.  Trailing
   zeros in a disk file page may be discarded, making Data Length less
   than 512 in that case.


Appendix B.  Directory Commands

   Since UNIX has a tree-like directory structure in which directories
   are as easy to manipulate as ordinary files, it is useful to expand
   the FTP servers on these machines to include commands which deal with
   the creation of directories.  Since there are other hosts on the
   ARPA-Internet which have tree-like directories (including TOPS-20 and
   Multics), these commands are as general as possible.

   Four directory commands have been added to FTP:

   MKD pathname

   Make a directory with the name "pathname".

   RMD pathname

   Remove the directory with the name "pathname".

   PWD

   Print the current working directory name.



Bryan                    Expires August 7, 2011               [Page 136]

Internet-Draft           File Transfer Protocol            February 2011


   CDUP

   Change to the parent of the current working directory.

   The "pathname" argument should be created (removed) as a subdirectory
   of the current working directory, unless the "pathname" string
   contains sufficient information to specify otherwise to the server,
   e.g., "pathname" is an absolute pathname (in UNIX and Multics), or
   pathname is something like "<abso.lute.path>" to TOPS-20.

   REPLY CODES

   The CDUP command is a special case of CWD, and is included to
   simplify the implementation of programs for transferring directory
   trees between operating systems having different syntaxes for naming
   the parent directory.  The reply codes for CDUP be identical to the
   reply codes of CWD.

   The reply codes for RMD be identical to the reply codes for its file
   analogue, DELE.

   The reply codes for MKD, however, are a bit more complicated.  A
   freshly created directory will probably be the object of a future

   CWD command.  Unfortunately, the argument to MKD may not always be a
   suitable argument for CWD.  This is the case, for example, when a
   TOPS-20 subdirectory is created by giving just the subdirectory name.
   That is, with a TOPS-20 server FTP, the command sequence

   MKD MYDIR CWD MYDIR

   will fail.  The new directory may only be referred to by its
   "absolute" name; e.g., if the MKD command above were issued while
   connected to the directory <DFRANKLIN>, the new subdirectory could
   only be referred to by the name <DFRANKLIN.MYDIR>.

   Even on UNIX and Multics, however, the argument given to MKD may not
   be suitable.  If it is a "relative" pathname (i.e., a pathname which
   is interpreted relative to the current directory), the user would
   need to be in the same current directory in order to reach the
   subdirectory.  Depending on the application, this may be
   inconvenient.  It is not very robust in any case.

   To solve these problems, upon successful completion of an MKD
   command, the server should return a line of the form:

   257<space>"<directory-name>"<space><commentary>




Bryan                    Expires August 7, 2011               [Page 137]

Internet-Draft           File Transfer Protocol            February 2011


   That is, the server will tell the user what string to use when
   referring to the created directory.  The directory name can contain
   any character; embedded double-quotes should be escaped by double-
   quotes (the "quote-doubling" convention).

   For example, a user connects to the directory /usr/dm, and creates a
   subdirectory, named pathname:


            CWD /usr/dm
            200 directory changed to /usr/dm
            MKD pathname
            257 "/usr/dm/pathname" directory created

   An example with an embedded double quote:


            MKD foo"bar
            257 "/usr/dm/foo""bar" directory created
            CWD /usr/dm/foo"bar
            200 directory changed to /usr/dm/foo"bar

   The prior existence of a subdirectory with the same name is an error,
   and the server must return an "access denied" error reply in that
   case.


            CWD /usr/dm
            200 directory changed to /usr/dm
            MKD pathname
            521-"/usr/dm/pathname" directory already exists;
            521 taking no action.

   The failure replies for MKD are analogous to its file creating
   cousin, STOR.  Also, an "access denied" return is given if a file
   name with the same name as the subdirectory will conflict with the
   creation of the subdirectory (this is a problem on UNIX, but
   shouldn't be one on TOPS-20).

   Essentially because the PWD command returns the same type of
   information as the successful MKD command, the successful PWD command
   uses the 257 reply code as well.

   SUBTLETIES

   Because these commands will be most useful in transferring subtrees
   from one machine to another, carefully observe that the argument to
   MKD is to be interpreted as a sub-directory of the current working



Bryan                    Expires August 7, 2011               [Page 138]

Internet-Draft           File Transfer Protocol            February 2011


   directory, unless it contains enough information for the destination
   host to tell otherwise.  A hypothetical example of its use in the
   TOPS-20 world:


            CWD <some.where>
            200 Working directory changed
            MKD overrainbow
            257 "<some.where.overrainbow>" directory created
            CWD overrainbow
            431 No such directory
            CWD <some.where.overrainbow>
            200 Working directory changed


            CWD <some.where>
            200 Working directory changed to <some.where>
            MKD <unambiguous>
            257 "<unambiguous>" directory created
            CWD <unambiguous>

   Note that the first example results in a subdirectory of the
   connected directory.  In contrast, the argument in the second example
   contains enough information for TOPS-20 to tell that the

   <unambiguous> directory is a top-level directory.  Note also that in
   the first example the user "violated" the protocol by attempting to
   access the freshly created directory with a name other than the one
   returned by TOPS-20.  Problems could have resulted in this case had
   there been an <overrainbow> directory; this is an ambiguity inherent
   in some TOPS-20 implementations.  Similar considerations apply to the
   RMD command.  The point is this: except where to do so would violate
   a host's conventions for denoting relative versus absolute pathnames,
   the host should treat the operands of the MKD and RMD commands as
   subdirectories.  The 257 reply to the MKD command must always contain
   the absolute pathname of the created directory.


Appendix C.  RFCs on FTP

   Bhushan, Abhay, "A File Transfer Protocol", RFC 114 (NIC 5823), MIT-
   Project MAC, 16 April 1971.

   Harslem, Eric, and John Heafner, "Comments on RFC 114 (A File
   Transfer Protocol)", RFC 141 (NIC 6726), RAND, 29 April 1971.

   Bhushan, Abhay, et al, "The File Transfer Protocol", RFC 172 (NIC
   6794), MIT-Project MAC, 23 June 1971.



Bryan                    Expires August 7, 2011               [Page 139]

Internet-Draft           File Transfer Protocol            February 2011


   Braden, Bob, "Comments on DTP and FTP Proposals", RFC 238 (NIC 7663),
   UCLA/CCN, 29 September 1971.

   Bhushan, Abhay, et al, "The File Transfer Protocol", RFC 265 (NIC
   7813), MIT-Project MAC, 17 November 1971.

   McKenzie, Alex, "A Suggested Addition to File Transfer Protocol", RFC
   281 (NIC 8163), BBN, 8 December 1971.

   Bhushan, Abhay, "The Use of "Set Data Type" Transaction in File
   Transfer Protocol", RFC 294 (NIC 8304), MIT-Project MAC, 25 January
   1972.

   Bhushan, Abhay, "The File Transfer Protocol", RFC 354 (NIC 10596),
   MIT-Project MAC, 8 July 1972.

   Bhushan, Abhay, "Comments on the File Transfer Protocol (RFC 354)",
   RFC 385 (NIC 11357), MIT-Project MAC, 18 August 1972.

   Hicks, Greg, "User FTP Documentation", RFC 412 (NIC 12404), Utah, 27
   November 1972.

   Bhushan, Abhay, "File Transfer Protocol (FTP) Status and Further
   Comments", RFC 414 (NIC 12406), MIT-Project MAC, 20 November 1972.

   Braden, Bob, "Comments on File Transfer Protocol", RFC 430 (NIC
   13299), UCLA/CCN, 7 February 1973.

   Thomas, Bob, and Bob Clements, "FTP Server-Server Interaction", RFC
   438 (NIC 13770), BBN, 15 January 1973.

   Braden, Bob, "Print Files in FTP", RFC 448 (NIC 13299), UCLA/CCN, 27
   February 1973.

   McKenzie, Alex, "File Transfer Protocol", RFC 454 (NIC 14333), BBN,
   16 February 1973.

   Bressler, Bob, and Bob Thomas, "Mail Retrieval via FTP", RFC 458 (NIC
   14378), BBN-NET and BBN-TENEX, 20 February 1973.

   Neigus, Nancy, "File Transfer Protocol", RFC 542 (NIC 17759), BBN, 12
   July 1973.

   Krilanovich, Mark, and George Gregg, "Comments on the File Transfer
   Protocol", RFC 607 (NIC 21255), UCSB, 7 January 1974.

   Pogran, Ken, and Nancy Neigus, "Response to RFC 607 - Comments on the
   File Transfer Protocol", RFC 614 (NIC 21530), BBN, 28 January 1974.



Bryan                    Expires August 7, 2011               [Page 140]

Internet-Draft           File Transfer Protocol            February 2011


   Krilanovich, Mark, George Gregg, Wayne Hathaway, and Jim White,
   "Comments on the File Transfer Protocol", RFC 624 (NIC 22054), UCSB,
   Ames Research Center, SRI-ARC, 28 February 1974.

   Bhushan, Abhay, "FTP Comments and Response to RFC 430", RFC 463 (NIC
   14573), MIT-DMCG, 21 February 1973.

   Braden, Bob, "FTP Data Compression", RFC 468 (NIC 14742), UCLA/CCN, 8
   March 1973.

   Bhushan, Abhay, "FTP and Network Mail System", RFC 475 (NIC 14919),
   MIT-DMCG, 6 March 1973.

   Bressler, Bob, and Bob Thomas "FTP Server-Server Interaction - II",
   RFC 478 (NIC 14947), BBN-NET and BBN-TENEX, 26 March 1973.

   White, Jim, "Use of FTP by the NIC Journal", RFC 479 (NIC 14948),
   SRI-ARC, 8 March 1973.

   White, Jim, "Host-Dependent FTP Parameters", RFC 480 (NIC 14949),
   SRI-ARC, 8 March 1973.

   Padlipsky, Mike, "An FTP Command-Naming Problem", RFC 506 (NIC
   16157), MIT-Multics, 26 June 1973.

   Day, John, "Memo to FTP Group (Proposal for File Access Protocol)",
   RFC 520 (NIC 16819), Illinois, 25 June 1973.

   Merryman, Robert, "The UCSD-CC Server-FTP Facility", RFC 532 (NIC
   17451), UCSD-CC, 22 June 1973.

   Braden, Bob, "TENEX FTP Problem", RFC 571 (NIC 18974), UCLA/CCN, 15
   November 1973.

   McKenzie, Alex, and Jon Postel, "Telnet and FTP Implementation -
   Schedule Change", RFC 593 (NIC 20615), BBN and MITRE, 29 November
   1973.

   Sussman, Julie, "FTP Error Code Usage for More Reliable Mail
   Service", RFC 630 (NIC 30237), BBN, 10 April 1974.

   Postel, Jon, "Revised FTP Reply Codes", RFC 640 (NIC 30843), UCLA/
   NMC, 5 June 1974.

   Harvey, Brian, "Leaving Well Enough Alone", RFC 686 (NIC 32481),
   SU-AI, 10 May 1975.

   Harvey, Brian, "One More Try on the FTP", RFC 691 (NIC 32700), SU-AI,



Bryan                    Expires August 7, 2011               [Page 141]

Internet-Draft           File Transfer Protocol            February 2011


   28 May 1975.

   Lieb, J., "CWD Command of FTP", RFC 697 (NIC 32963), 14 July 1975.

   Harrenstien, Ken, "FTP Extension: XSEN", RFC 737 (NIC 42217), SRI-KL,
   31 October 1977.

   Harrenstien, Ken, "FTP Extension: XRSQ/XRCP", RFC 743 (NIC 42758),
   SRI-KL, 30 December 1977.

   Lebling, P. David, "Survey of FTP Mail and MLFL", RFC 751, MIT, 10
   December 1978.

   Postel, Jon, "File Transfer Protocol Specification", RFC 765, ISI,
   June 1980.

   Mankins, David, Dan Franklin, and Buzz Owen, "Directory Oriented FTP
   Commands", RFC 775, BBN, December 1980.

   Padlipsky, Michael, "FTP Unique-Named Store Command", RFC 949, MITRE,
   July 1985.

   RFC 959 "File Transfer Protocol"

   RFC 1123 "Requirements for Internet Hosts -- Application and Support"

   RFC 1415 "FTP-FTAM Gateway Specification"

   RFC 1545 "FTP Operation Over Big Address Records (FOOBAR)"

   RFC 1579 "Firewall-Friendly FTP"

   RFC 1635 "How to Use Anonymous FTP"

   RFC 1639 "FTP Operation Over Big Address Records (FOOBAR)"

   RFC 2228 "FTP Security Extensions"

   RFC 2389 "Feature negotiation mechanism for the File Transfer
   Protocol"

   RFC 2428 "FTP Extensions for IPv6 and NATs"

   RFC 2577 "FTP Security Considerations"

   RFC 2585 "Internet X.509 Public Key Infrastructure Operational
   Protocols: FTP and HTTP"




Bryan                    Expires August 7, 2011               [Page 142]

Internet-Draft           File Transfer Protocol            February 2011


   RFC 2640 "Internationalization of the File Transfer Protocol"

   RFC 2773 "Encryption using KEA and SKIPJACK"

   RFC 3659 "Extensions to FTP"

   RFC 4217 "Securing FTP with TLS"

   RFC 4823 "FTP Transport for Secure Peer-to-Peer Business Data
   Interchange over the Internet"

   RFC 5797 "FTP Command and Extension Registry"


Appendix D.  Acknowledgements and Contributors

   This document is a compendium of various FTP RFCs and their errata,
   and most are quoted directly.  Where differences exist, they are to
   update the text to current references and make the text coherent as a
   whole.


Appendix E.  Changelog from RFC 959 and TODO

   Changelog from RFC 959.

      Incorporate [RFC0959] Errata.

      Incorporate FTP specific clarifications (Sec 4.1) from [RFC1123]
      "Requirements for Internet Hosts - Application and Support" into
      the various sections that it updated.

      Incorporate [RFC2389] "Feature negotiation mechanism for the File
      Transfer Protocol" at Section 4.1.4.

      Incorporate [RFC2428] "FTP Extensions for IPv6 and NATs" at
      Section 4.1.2.1.

      Incorporate [RFC2577] "FTP Security Considerations" in Section 10.

      Incorporate [RFC3659] "Extensions to FTP" Section 3 through
      Section 9 in Section 4.1.5 and its Section 2 into Section 2.

      Include abstract of [RFC4217] "Securing FTP with TLS" in
      Section 10.2.

      Update Appendix C to include all known FTP RFCs.




Bryan                    Expires August 7, 2011               [Page 143]

Internet-Draft           File Transfer Protocol            February 2011


      Use BCP 14/[RFC2119] key words in text from [RFC0959] sections.

      Partially include [RFC2228]: ONLY reply codes and reply type 6yz.

   TODO

      BCP 14/[RFC2119] key words incomplete.

      [RFC3659] references currently incomplete; also, [RFC3659]
      internal references to section 10 (which is not included in this
      draft) are not updated.

      Triage and include or reference other FTP RFCs: [RFC2228] (more
      reply codes and reply type 6yz), [RFC2640], 2773?, [RFC4217].

      File recently found errata to older RFCs.  Figure out if [RFC1123]
      errata should be filed against itself ("Updates: 959") or to
      [RFC0959] ("Updated by: 1123").

      Update BNF to ABNF.

      Should we organize commands in a standard format (subsections?)
      like EPRT/EPSV (Section 4.1.2.1), with separated ABNF?

      Should we update IP Address:Port description to ABNF?  (We could
      borrow from HOST).  Or standardize on one example:
      h1,h2,h3,h4,p1,p2 or A1,A2,A3,A4,a1,a2?

      Should we move the whole sentence that is Section 8 into
      Section 3.2?

      Should we deprecate features that are no longer common?

      Should we obsolete outdated RFCs (like 775, 1639) with
      "Obsoletes:"?

      Should we use old IPR value because we're using old text?

      Are the author listing/credits in compound document done
      correctly?  Some are deceased or inactive or may be otherwise hard
      to contact.










Bryan                    Expires August 7, 2011               [Page 144]

Internet-Draft           File Transfer Protocol            February 2011


Author's Address

   Anthony Bryan (editor)
   Pompano Beach, FL
   USA

   Email: anthonybryan@gmail.com
   URI:   http://www.metalinker.org











































Bryan                    Expires August 7, 2011               [Page 145]

