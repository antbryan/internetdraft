<?xml version="1.0" encoding="UTF-8"?><?rfc linefile="1:draft-bryan-metalinkhttp-07.xml"?>
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
<?rfc toc="yes" ?>
<?rfc tocdepth="3" ?>
<?rfc tocindent="yes" ?>
<?rfc symrefs="yes" ?>
<?rfc sortrefs="yes"?>
<?rfc iprnotified="no" ?>
<?rfc compact="yes" ?>
<?rfc comments="yes" ?>
<?rfc inline="yes" ?>
<!DOCTYPE rfc
  PUBLIC "" "rfc2629.dtd">
<rfc category="std" docName="draft-bryan-metalinkhttp-07" ipr="trust200902">
    <front>        
      <title abbrev="MetaLinkHeader: Mirrors and Checksums">MetaLinkHeader: Mirrors and Checksums in HTTP Headers</title>		
      <author initials="A." surname="Bryan" fullname="Anthony Bryan" role="editor">
	    <organization>Metalinker Project</organization>
	    <address>		
	      <email>anthonybryan@gmail.com</email>	
	      <uri>http://www.metalinker.org</uri>		
	    </address>
      </author>
	  <author initials="N." surname="McNab" fullname="Neil McNab">
        <organization>Metalinker Project</organization>
        <address>
          <email>neil@nabber.org</email>
          <uri>http://www.nabber.org</uri>
        </address>
      </author>
	  	  <author initials="H." surname="Nordstrom" fullname="Henrik Nordstrom">
        <organization></organization>
        <address>
          <email>henrik@henriknordstrom.net</email>
          <uri>http://www.henriknordstrom.net/</uri>
        </address>
      </author>
	<date month="September" year="2009"/>        

      <abstract>
	<t>This document specifies MetaLinkHeader: Mirrors and Checksums in HTTP Headers, an alternative to the Metalink XML-based download description format. 
    MetaLinkHeader describes multiple download locations (mirrors), Peer-to-Peer, checksums, digital signatures, and other information using existing standards. Clients can transparently 
    use this information to make file transfers more robust and reliable.</t>
      </abstract>    
	  
  </front>    

  <middle>
    <section title="Introduction">
      
      <t>MetaLinkHeader is an alternative to Metalink, usually an XML-based document format <xref target="draft-bryan-metalink"/>. 
      MetaLinkHeader attempts to provide as much functionality as the Metalink/XML format by using existing standards such as Web Linking <xref target="draft-nottingham-http-link-header"/>, 
      Instance Digests in HTTP <xref target="RFC3230"/>, and ETags. MetaLinkHeader is used to list
      information about a file to be downloaded. This includes lists of multiple URIs (mirrors), Peer-to-Peer information, checksums, and digital signatures.</t>
      
      <t>Identical copies of a file are frequently accessible in multiple locations on the Internet over a variety of protocols (FTP, HTTP, and Peer-to-Peer).
      In some cases, Users are shown a list of these multiple download locations (mirrors) and must manually select a single one on the basis of geographical location, priority, or bandwidth.
      This distributes the load across multiple servers. At times, individual servers can be slow, outdated, or unreachable, but this can not be determined until the download has been initiated.
      This can lead to the user canceling the download and needing to restart it. During downloads, errors in transmission can corrupt the file.
      There are no easy ways to repair these files. For large downloads this can be extremely troublesome.
      Any of the number of problems that can occur during a download lead to frustration on the part of users.</t>

      <t>All the information about a download, including mirrors, checksums, digital signatures, and more can be transferred in coordinated HTTP Headers.
      This Metalink transfers the knowledge of the download server (and mirror database) to the client. Clients can fallback to other mirrors if the current one has an issue. With this knowledge, 
      the client is enabled to work its way to a successful download even under adverse circumstances. 
      All this is done transparently to the user and the download is much more reliable and efficient.
      In contrast, a traditional HTTP redirect to a mirror conveys only extremely minimal information - one link to one server, and there is no provision in the HTTP protocol to handle failures.
      Other features that some clients provide include multi-source downloads, where portions of a file are downloaded from multiple mirrors (and optionally, Peer-to-Peer) simultaneously, 
      which frequently results in a faster download.</t>

      <t>[[ Discussion of this draft should take place on IETF HTTP WG mailing list at ietf-http-wg@w3.org or the Metalink discussion mailing list
   located at metalink-discussion@googlegroups.com. To join the list, visit
   http://groups.google.com/group/metalink-discussion . ]]</t>
      <section title="Examples"><t><figure> 
	  <preamble>A brief Metalink server response with checksum, mirrors, .metalink, and OpenPGP signature:</preamble>
	  
	  <artwork type="example">
Link: &lt;http://www2.example.com/example.ext&gt;; rel="duplicate"
Link: &lt;ftp://ftp.example.com/example.ext&gt;; rel="duplicate"
Link: &lt;http://example.com/example.ext.torrent&gt;; rel="describedby";
type="application/x-bittorrent"
Link: &lt;http://example.com/example.ext.metalink&gt;; rel="describedby";
type="application/metalink4+xml"
Link: &lt;http://example.com/example.ext.asc&gt;; rel="describedby";
type="application/pgp-signature"
Digest: SHA=thvDyvhfIqlvFe+A9MYgxAfm1q5=
</artwork></figure></t>
      </section> 
      <section title="Notational Conventions"> 

	<t>This specification describes conformance of MetaLinkHeader.</t>
     

	<t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
	"SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
	document are to be interpreted as described in BCP 14, <xref target="RFC2119"/>, as scoped to those conformance targets.</t>

      </section>
    </section>

    <section title="Requirements" anchor="req">
	  <t>In this context, "MetaLink" refers to a MetaLinkHeader which consists of mirrors and checksums in HTTP Headers as described in this document. "Metalink/XML" refers to the XML format described in <xref target="draft-bryan-metalink"/>.</t>
      <t>Metalink servers are HTTP servers that MUST have lists of mirrors and use the Link header <xref target="draft-nottingham-http-link-header"/> to indicate them. They also MUST
	  provide checksums of files via Instance Digests in HTTP <xref target="RFC3230"/>, whether requested or not. Mirror and checksum information provided by the originating Metalink server MUST be considered authoritative. Metalink servers and their associated mirror servers
      SHOULD all share the same ETag policy (ETag Synchronization), i.e. based on the file contents (checksum) and not server-unique filesystem metadata. The emitted ETag may be implemented the same as the Instance Digest for simplicity.</t>

	  <t>Mirror servers are typically FTP or HTTP servers that "mirror" another server. That is, they provide identical copies of (at least some) files that are also on the mirrored server. 
      Mirror servers MAY be Metalink servers. Mirror servers MUST support serving partial content. Mirror servers SHOULD support Instance Digests in HTTP <xref target="RFC3230"/>. Optimally, HTTP mirror servers will share the same ETag policy as the Metalink server and provide Instance Digests.</t>

      <t>Metalink clients use the mirrors provided by a Metalink server with Link header <xref target="draft-nottingham-http-link-header"/>. Metalink clients MUST support HTTP and MAY support FTP, BitTorrent, 
      or other download methods. Metalink clients MUST switch downloads from one mirror to another if the one mirror becomes unreachable. Metalink clients are RECOMMENDED to support multi-source, or parallel, 
      downloads, where portions of a file are downloaded from multiple mirrors simultaneously (and optionally, from Peer-to-Peer sources). Metalink clients MUST support Instance Digests in HTTP <xref target="RFC3230"/> by 
      requesting and verifying checksums. Metalink clients MAY make use of digital signatures if they are offered.</t>
	  
	  </section>
	
    <section title="Mirrors / Multiple Download Locations" anchor="mirrors">
      <t>Mirrors are specified with the Link header <xref target="draft-nottingham-http-link-header"/> and a relation type of "duplicate" as defined in <xref target="duplicate"/>.</t>

<t><figure> 
	  <preamble>A brief Metalink server response with two mirrors only:</preamble>	  
	  <artwork type="example">
Link: &lt;http://www2.example.com/example.ext&gt;; rel="duplicate"; 
pri=1; pref=1
Link: &lt;ftp://ftp.example.com/example.ext&gt;; rel="duplicate"; pri=2
</artwork></figure></t>

      <t>Mirror servers are listed in order of priority or have a "pri" value, where mirrors with lower values are used first.</t>
	  
	  <t>There are two types of mirror servers: preferred and normal. Optimally, HTTP mirror servers will share the same ETag policy as the Metalink server, provide Instance Digests, or both. These mirrors are preferred, and make it possible to detect early on, before data is transferred, if the file requested matches the desired file. Preferred HTTP mirror servers have a "pref" value of 1.</t>
	  
	  <t>[[Some organizations have many mirrors. Only send a few mirrors, or only use the Link header if Want-Digest is used?]]</t>

	  </section>

    <section title="Peer-to-Peer Descriptions / Metainfo" anchor="p2p">
      <t>Ways to download a file over Peer-to-Peer networks are specified with the Link header <xref target="draft-nottingham-http-link-header"/> and a relation type of "describedby" and a type parameter hat indicates
   the MIME type of the metadata available at the IRI.</t>
<t><figure> 
	  <preamble>A brief Metalink server response with .torrent and .metalink:</preamble>	
	  <artwork type="example">
Link: &lt;http://example.com/example.ext.torrent&gt;; rel="describedby";
type="application/x-bittorrent"
Link: &lt;http://example.com/example.ext.metalink&gt;; rel="describedby";
type="application/metalink4+xml"
</artwork></figure></t>
	
    </section>

    <section title="OpenPGP Signatures" anchor="openpgp">
      <t>OpenPGP signatures are specified with the Link header <xref target="draft-nottingham-http-link-header"/> and a relation type of "describedby" and a type parameter of "application/pgp-signature".</t>
<t><figure> 
	  <preamble>A brief Metalink server response with OpenPGP signature only:</preamble>
	  <artwork type="example">
Link: &lt;http://example.com/example.ext.asc&gt;; rel="describedby";
type="application/pgp-signature"
</artwork></figure></t>
    
    </section>


    <section title="Checksums of Whole Files" anchor="wholechecksums">
	
	<t>Metalink servers MUST provide Instance Digests in HTTP <xref target="RFC3230"/> for files they describe with mirrors. Mirror servers SHOULD as well.</t>
	
<t><figure> 
	  <preamble>A brief Metalink server response with checksum:</preamble>	
	  <artwork type="example">
Digest: SHA=thvDyvhfIqlvFe+A9MYgxAfm1q5=
</artwork></figure></t>


    </section>

    <section title="Client / Server Multi-source Download Interaction" anchor="clientserver">
      <t>Metalink clients begin a download with a standard HTTP <xref target="RFC2616"/> GET request to the Metalink server. A Range limit is optional, not required.</t>
<t><figure> 
	  <artwork type="example">
GET /distribution/example.ext HTTP/1.1
Host: www.example.com
</artwork></figure></t>

<t>Alternatively, Metalink clients can use a HEAD request to discover mirrors via Link headers. After that, the client follows with a GET request as usual.</t>

<t>The Metalink server responds with the data and these headers:

<figure> 
	  <artwork type="example">
HTTP/1.1 200 OK
Accept-Ranges: bytes
Content-Length: 14867603
Content-Type: application/x-cd-image
Etag: "thvDyvhfIqlvFe+A9MYgxAfm1q5="
Link: &lt;http://www2.example.com/example.ext&gt;; rel="duplicate"
Link: &lt;ftp://ftp.example.com/example.ext&gt;; rel="duplicate"
Link: &lt;http://example.com/example.ext.torrent&gt;; rel="describedby";
type="application/x-bittorrent"
Link: &lt;http://example.com/example.ext.metalink&gt;; rel="describedby";
type="application/metalink4+xml"
Link: &lt;http://example.com/example.ext.asc&gt;; rel="describedby";
type="application/pgp-signature"
Digest: SHA=thvDyvhfIqlvFe+A9MYgxAfm1q5=
</artwork></figure></t>

<t>From the Metalink server response the client learns the following metadata
about the requested object, in addition to also starting to receive the
object:</t>
<t>
<list style="symbols">
<t>Mirror profile link.</t>
<t>Instance Digest.</t>
<t>Object size.</t>
<t>ETag.</t>
<t>Peer-to-peer information.</t>
<t>Digital signature.</t>
<t>Metalink/XML, which can include partial file checksums to repair a file.</t>
</list></t>


<t>If the object is large and gets delivered slower than expected then the Metalink client starts a number of parallel ranged downloads (one per selected mirror server other than the
first) using mirrors provided by the Link header with "duplicate" relation type, using the location of the original GET request in the "Referer" header field. 
If no Range limit was given in the original request then work from the tail of the object (the first request is still running and will eventually catch up), otherwise continue after the range requested in the first request.</t>
<t>If ETags are coordinated between mirrors, If-Match conditions based on the ETag SHOULD be used to quickly detect out-of-date mirrors by using the ETag from the Metalink server response. If no indication of ETag syncronisation/knowledge is given then If-Match
should not be used, and optimally there will be an Instance Digest in the mirror response which we can use to detect a mismatch early, and if not then a mismatch won't be detected until the completed object is verified.

One of the client requests to a mirror server:

<figure> 
	  <artwork type="example">
GET /example.ext HTTP/1.1
Host: www2.example.com
Range: bytes=7433802-
If-Match: "thvDyvhfIqlvFe+A9MYgxAfm1q5="
Referer: http://www.example.com/distribution/example.ext
</artwork></figure></t>



<t>The mirror servers respond with a 206 Partial Content HTTP status code and appropriate "Content-Length" and "Content Range" header fields. The mirror server response, with data, to the above request:

<figure> 
	  <artwork type="example">
HTTP/1.1 206 Partial Content
Accept-Ranges: bytes
Content-Length: 7433801
Content-Range: bytes 7433802-14867602/14867603
Etag: "thvDyvhfIqlvFe+A9MYgxAfm1q5="
Digest: SHA=thvDyvhfIqlvFe+A9MYgxAfm1q5=
</artwork></figure></t>

<t>If the first request was not Range limited then abort it by closing the connection when it catches up with the other parallel downloads of the same object.</t>

<t>Downloads from mirrors that do not have the same file size as the Metalink server MUST be aborted.</t>

<t>Once the download has completed, the Metalink client MUST verify the checksum of the file.</t>

<section title="Early File Mismatch Detection with Strong ETag or Instance Digest from Mirrors">

<t>In HTTP terms, the requirement is that merging of ranges from multiple
responses must be verified with a strong validator, which in this
context is the same as either Instance Digest or a strong ETag.
In most cases it is sufficient that the Metalink server provides
mirrors and Instance Digest information, but operation will be
more robust and efficient if the mirror servers do implement a synchronized
ETag as well. In fact, the emitted ETag
may be implemented the same as the Instance Digest for simplicity,
but there is no need to specify how the ETag is generated, just that it needs
to be shared among the mirror servers.
If the mirror server provides neither synchronized ETag or Instance Digest, then early detection of
mismatches is not possible unless file length also differs. Finally, the error is still detectable, after the download has completed, when the merged response is verified.</t>

<t>ETag can not be used for verifying the integrity of the received
content. But it is a guarantee issued by the Metalink server that the content is
correct for that ETag. And if the ETag given by the mirror server matches
the ETag given by the master server, then we have a chain of trust where the master server
authorizes these responses as valid for that object.</t>

<t>This guarantees that a mismatch will be detected by using only the synchronized ETag from a master server and mirror server, even alerted by the mirror servers themselves by responding
with an error, preventing accidental merges of ranges from different
versions of files with the same name. This even includes many malicious attacks
where the data on the mirror has been replaced by some other file, but
not all.</t>

<t>Synchronized ETag can not strictly protect against malicious attacks or server or
network errors replacing content, but neither can Instance Digest on the
mirror servers as the attacker most certainly can make the server
seemingly respond with the expected Instance Digest even if the file
contents have been modified, just as he can with ETag, and the same
for various system failures also causing bad data to be returned. The Metalink client
has to rely on the Instance Digest returned by the Metalink master server in the
first response for the verification of the downloaded object as a whole.</t>

<t>If the mirror servers do return an Instance Digest, then that is a bonus,
just as having them return the right set of Link headers is. The set of
trusted mirrors doing that can be substituted as master servers
accepting the initial request if one likes.</t>

<t>The benefit of having slave mirror servers (those not trusted as
masters) return Instance Digest is that the client then can detect
mismatches early even if ETag is not used. Both ETag and slave mirror
Instance Digest do provide value, but just one is sufficient for early
detection of mismatches. If none is provided then early detection of
mismatches is not possible unless the file length also differs, but the
error is still detected when the merged response is verified.</t>

</section>

<section title="Error Recovery">

<t>If the object checksum does not match the Instance Digest then fetch the Metalink/XML or other recovery profile link, where partial file checksums can be found,
allowing detection of which server returned bad information.
If the Instance Digest computation does not match then the client needs
to fetch the partial file checksums and from there figure out what of
the downloaded data can be recovered and what needs to be fetched again.
If no partial checksums are available, then the client MUST fetch the complete object from
a trusted Metalink server.</t>

<t>Partial file checksums can be used to detect errors during the download.</t>

</section>


    </section>
	


	<section title="IANA Considerations" anchor="IANA">

	<t>Accordingly, IANA has made the following registrations.</t>
	
    <section title="Link Relation Type Registration: &#34;duplicate&#34;" anchor="duplicate">
<t>o  Relation Name: duplicate</t>
<t>o  Description: Refers to a resource whose available representations are byte-for-byte identical with the corresponding representations of the context IRI.</t>
<t>o  Reference: This specification.</t>
<t>o  Notes: This relation is for static resources. That is, an HTTP GET request on any duplicate will return the same representation. It does not make sense for dynamic or POSTable resources and should not be used for them.</t>

    </section>
	<section title="Hypertext Transfer Protocol (HTTP) Digest Algorithm Values Registration">
	
	<t>This document makes use of the IANA registry named "Hypertext Transfer Protocol (HTTP) Digest Algorithm Values" specified in <xref target="RFC3230"/>.</t>

   <t><list>
   <t>Digest Algorithm: SHA-224</t>
   <t>Description: The SHA-224 algorithm <xref target="SHS"/>. The output of this algorithm is encoded using the base64 encoding <xref target="RFC2045"/>.</t>
   <t>Reference: <xref target="SHS"/> <xref target="RFC2045"/></t>
   </list></t>
<t></t>
   <t><list>   
   <t>Digest Algorithm: SHA-256</t>
   <t>Description: The SHA-256 algorithm <xref target="SHS"/>. The output of this algorithm is encoded using the base64 encoding <xref target="RFC2045"/>.</t>
   <t>Reference: <xref target="SHS"/> <xref target="RFC2045"/></t>
   </list></t>
   
   <t><list>
   <t>Digest Algorithm: SHA-384</t>
   <t>Description: The SHA-384 algorithm <xref target="SHS"/>. The output of this algorithm is encoded using the base64 encoding <xref target="RFC2045"/>.</t>
   <t>Reference: <xref target="SHS"/> <xref target="RFC2045"/></t>
   </list></t>
   
   <t><list>
   <t>Digest Algorithm: SHA-512</t>
   <t>Description: The SHA-512 algorithm <xref target="SHS"/>. The output of this algorithm is encoded using the base64 encoding <xref target="RFC2045"/>.</t>
   <t>Reference: <xref target="SHS"/> <xref target="RFC2045"/></t>   
   </list></t>

    </section>
	</section>

	  <section title="Security Considerations">

	    <section title="URIs and IRIs">

	      <t>Metalink clients handle URIs and IRIs. See Section 7 of <xref target="RFC3986"/> and Section 8 of <xref target="RFC3987"/> for security
          considerations related to their handling and use.</t>

	    </section>

	    <section title="Spoofing">

	      <t>There is potential for spoofing attacks where the attacker publishes Metalinks with false information.
          In that case, this could deceive unaware downloaders that they are downloading a malicious or worthless file. Also, malicious publishers could attempt a distributed denial of service attack by inserting unrelated IRIs into Metalinks.</t>

	    </section>	
		
	    <section title="Cryptographic Hashes">

	      <t>Currently, some of the digest values defined in Instance Digests in HTTP <xref target="RFC3230"/> are considered insecure. 
          These include the whole Message Digest family of algorithms which are not suitable for cryptographically strong verification. Malicious people could provide files that appear to be 
          identical to another file because of a collision, i.e. the weak cryptographic hashes of the intended file and a substituted malicious file could match.</t>
          <t>If a Metalink contains whole file hashes as described in <xref target="wholechecksums"/>, it SHOULD include "sha" which is SHA-1, as specified in <xref target="RFC3174"/>, or stronger. It MAY also include other hashes.</t>

	    </section>	
		
		
	    <section title="Signing">

	      <t>Metalinks should include digital signatures, as described in <xref target="openpgp"/>.</t>

	      <t>Digital signatures provide authentication, message integrity, and non-repudiation with proof of origin.</t>

	    </section>

	  </section>
    
	</middle> 

	<back> 
	  
	  <references title="Normative References">
	  



<reference anchor="RFC2045">

<front>
<title>Multipurpose Internet Mail Extensions (MIME) Part One: Format of Internet Message Bodies</title>
<author initials="N." surname="Freed" fullname="N. Freed">
<organization/></author>
<author initials="N." surname="Borenstein" fullname="N. Borenstein">
<organization/></author>
<date year="1996" month="November"/></front>

<seriesInfo name="RFC" value="2045"/>
</reference>


<reference anchor="RFC2119">

<front>
<title abbrev="RFC Key Words">Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials="S." surname="Bradner" fullname="Scott Bradner">
<organization>Harvard University</organization>
<address>
<postal>
<street>1350 Mass. Ave.</street>
<street>Cambridge</street>
<street>MA 02138</street></postal>
<phone>- +1 617 495 3864</phone>
<email>sob@harvard.edu</email></address></author>
<date year="1997" month="March"/>
<area>General</area>
<keyword>keyword</keyword>
<abstract>
<t>
   In many standards track documents several words are used to signify
   the requirements in the specification.  These words are often
   capitalized.  This document defines these words as they should be
   interpreted in IETF documents.  Authors who follow these guidelines
   should incorporate this phrase near the beginning of their document:

<list>
<t>
      The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL
      NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED",  "MAY", and
      "OPTIONAL" in this document are to be interpreted as described in
      RFC 2119.
</t></list></t>
<t>
   Note that the force of these words is modified by the requirement
   level of the document in which they are used.
</t></abstract></front>

<seriesInfo name="BCP" value="14"/>
<seriesInfo name="RFC" value="2119"/>
</reference>

<reference anchor="RFC2616">

<front>
<title>Hypertext Transfer Protocol -- HTTP/1.1</title>
<author initials="R." surname="Fielding" fullname="R. Fielding">
<organization/></author>
<author initials="J." surname="Gettys" fullname="J. Gettys">
<organization/></author>
<author initials="J." surname="Mogul" fullname="J. Mogul">
<organization/></author>
<author initials="H." surname="Frystyk" fullname="H. Frystyk">
<organization/></author>
<author initials="L." surname="Masinter" fullname="L. Masinter">
<organization/></author>
<author initials="P." surname="Leach" fullname="P. Leach">
<organization/></author>
<author initials="T." surname="Berners-Lee" fullname="T. Berners-Lee">
<organization/></author>
<date year="1999" month="June"/></front>

<seriesInfo name="RFC" value="2616"/>
</reference>

<reference anchor="RFC3174">

<front>
<title>US Secure Hash Algorithm 1 (SHA1)</title>
<author initials="D." surname="Eastlake" fullname="D. Eastlake">
<organization/></author>
<author initials="P." surname="Jones" fullname="P. Jones">
<organization/></author>
<date year="2001" month="September"/></front>

<seriesInfo name="RFC" value="3174"/>
</reference> 

<reference anchor="RFC3230">

<front>
<title>Instance Digests in HTTP</title>
<author initials="J." surname="Mogul" fullname="J. Mogul">
<organization/></author>
<author initials="A." surname="Van Hoff" fullname="A. Van Hoff">
<organization/></author>
<date year="2002" month="January"/></front>

<seriesInfo name="RFC" value="3230"/>
</reference> 

<reference anchor="RFC3986">

<front>
<title>Uniform Resource Identifier (URI): Generic Syntax</title>
<author initials="T." surname="Berners-Lee" fullname="T. Berners-Lee">
<organization/></author>
<author initials="R." surname="Fielding" fullname="R. Fielding">
<organization/></author>
<author initials="L." surname="Masinter" fullname="L. Masinter">
<organization/></author>
<date year="2005" month="January"/></front>

<seriesInfo name="STD" value="66"/>
<seriesInfo name="RFC" value="3986"/>
</reference>
 

<reference anchor="RFC3987">

<front>
<title>Internationalized Resource Identifiers (IRIs)</title>
<author initials="M." surname="Duerst" fullname="M. Duerst">
<organization/></author>
<author initials="M." surname="Suignard" fullname="M. Suignard">
<organization/></author>
<date year="2005" month="January"/></front>

<seriesInfo name="RFC" value="3987"/>
</reference>


<reference anchor="draft-nottingham-http-link-header">
  <front>
    <title abbrev="Web Linking">Web Linking</title>
    <author initials="M." surname="Nottingham" fullname="Mark Nottingham">
	  <organization></organization>
      <address><email>mnot@mnot.net</email></address>
    </author>
    <date month="July" year="2009"/>
  </front>
  <seriesInfo name="Internet-Draft" value="draft-nottingham-http-link-header-06"/>
</reference>

<reference anchor="SHS" target="http://csrc.nist.gov/publications/fips/fips180-3/fips180-3_final.pdf">
<front>
<title>Secure Hash Standard</title>

<author>

    <organization>National Institute of Standards and Technology (NIST)</organization>
</author>



<date year="2008" month="October"></date>
</front>

<seriesInfo name="FIPS PUB" value="180-3"></seriesInfo>
</reference>


	  </references>
	  
	  <references title="Informative References">

<reference anchor="draft-bryan-metalink">
  <front>
      <title abbrev="Metalink Download Description Format">The Metalink Download Description Format</title>		
      <author initials="A." surname="Bryan" fullname="Anthony Bryan" role="editor">
	    <organization>Metalinker Project</organization>
	    <address>		
	      <email>anthonybryan@gmail.com</email>	
	      <uri>http://www.metalinker.org</uri>		
	    </address>
      </author>
      <author initials="T." surname="Tsujikawa" fullname="Tatsuhiro Tsujikawa">
        <organization>Metalinker Project</organization>
        <address>
          <email>tatsuhiro.t@gmail.com</email>
          <uri>http://aria2.sourceforge.net</uri>
        </address>
      </author>
      <author initials="N." surname="McNab" fullname="Neil McNab">
        <organization>Metalinker Project</organization>
        <address>
          <email>nabber00@gmail.com</email>
          <uri>http://www.nabber.org</uri>
        </address>
      </author>
      <author initials="P." surname="Poeml" fullname="Peter Poeml">
        <organization>Novell, Inc.</organization>
        <address>
          <email>info@mirrorbrain.org</email>
          <uri>http://www.mirrorbrain.org/</uri>
        </address>
      </author>
    <date month="August" year="2009"/>
  </front>
  <seriesInfo name="Internet-Draft" value="draft-bryan-metalink-16"/>
</reference>

	    </references> 

	    <section title="Acknowledgements and Contributors">
		  <t>Thanks to the Metalink community, Mark Nottingham, Daniel Stenberg, Tatsuhiro Tsujikawa, Peter Poeml, Matt Domsch, and Alan Ford.</t>
    

	    </section> 

	    <section title="Comparisons to Similar Options (to be removed by RFC Editor before publication)">
		<t>This draft, compared to the Metalink/XML format <xref target="draft-bryan-metalink"/> :</t>
        <t>
	    <list style="symbols">

	      <t>(+) Reuses existing HTTP standards without defining anything new besides a Link Relation Type. It's more of a collection/coordinated feature set.</t>
		  <t>(?) The existing standards don't seem to be widely implemented.</t>
	      <t>(+) No XML dependency.</t>
		  <t>(?) Existing Metalink/XML clients can be easily converted to support this as well.</t>
		  <t>(-?) Tied to HTTP, not as generic. FTP/P2P clients won't be using it unless they also support HTTP, unlike Metalink/XML.</t>
	      <t>(---) Requires changes to server software.</t>
	      <t>(+) Coordination of mirror servers is preferred, but not required. Coordination may be difficult or impossible unless you are in control of all servers on the mirror network.</t>
	      <t>(-) Requires server-side support. Metalink/XML can be created by user (or server, but server component/changes not required).</t>
		  <t>(-) Also, Metalink/XML files are easily mirrored on all servers. Even if usage in that case is not as transparent, it still gives access to users at all mirrors (FTP included) to all download information with no changes needed to the server.</t>
	      <t>(-) Not portable/archivable/emailable. Metalink/XML is used to import/export transfer queues. Not as easy for search engines to index?</t>
	      <t>(-) No way to show mirror geographical location (yet).</t>
	      <t>(-) Not as rich metadata.</t>
	      <t>(-) Not able to add multiple files to a download queue or create directory structure.</t>
	    </list></t>

		<t>draft-ford-http-multi-server compared to this draft :</t>
        <t>
	    <list style="symbols">

	      <t>(+) Plans to define mirrors for whole directories.</t>
	      <t>(-?) Defines new headers. Doesn't reuse existing standards.</t>
	      <t>(---) Requires changes to server software.</t>
	      <t>(---) Requires coordination of all mirror servers, which may be difficult or impossible unless you are in control of all servers on the mirror network.</t>
		  <t>(---) Doesn't tie in p2p.</t>
	      <t>(-) No way to show mirror/p2p priority or geographical location (yet).</t>
	    </list></t>
		
		
	    </section>

	    <section title="Document History (to be removed by RFC Editor before publication)">
		<t>[[ to be removed by the RFC editor before publication as an RFC. ]]</t>
		<t>Known issues concerning this draft:
	    <list style="symbols"> 
	      
	      <t>Use of Link header to describe Mirrors. Only send a few mirrors with Link header, or only send them if Want-Digest is used? Some organizations have many mirrors.</t>
		  <t>A way to differentiate between mirrors that have synchronized ETags and those that don't.</t>
		  <t>Do we want a way to show that whole directories are mirrored, instead of individual files?</t>
		  <t>Need an official MIME type for .torrent files or allow "application/x-bittorrent"?</t>
	    </list></t>

<t>-07 : September , 2009.
	    
	    <list style="symbols">

	      <t>Preferred mirror servers.</t>
	    </list></t>

<t>-06 : September 24, 2009.
	    
	    <list style="symbols">

	      <t>Add Mismatch Detection, Error Recovery, and Digest Algorithm values.</t>
		  <t>Remove Content-MD5 and Want-Digest.</t>
	    </list></t>
		
<t>-05 : September 19, 2009.
	    
	    <list style="symbols">

	      <t>ETags, preferably matching the Instance Digests.</t>
	    </list></t>
		  
<t>-04 : September 17, 2009.
	    
	    <list style="symbols">

	      <t>Temporarily remove .torrent.</t>
	    </list></t>

<t>-03 : September 16, 2009.
	    
	    <list style="symbols">

	      <t>Mention HEAD request, negotiate mirrors if Want-Digest is used.</t>
	    </list></t>

<t>-02 : September 6, 2009.
	    
	    <list style="symbols">

	      <t>Content-MD5 for partial file checksums.</t>
	    </list></t>

<t>-01 : September 1, 2009.
	    
	    <list style="symbols">

	      <t>Link Relation Type Registration: "duplicate"</t>
	    </list></t>

<t>-00 : August 24, 2009.
	    
	    <list style="symbols">

	      <t>Initial draft.</t>
	    </list></t>
		
	    </section>
	  </back> 
	</rfc>