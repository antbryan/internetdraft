<?xml version="1.0" encoding="UTF-8"?><?rfc linefile="1:draft-bryan-metalink-29.xml"?>
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
<?rfc toc="yes" ?>
<?rfc tocdepth="3" ?>
<?rfc tocindent="yes" ?>
<?rfc symrefs="yes" ?>
<?rfc sortrefs="yes"?>
<?rfc iprnotified="no" ?>
<?rfc compact="yes" ?>
<?rfc comments="yes" ?>
<?rfc inline="yes" ?>
<!DOCTYPE rfc
  PUBLIC "" "rfc2629.dtd">
<rfc category="std" docName="draft-bryan-metalink-29" ipr="trust200902">
    <front>        
      <title abbrev="Metalink Download Description Format">The Metalink Download Description Format</title>		
      <author initials="A." surname="Bryan" fullname="Anthony Bryan">
	    <organization></organization>
	    <address>
		  <postal>
			<street></street>
		    <city>Pompano Beach</city>
			<region>FL</region>
			<country>USA</country>
		  </postal>
	      <email>anthonybryan@gmail.com</email>	
	      <uri>http://www.metalinker.org</uri>		
	    </address>
      </author>
      <author initials="T." surname="Tsujikawa" fullname="Tatsuhiro Tsujikawa">
        <organization></organization>
        <address>
          <email>tatsuhiro.t@gmail.com</email>
          <uri>http://aria2.sourceforge.net</uri>
        </address>
      </author>
      <author initials="N." surname="McNab" fullname="Neil McNab">
        <organization></organization>
        <address>
          <email>neil@nabber.org</email>
          <uri>http://www.nabber.org</uri>
        </address>
      </author>
      <author initials="P." surname="Poeml" fullname="Peter Poeml">
        <organization>Novell, Inc.</organization>
        <address>
          <email>poeml@mirrorbrain.org</email>
          <uri>http://www.mirrorbrain.org/</uri>
        </address>
      </author>
	<date month="February" year="2010"/>        

      <abstract>
	<t>This document specifies Metalink, an XML-based download description
		format. Metalink describes download locations
		(mirrors), cryptographic hashes, and other information. Clients can
		transparently use this information to reliably transfer
		files.</t>
      </abstract>    
	  
  </front>    

  <middle>
    <section title="Introduction">

      <t>Metalink is a document format based on Extensible Markup Language (XML) that describes a file or list
      of files to be downloaded from a server. Metalinks can list a number of
      files, each with an extensible set of attached metadata. 
      Each listed file can have a description, multiple cryptographic hashes, and a list of Uniform Resource Identifiers (URIs) that it is 
      available from.</t>

      <t>Often, identical copies of a file are accessible in multiple locations
      on the Internet over a variety of protocols, such as File Transfer Protocol (FTP), Hypertext Transfer Protocol (HTTP), and
      Peer-to-Peer (P2P).  In some cases, users are shown a list of these multiple
      download locations (mirror servers) and must manually select one based on
      geographical location, priority, or bandwidth.  This is done to distribute
      the load across multiple servers, and to give human users the opportunity
      to choose a download location that they expect to work best for them.</t>
	  
      <t>At times, individual servers can be
      slow, outdated, or unreachable, but this can not be determined until the
      download has been initiated.  This can lead to the user canceling the
      download and needing to restart it. During downloads, errors in
      transmission can corrupt the file.  There are no easy ways to repair
      these files. For large downloads this can be especially troublesome.  Any
      of the number of problems that can occur during a download lead to
      frustration on the part of users, and bandwidth wasted with retransmission.</t>

      <t>Knowledge about availability of a download on mirror servers can be
      acquired and maintained by the operators of the origin server, or by a third
      party.  This knowledge, together with cryptographic hashes,
      digital signatures, and more, can be stored in a machine-readable Metalink
      file.  The Metalink file can transfer this knowledge to the user agent,
      which can peruse it in automatic ways or present the information to a human user. 
      User agents can fall back to alternate
      mirrors if the current one has an issue.  Thereby, clients
      are enabled to work their way to a successful download even under adverse
      circumstances.  All this can be done transparently to the human user and the
      download is much more reliable and efficient.  In contrast, a traditional
      HTTP redirect to one mirror conveys only comparatively minimal information -
      a referral to a single server, and there is no provision in the HTTP protocol to
      handle failures.</t>

      <t>Other features that some clients provide include multi-source
      downloads, where chunks of a file are downloaded from multiple mirrors
      (and optionally, Peer-to-Peer) simultaneously, which frequently results
      in a faster download.  Metalinks can leverage HTTP, FTP and Peer-to-Peer
      protocols together, because regardless over which protocol the Metalink
      was obtained, it can make a resource accessible through other protocols.
      If the Metalink was obtained from a trusted source, included verification
      metadata can solve trust issues when downloading files from replica
      servers operated by third parties.  Metalinks also provide structured
      information about downloads that can be indexed by search engines.</t>

      <t>[[ Discussion of this draft should take place on
      apps-discuss@ietf.org. Past discussion has gone on at the Metalink
      discussion mailing list located at metalink-discussion@googlegroups.com /
      http://groups.google.com/group/metalink-discussion . ]]</t>

      <section title="Examples"><t><figure> 
	  <preamble>A brief, Metalink Document that describes a single file:</preamble>
	  
	  <artwork type="example">
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;metalink xmlns="urn:ietf:params:xml:ns:metalink"&gt;
  &lt;file name="example.ext"&gt;
    &lt;size&gt;14471447&lt;/size&gt;
    &lt;url&gt;ftp://ftp.example.com/example.ext&lt;/url&gt;
    &lt;url&gt;http://example.com/example.ext&lt;/url&gt; 
    &lt;metaurl mediatype="torrent"&gt;
    http://example.com/example.ext.torrent&lt;/metaurl&gt;
  &lt;/file&gt;
&lt;/metalink&gt;
</artwork></figure></t>
      <t>
	<figure>
	  <preamble>A more extensive, Metalink Document that describes two files:</preamble>
	  <artwork type="example">
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;metalink xmlns="urn:ietf:params:xml:ns:metalink"&gt;
  &lt;published&gt;2009-05-15T12:23:23Z&lt;/published&gt;
  &lt;file name="example.ext"&gt;
    &lt;size&gt;14471447&lt;/size&gt;
    &lt;identity&gt;Example&lt;/identity&gt;
    &lt;version&gt;1.0&lt;/version&gt;
    &lt;language&gt;en&lt;/language&gt;	  
    &lt;description&gt;
    A description of the example file for download.
    &lt;/description&gt;
    &lt;hash type="sha-256"&gt;f0ad929cd259957e160ea442eb80986b5f01...&lt;/hash&gt;
    &lt;url location="de" 
         priority="1"&gt;ftp://ftp.example.com/example.ext&lt;/url&gt;
    &lt;url location="fr" 
         priority="1"&gt;http://example.com/example.ext&lt;/url&gt; 
    &lt;metaurl mediatype="torrent" 
         priority="2"&gt;http://example.com/example.ext.torrent&lt;/metaurl&gt;
  &lt;/file&gt;
  &lt;file name="example2.ext"&gt;
    &lt;size&gt;14471447&lt;/size&gt;
    &lt;identity&gt;Example2&lt;/identity&gt;
    &lt;version&gt;1.0&lt;/version&gt;
    &lt;language&gt;en&lt;/language&gt;	  
    &lt;description&gt;
    Another description for a second file.
    &lt;/description&gt;
    &lt;hash type="sha-256"&gt;2f548ce50c459a0270e85a7d63b2383c5523...&lt;/hash&gt;
    &lt;url location="de" 
         priority="1"&gt;ftp://ftp.example.com/example2.ext&lt;/url&gt;
    &lt;url location="fr" 
         priority="1"&gt;http://example.com/example2.ext&lt;/url&gt; 
    &lt;metaurl mediatype="torrent" 
         priority="2"&gt;http://example.com/example2.ext.torrent&lt;/metaurl&gt;
  &lt;/file&gt;
&lt;/metalink&gt;</artwork>
	</figure>
      </t>
      </section>



      <section title="Namespace and Version" anchor="namespace.and.version">

	<t>The XML Namespaces URI <xref target="REC-xml-names"/> for the XML data
	format described in this specification is:</t>

	<t>urn:ietf:params:xml:ns:metalink</t>
	 
	<t>For convenience, this data format may be referred to as
	"Metalink", which this specification uses internally.</t>

      </section>

      <section title="Notational Conventions"> 

	<t>This specification describes conformance of Metalink
	Documents. Additionally, it places some requirements on Metalink
	Processors.</t>
     
	<t>This specification uses the namespace prefix "metalink:" for
	the Namespace URI identified in <xref target="namespace.and.version"/>, above.  Note that
	the choice of namespace prefix is arbitrary and not
	semantically significant.</t>
      
	<t>Metalink is specified using terms from the XML Infoset <xref target="REC-xml-infoset"/>. However, this
	specification uses a shorthand for two common terms: the
	phrase "Information Item" is omitted when naming Element
	Information Items and Attribute Information Items. Therefore,
	when this specification uses the term "element," it is
	referring to an Element Information Item in Infoset
	terms. Likewise, when it uses the term "attribute," it is
	referring to an Attribute Information Item.</t>

	<t>Some sections of this specification are illustrated with fragments
	of a non-normative RELAX NG Compact schema <xref target="RELAX-NG"/>. However, the text of this specification provides the definition of
	conformance. A complete schema appears in <xref target="schema"/>.
	</t>
	
	<t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
	"SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
	document are to be interpreted as described in BCP 14, <xref target="RFC2119"/>, as scoped to those conformance targets.</t>


      </section> 
    
    </section> 

    <section title="Metalink Documents" anchor="metalink.documents">
       

      <t>This specification describes Metalink Documents.</t> 

      <t>A Metalink Document describes a file or group of files, 
	  how to access them, and metadata that identifies them. Its root is the <xref target="element.metalink" format="none">metalink:metalink</xref> element.</t>

      <figure>
	<artwork type="application/relax-ng-compact-syntax">
namespace metalink = "urn:ietf:params:xml:ns:metalink"	 		
start = metalinkMetalink</artwork>
      </figure> 
      
      <t>Metalink Documents are specified in terms of the
      XML Information Set, serialized as XML 1.0 <xref target="REC-xml"/> and identified with the
      "application/metalink4+xml" media type.</t>
	  
      <t>Metalink Documents MUST be
      well-formed XML. This specification does not define a Document Type Definition (DTD) for
      Metalink Documents, and hence does not require them to be valid (in
      the sense used by XML).</t>
	  
      <t>Metalink allows the use of Internationalized Resource Identifiers (IRIs), encoded according to <xref target="RFC3987"/>. Every
      URI <xref target="RFC3986"/> is also an IRI, so a URI may be
      used wherever below an IRI is named. There is one special
      consideration: when an IRI that is not also a URI is given for
      dereferencing, it MUST be mapped to a URI using the steps in
      Section 3.1 of <xref target="RFC3987"/>.</t>
      
      <t>Any element defined by this specification MAY have an
      xml:lang attribute, whose content indicates the natural language
      for the element and its descendents.  The language context is only
      significant for elements and attributes declared to be
      "Language-Sensitive" by this specification. Requirements
      regarding the content and interpretation of xml:lang are
      specified in <xref target="REC-xml">XML 1.0</xref>,
      Section 2.12.

      <figure> 
      <iref item="metalinkCommonAttributes grammar production" primary="true"/>
      <iref item="Grammar" subitem="metalinkCommonAttributes" primary="true"/>
	<artwork type="application/relax-ng-compact-syntax">
metalinkCommonAttributes =
   attribute xml:lang { metalinkLanguageTag }?,
   undefinedAttribute*</artwork>  </figure></t>
      <t>All leading and trailing whitespace is part of the element content, and MUST NOT be ignored. Consequently, it is disallowed for elements where the defined type does not allow whitespace, such as dates, integers, or IRIs.
	  Some XML-generating implementations erroneously insert white space around values by default, and such implementations will generate invalid Metalink Documents.</t>
	  
      <t>Metalink Documents that do not follow this specification are invalid and SHOULD NOT be used by Metalink Processors.</t>
	  
      <t>Metalink is an extensible format. See <xref target="extending_metalink"/>
      of this document for a full description of how Metalink Documents can
      be extended.</t>


    </section> 

    <section title="Common Metalink Constructs"> 

      <t>Many Metalink elements share common structures. This section
      defines those structures and their requirements for convenient
      reference by the appropriate element definitions.</t>

      <t>When an element is identified as being a particular kind of
      construct, it inherits the corresponding requirements from that
      construct's definition in this section.</t>
    
      <section title="Text Constructs" anchor="text.constructs">
         
         
         

	<t>A Text construct contains human-readable text, usually short
    in length.

	  <figure>
      <iref item="metalinkTextConstruct grammar production" primary="true"/>
      <iref item="Grammar" subitem="metalinkTextConstruct" primary="true"/>
	    <artwork type="application/relax-ng-compact-syntax">
metalinkTextConstruct =
   metalinkCommonAttributes,
   text</artwork></figure></t>
   

	    <t>For example, a <xref target="element.description" format="none">metalink:description</xref> with text content:
	    

	      <figure>
		<artwork type="example">
...
&lt;description&gt;
A description of the example file for download.
&lt;/description&gt;
...</artwork>
	      </figure>
	    </t>

	    <t>The content of the Text
	    construct MUST NOT contain child elements. Such text is
	    intended to be presented to humans in a readable fashion.
	    Thus, white space could be collapsed (including
	    line breaks) and text could be displayed using typographic
	    techniques such as justification and proportional
	    fonts.</t>
	  
	
    </section>
	
      <section title="Date Constructs" anchor="date.constructs"> 
        

	<t>A Date construct is an element whose content MUST conform
	to the "date-time" production in <xref target="RFC3339"/>. In addition, an uppercase "T" character 
	MUST be used to separate date and time, and an uppercase "Z"
	character MUST be present in the absence of a numeric time zone
	offset.
	
	  <figure>
      <iref item="metalinkDateConstruct grammar production" primary="true"/>
      <iref item="Grammar" subitem="metalinkDateConstruct" primary="true"/>
	    <artwork type="application/relax-ng-compact-syntax">
metalinkDateConstruct =
   metalinkCommonAttributes,
   xsd:dateTime</artwork></figure></t>
	

	<t>Such date values happen to be compatible with the following
	specifications:
	<xref target="ISO.8601.1988"/>, 
	<xref target="NOTE-datetime-19980827"/>,
	and <xref target="REC-xmlschema-2-20041028"/>.</t>
	
	<t>Example Date constructs:

	<figure>
	  <artwork type="example">
...
&lt;updated&gt;2009-05-15T18:30:02Z&lt;/updated&gt;
...
&lt;updated&gt;2009-05-15T18:30:02.25Z&lt;/updated&gt;
...
&lt;updated&gt;2009-05-15T18:30:02+01:00&lt;/updated&gt;
...
&lt;updated&gt;2009-05-15T18:30:02.25+01:00&lt;/updated&gt;
...
</artwork>
		   
	</figure>
	</t>


      </section>

    </section>

    <section title="Metalink Element Definitions">
    
      <section title="Container Elements">

	<section anchor="element.metalink" title="The &#34;metalink:metalink&#34; Element">
    
    
    <iref item="XML Elements" subitem="metalink" primary="true"/>
    <iref item="metalink XML element" primary="true"/> 

	  <t>The "metalink:metalink" element is the document (i.e., top-level) element
	  of a Metalink Document, acting as a container for metadata and
	  data associated with the listed files.  It contains one or more <xref target="element.file" format="none">metalink:file</xref> child elements which consist of
	  metadata elements.
	  
	    <figure> 
        <iref item="metalinkMetalink grammar production" primary="true"/>
        <iref item="Grammar" subitem="metalinkMetalink" primary="true"/>
	      <artwork type="application/relax-ng-compact-syntax">
metalinkMetalink =
   element metalink:metalink {
      metalinkCommonAttributes,
      (metalinkFile+
       &amp; metalinkGenerator?
       &amp; metalinkOrigin?
       &amp; metalinkPublished?
       &amp; metalinkUpdated?
       &amp; extensionElement*)
   }</artwork></figure></t> 
	
	  <t>The following child elements are defined by this specification
	  (note that the presence of some of these elements is required):</t>

	  <t> 
	    
	    <list style="symbols"> 
	      
		  
          <t><xref target="element.metalink" format="none">metalink:metalink</xref> elements MUST contain one or more <xref target="element.file" format="none">metalink:file</xref> elements.</t>

	      <t><xref target="element.metalink" format="none">metalink:metalink</xref> elements MAY contain exactly one <xref target="element.generator" format="none">metalink:generator</xref> element and MUST NOT contain more than one such element.</t>

	      <t><xref target="element.metalink" format="none">metalink:metalink</xref> elements SHOULD contain exactly one <xref target="element.origin" format="none">metalink:origin</xref> element and MUST NOT contain more than one such element.</t>

	      <t><xref target="element.metalink" format="none">metalink:metalink</xref> elements MAY contain exactly one <xref target="element.published" format="none">metalink:published</xref> element and MUST NOT contain more than one such element.</t>
		  
	      <t><xref target="element.metalink" format="none">metalink:metalink</xref> elements MAY contain exactly one <xref target="element.updated" format="none">metalink:updated</xref> element and MUST NOT contain more than one such element.</t>	  
	    </list></t> 


	  <section toc="exclude" title="Providing Textual Content">
	    <t>Experience teaches that downloads providing textual
	    content are in general more useful than those that do
	    not. Some applications (one example is full-text indexers)
	    require a minimum amount of text to function
	    reliably and predictably. Metalink publishers should be aware
	    of these issues. It is RECOMMENDED that each <xref target="element.file" format="none">metalink:file</xref>
	    element contain a non-empty <xref target="element.description" format="none">metalink:description</xref> element, a
	    non-empty <xref target="element.identity" format="none">metalink:identity</xref> element, a non-empty <xref target="element.version" format="none">metalink:version</xref> element, and a non-empty
		<xref target="element.publisher" format="none">metalink:publisher</xref> element when these elements are present. However, the
	    absence of <xref target="element.description" format="none">metalink:description</xref>, <xref target="element.identity" format="none">metalink:identity</xref>, <xref target="element.version" format="none">metalink:version</xref>, and <xref target="element.publisher" format="none">metalink:publisher</xref> is not an error, and Metalink
	    Processors MUST NOT fail to function correctly as a
	    consequence of such an absence.</t>
	  </section>

	</section> 
	
	<section anchor="element.file" title="The &#34;metalink:file&#34; Element">
    
    
    <iref item="XML Elements" subitem="file" primary="true"/>
    <iref item="file XML element" primary="true"/> 

	  <t>The "<xref target="element.file" format="none">metalink:file</xref>" element represents an individual file,
	  acting as a container for metadata and data associated with
	  the file. Each unique file described in a Metalink Document MUST have its own <xref target="element.file" format="none">metalink:file</xref> element.</t>  
	  
	  <t>All <xref target="element.url" format="none">metalink:url</xref> elements contained in each <xref target="element.file" format="none">metalink:file</xref> element SHOULD lead to identical files. That is,
	  each <xref target="element.url" format="none">metalink:url</xref> element should be an alternative location for the same file and each 
	  <xref target="element.metaurl" format="none">metalink:metaurl</xref> element should provide metadata to retrieve the same file in another way, such as a peer to peer network. Refer to <xref target="element.url"/> and <xref target="element.metaurl"/> for more information.

	    <figure> 
        <iref item="metalinkFile grammar production" primary="true"/>
        <iref item="Grammar" subitem="metalinkFile" primary="true"/>
	      <artwork type="application/relax-ng-compact-syntax">
metalinkFile =
   element metalink:file {
      metalinkCommonAttributes,
      attribute name { text },
      (metalinkCopyright?
       &amp; metalinkDescription?
       &amp; metalinkHash*
       &amp; metalinkIdentity?
       &amp; metalinkLanguage*
       &amp; metalinkLogo?
       &amp; metalinkMetaURL*
       &amp; metalinkURL*
       &amp; metalinkOS*
       &amp; metalinkPieces*
       &amp; metalinkPublisher?
       &amp; metalinkSignature?
       &amp; metalinkSize?
       &amp; metalinkVersion?
       &amp; extensionElement*)
   }</artwork></figure></t>

   <t>This specification assigns no significance to the order of
	  <xref target="element.file" format="none">metalink:file</xref> elements or to the order of
	  <xref target="element.url" format="none">metalink:url</xref> or <xref target="element.metaurl" format="none">metalink:metaurl</xref> elements. Significance is determined by the value of the "priority" attribute of the <xref target="element.url" format="none">metalink:url</xref> or <xref target="element.metaurl" format="none">metalink:metaurl</xref> elements.</t>

	  <t>The following child elements are defined by this specification
	  (note that it requires the presence of some of these elements):</t>

	  <t> 
	
	    <list style="symbols"> 

	      <t><xref target="element.file" format="none">metalink:file</xref> elements MAY contain exactly one <xref target="element.copyright" format="none">metalink:copyright</xref>
	      element and MUST NOT contain more than one such element.</t>	

	      <t><xref target="element.file" format="none">metalink:file</xref> elements MAY contain exactly one <xref target="element.description" format="none">metalink:description</xref>
	      element and MUST NOT contain more than one such element.</t>	

	      <t><xref target="element.file" format="none">metalink:file</xref> elements MAY contain exactly one <xref target="element.identity" format="none">metalink:identity</xref>
	      element and MUST NOT contain more than one such element.</t>	

	      <t><xref target="element.file" format="none">metalink:file</xref> elements MAY contain one or more <xref target="element.hash" format="none">metalink:hash</xref> elements.</t>

	      <t><xref target="element.file" format="none">metalink:file</xref> elements MAY contain one or more <xref target="element.language" format="none">metalink:language</xref>
	      elements.</t>	

	      <t><xref target="element.file" format="none">metalink:file</xref> elements MAY contain exactly one <xref target="element.logo" format="none">metalink:logo</xref>
	      element and MUST NOT contain more than one such element.</t>	

	      <t><xref target="element.file" format="none">metalink:file</xref> elements MAY contain one or more <xref target="element.os" format="none">metalink:os</xref>
	      element.</t>	

	      <t><xref target="element.file" format="none">metalink:file</xref> elements MUST contain at least one <xref target="element.url" format="none">metalink:url</xref> element or at least one <xref target="element.metaurl" format="none">metalink:metaurl</xref> element. Typically, <xref target="element.file" format="none">metalink:file</xref> elements contain more than one <xref target="element.url" format="none">metalink:url</xref> element to provide multiple download sources.</t>		 

	      <t><xref target="element.file" format="none">metalink:file</xref> elements MAY contain one or more <xref target="element.pieces" format="none">metalink:pieces</xref> elements.</t>
		  
          <t><xref target="element.file" format="none">metalink:file</xref> elements MAY contain exactly one <xref target="element.publisher" format="none">metalink:publisher</xref>
	      element and MUST NOT contain more than one such element.</t>	

	      <t><xref target="element.file" format="none">metalink:file</xref> elements MAY contain one or more <xref target="element.signature" format="none">metalink:signature</xref> elements.</t>
		  
	      <t><xref target="element.file" format="none">metalink:file</xref> elements SHOULD contain exactly one <xref target="element.size" format="none">metalink:size</xref>
	      element and MUST NOT contain more than one such element.</t>
		  
	      <t><xref target="element.file" format="none">metalink:file</xref> elements MAY contain exactly one <xref target="element.version" format="none">metalink:version</xref>
	      element and MUST NOT contain more than one such element.</t>	
      
	    </list> 

    </t> 

	  <section title="The &#34;name&#34; Attribute"> 

	    <t><xref target="element.file" format="none">metalink:file</xref> elements MUST have a "name" attribute, which contains the local filename that the downloaded file will be written to. Hence, if a Metalink Document contains multiple <xref target="element.file" format="none">metalink:file</xref> elements, the value of the "name" attribute MUST be unique for each.
	<figure>
	  <preamble>Directory information can also be contained in a "path/file" format only, as in:</preamble>
	  <artwork type="example">
&lt;file name="debian-amd64/sarge/Contents-amd64.gz"&gt;
</artwork></figure></t>
        <t>In this example, a subdirectory "debian-amd64/sarge/" will be created
           and a file named "Contents-amd64.gz" will be created inside it.  The path MUST NOT contain any directory traversal directives or
           information. The path MUST be relative.  The path MUST NOT begin with a "/", "./" or
           "../", contain "/../", or end with "/..".</t>
	  </section> 


	</section>
	
	<section anchor="element.pieces" title="The &#34;metalink:pieces&#34; Element">
    
    
    <iref item="XML Elements" subitem="pieces" primary="true"/>
    <iref item="pieces XML element" primary="true"/> 
	      
	  <t>The "<xref target="element.pieces" format="none">metalink:pieces</xref>" element acts as a container for a list of cryptographic hashes of
non-overlapping pieces of the file. The cryptographic hashes MUST be listed in the same order as the corresponding pieces appear in the file, starting at
      the beginning of the file. 
	  
	    <figure>
        <iref item="metalinkPieces grammar production" primary="true"/>
        <iref item="Grammar" subitem="metalinkPieces" primary="true"/>
	      <artwork type="application/relax-ng-compact-syntax">
metalinkPieces =
   element metalink:pieces {
      attribute length { xsd:positiveInteger },
      attribute type { text },
      metalinkHash+
   }</artwork></figure></t>
   
	  <section title="The &#34;type&#34; Attribute"> 

	    <t><xref target="element.pieces" format="none">metalink:pieces</xref> elements MUST have a "type" attribute.
		</t>
    

	    <t>The Internet Assigned Numbers Authority (IANA) registry named "Hash Function Textual Names" defines values for hash types. See <xref target="security.hash"/> for security implications.</t>		
	  </section>

	  <section title="The &#34;length&#34; Attribute" anchor="piece.length">

	    <t><xref target="element.pieces" format="none">metalink:pieces</xref> elements MUST have a "length" attribute, which is a positive integer
        that describes the length of the pieces of the file in octets. The whole file is divided into non-overlapping pieces of this length,
        starting from the beginning of the file. That is, every piece MUST be the same size, apart from
        the last piece which is the remainder. The last piece extends to the end of the file, and therefore MAY be shorter than the other pieces.
		</t>
		
	  </section> 
	  
	</section>
	
	
      </section>


      <section title="Metadata Elements">
	

	<section anchor="element.copyright" title="The &#34;metalink:copyright&#34; Element">
    
    
    <iref item="XML Elements" subitem="copyright" primary="true"/>
    <iref item="copyright XML element" primary="true"/> 
	      
	  <t>The "<xref target="element.copyright" format="none">metalink:copyright</xref>" element is a Text construct that conveys a
	  human-readable copyright for a file. It is Language-Sensitive.
	  
	    <figure>
        <iref item="metalinkCopyright grammar production" primary="true"/>
        <iref item="Grammar" subitem="metalinkCopyright" primary="true"/>
	      <artwork type="application/relax-ng-compact-syntax">
metalinkCopyright =
   element metalink:copyright {
     metalinkTextConstruct
   }</artwork></figure></t>
	  
	</section> 	

	<section anchor="element.description" title="The &#34;metalink:description&#34; Element">
    
    
    <iref item="XML Elements" subitem="description" primary="true"/>
    <iref item="description XML element" primary="true"/> 
	      
	  <t>The "<xref target="element.description" format="none">metalink:description</xref>" element is a Text construct that conveys a
	  human-readable file description. It is Language-Sensitive.
	  
	    <figure>
        <iref item="metalinkDescription grammar production" primary="true"/>
        <iref item="Grammar" subitem="metalinkDescription" primary="true"/>
	      <artwork type="application/relax-ng-compact-syntax">
metalinkDescription =
   element metalink:description {
     metalinkTextConstruct
   }</artwork></figure></t>
	  
	</section>


	<section anchor="element.generator" title="The &#34;metalink:generator&#34; Element">
    
    
    <iref item="XML Elements" subitem="generator" primary="true"/>
    <iref item="generator XML element" primary="true"/>
	      
	  <t>The "<xref target="element.generator" format="none">metalink:generator</xref>" element's content identifies the generating agent name and version used to generate a Metalink Document, for debugging and other purposes.
      
	    <figure> 
        <iref item="metalinkGenerator grammar production" primary="true"/>
        <iref item="Grammar" subitem="metalinkGenerator" primary="true"/>
	      <artwork type="application/relax-ng-compact-syntax">
metalinkGenerator = 
   element metalink:generator {
     metalinkTextConstruct
   }</artwork></figure></t> 

      <t>The <xref target="element.generator" format="none">metalink:generator</xref> element's content is defined below in ABNF notation <xref target="RFC5234"/>.

	    <figure> 
        <iref item="metalinkGenerator ABNF" primary="true"/>
        <iref item="ABNF" subitem="metalinkGenerator" primary="true"/>
	      <artwork type="ABNF">
token          = 1*&lt;any CHAR except CTLs or separators&gt;
separators     = "(" / ")" / "&lt;" / "&gt;" / "@"
               / "," / ";" / ":" / "\" / &lt;"&gt;
               / "/" / "[" / "]" / "?" / "="
               / "{" / "}" / SP / HTAB
agent         = token ["/" agent-version]
agent-version = token
</artwork></figure></t>
     <t>Examples:

	 <figure>
	  <artwork type="example">
...
&lt;generator&gt;MirrorBrain/2.11&lt;/generator&gt;
...
&lt;generator&gt;MirrorManager/1.2.11&lt;/generator&gt;
...
&lt;generator&gt;metalinktools/0.3.6&lt;/generator&gt;
...
&lt;generator&gt;MetalinkEditor/1.2.0&lt;/generator&gt;
...
</artwork>
		   
	</figure>
	</t>


       <t>Although any token character MAY appear in an agent-version, this token SHOULD only be used for a version identifier (i.e., successive versions of the same agent
       SHOULD only differ in the agent-version portion of the agent value).</t>


	</section>	

	<section anchor="element.hash" title="The &#34;metalink:hash&#34; Element">
    
    
    <iref item="XML Elements" subitem="hash" primary="true"/>
    <iref item="hash XML element" primary="true"/> 
	      
	  <t>The "<xref target="element.hash" format="none">metalink:hash</xref>" element is a Text construct that conveys a cryptographic
	  hash for a file. All hashes are encoded in lowercase hexadecimal format. Hashes are used to verify the integrity of a complete file or portion of a file to determine if the file has been transferred without any errors.
	  
	    <figure>
        <iref item="metalinkHash grammar production" primary="true"/>
        <iref item="Grammar" subitem="metalinkHash" primary="true"/>
	      <artwork type="application/relax-ng-compact-syntax">
metalinkHash =
   element metalink:hash {
     attribute type { text }?, 
     text
   }</artwork></figure></t>
      <t>Metalink Documents MAY contain one or multiples hashes of a complete file. <xref target="element.hash" format="none">metalink:hash</xref> elements
      with a "type" attribute MUST contain a hash of the complete file. In this example, both SHA-1 and SHA-256 hashes of the complete file are included. 
	  
	      <figure>
		<artwork type="example">
...
  &lt;hash type="sha-1"&gt;a97fcf6ba9358f8a6f62beee4421863d3e52b080&lt;/hash&gt;
  &lt;hash type="sha-256"&gt;fc87941af7fd7f03e53b34af393f4c14923d74...&lt;/hash&gt;
...</artwork>
	      </figure>
      </t>
      <t>Metalink Documents MAY also contain hashes for individual pieces of a file.  <xref target="element.hash" format="none">metalink:hash</xref> elements that are inside a <xref target="element.pieces" format="none">metalink:pieces</xref> container element have a hash for that specific piece or chunk of the file, and are of the same hash type as the <xref target="element.pieces" format="none">metalink:pieces</xref> element they are contained in.</t>
      <t><xref target="element.hash" format="none">metalink:hash</xref> elements without a "type" attribute MUST contain a hash for that specific piece or chunk of the file and MUST be listed in the
      same order as the corresponding pieces appear in the file, starting at the beginning of the file. The size of the piece is equal to the value of the "length" attribute of the <xref target="element.pieces" format="none">metalink:pieces</xref> element, apart from the last piece which is the remainder. See <xref target="piece.length"/> for more information on the size of pieces.</t>

      <t>In this example, SHA-1 and SHA-256 hashes of the complete file are included, along with four SHA-1 piece hashes.
	      <figure>
		<artwork type="example">
...
  &lt;hash type="sha-1"&gt;a97fcf6ba9358f8a6f62beee4421863d3e52b080&lt;/hash&gt;
  &lt;hash type="sha-256"&gt;fc87941af7fd7f03e53b34af393f4c14923d74...&lt;/hash&gt;
  &lt;pieces length="1048576" type="sha-1"&gt;
    &lt;hash&gt;d96b9a4b92a899c2099b7b31bddb5ca423bb9b30&lt;/hash&gt;
    &lt;hash&gt;10d68f4b1119014c123da2a0a6baf5c8a6d5ba1e&lt;/hash&gt;
    &lt;hash&gt;3e84219096435c34e092b17b70a011771c52d87a&lt;/hash&gt;
    &lt;hash&gt;67183e4c3ab892d3ebe8326b7d79eb62d077f487&lt;/hash&gt;
  &lt;/pieces&gt;
...</artwork>
	      </figure>
      </t>
 
	  <section title="The &#34;type&#34; Attribute"> 



	    <t><xref target="element.hash" format="none">metalink:hash</xref> elements MUST have a "type" attribute, if and only if
        it contains a hash of the complete file. The IANA registry named "Hash Function Textual Names" defines values for hash types. See <xref target="security.hash"/> for security implications.</t>
		
	  </section>

	  
	</section> 	

	<section anchor="element.identity" title="The &#34;metalink:identity&#34; Element">
    
    
    <iref item="XML Elements" subitem="identity" primary="true"/>
    <iref item="identity XML element" primary="true"/> 
	      
	  <t>The "<xref target="element.identity" format="none">metalink:identity</xref>" element is a Text construct that conveys a
	  human-readable identity for a file. For example, the identity of Firefox 3.5 would be "Firefox".
	  
	    <figure>
        <iref item="metalinkIdentity grammar production" primary="true"/>
        <iref item="Grammar" subitem="metalinkIdentity" primary="true"/>
	      <artwork type="application/relax-ng-compact-syntax">
metalinkIdentity =
   element metalink:identity {
     metalinkTextConstruct
   }</artwork></figure></t>
	  
	</section> 	

	<section anchor="element.language" title="The &#34;metalink:language&#34; Element">
    
    
    <iref item="XML Elements" subitem="language" primary="true"/>
    <iref item="language XML element" primary="true"/> 
	      
	  <t>The "<xref target="element.language" format="none">metalink:language</xref>" element is a Text construct that conveys a
	  code for the language of a file, per <xref target="RFC5646"/>.</t>
	  
	  <t>Multiple <xref target="element.language" format="none">metalink:language</xref> elements are allowed, for instance, to describe a file such as an binary installation program that provides multiple language options, or a
      movie with multiple language tracks, or a document in multiple languages.
	  
	    <figure>
        <iref item="metalinkLanguage grammar production" primary="true"/>
        <iref item="Grammar" subitem="metalinkLanguage" primary="true"/>
	      <artwork type="application/relax-ng-compact-syntax">
metalinkLanguage =
   element metalink:language {
     metalinkTextConstruct
   }</artwork></figure></t>
   
	</section>


	<section anchor="element.logo" title="The &#34;metalink:logo&#34; Element">
    
    
    <iref item="XML Elements" subitem="logo" primary="true"/>
    <iref item="logo XML element" primary="true"/>

	  <t>The "<xref target="element.logo" format="none">metalink:logo</xref>" element's content is an IRI reference <xref target="RFC3987"/> that identifies an image that provides visual
	  identification for a file.

	    <figure> 
        <iref item="metalinkLogo grammar production" primary="true"/>
        <iref item="Grammar" subitem="metalinkLogo" primary="true"/>
	      <artwork type="application/relax-ng-compact-syntax">
metalinkLogo =
   element metalink:logo {
     metalinkCommonAttributes,
     (metalinkUri)
   }</artwork></figure></t> 

	  <t>The image SHOULD have an aspect ratio of one (horizontal)
	  to one (vertical) and SHOULD be suitable for presentation
	  at a small size.</t>
	</section>

	<section anchor="element.metaurl" title="The &#34;metalink:metaurl&#34; Element">
    
    
    <iref item="XML Elements" subitem="metaurl" primary="true"/>
    <iref item="metaurl XML element" primary="true"/> 
	  
	  <t>The "<xref target="element.metaurl" format="none">metalink:metaurl</xref>" element contains the IRI of a metadata file, also known as a metainfo file, about a resource to download. For example, this could be the IRI of a BitTorrent .torrent file, a Metalink Document, or other type of metadata file. Note that
	  the information in the <xref target="element.hash" format="none">metalink:hash</xref> element does not apply to these metadata files, but to the files that are described by them.

	    <figure>
        <iref item="metalinkMetaURL grammar production" primary="true"/>
        <iref item="Grammar" subitem="metalinkMetaURL" primary="true"/>
	      <artwork type="application/relax-ng-compact-syntax">
metalinkMetaURL =
   element metalink:metaurl {
      metalinkCommonAttributes,
      attribute priority { xsd:positiveInteger {
         maxInclusive = "999999"}}?,
      attribute mediatype { text },
      attribute name { text }?,
      (metalinkUri)
   }</artwork></figure></t> 

	  <section title="The &#34;priority&#34; Attribute"> 

	    <t><xref target="element.metaurl" format="none">metalink:metaurl</xref>
	    elements MAY have a priority attribute. Values MUST be positive integers between 1 and 999999. Lower values indicate a higher priority. <xref target="element.metaurl" format="none">metalink:metaurl</xref>
	    elements without a priority attribute are considered to have the lowest priority, i.e. 999999. The priority values of <xref target="element.metaurl" format="none">metalink:metaurl</xref> and <xref target="element.url" format="none">metalink:url</xref> elements are compared and those with the lowest values, starting with 1, are used first. Multiple <xref target="element.metaurl" format="none">metalink:metaurl</xref> and <xref target="element.url" format="none">metalink:url</xref> elements MAY have the same
		priority, i.e. one BitTorrent .torrent file and three FTP URIs could have priority="1". See also the "priority" attribute of the <xref target="element.url" format="none">metalink:url</xref> element.</t>

	  </section> 

	  <section title="The &#34;mediatype&#34; Attribute"> 

	    <t><xref target="element.metaurl" format="none">metalink:metaurl</xref> elements MUST have a "mediatype" attribute that indicates
	    the Multipurpose Internet Mail Extensions (MIME) media type <xref target="RFC4288"/> of the metadata available at the IRI. In the case of BitTorrent as specified in <xref target="BITTORRENT"/>, the value "torrent" is REQUIRED. Types without "/" are reserved. Currently, "torrent" is the only reserved value.</t>
        <t>Values for this attribute are defined below in ABNF notation <xref target="RFC5234"/>.
<figure> 
<iref item="metaurl mediatype ABNF" primary="true"/>
<iref item="ABNF" subitem="metaurl mediatype" primary="true"/>
<artwork type="ABNF">
media-type = (type-name "/" subtype-name) / media-reserved
media-reserved = "torrent"
type-name = &lt;Defined in section 4.2 of RFC 4288&gt;
subtype-name = &lt;Defined in section 4.2 of RFC 4288&gt;
</artwork></figure></t>
		
	  </section>
	  <section title="The &#34;name&#34; Attribute"> 

	    <t><xref target="element.metaurl" format="none">metalink:metaurl</xref> elements MAY have a "name" attribute that indicates
	    a specific file in a BitTorrent .torrent file or a Metalink Document that describes multiple files.</t>
		
        <t>
		<figure>
		<preamble>Directory information can also be contained in a "path/file" format only, as in:</preamble>
	  <artwork type="example">
&lt;metaurl
     mediatype="torrent" name="debian-amd64/sarge/Contents-amd64.gz"&gt;
</artwork></figure></t>
        <t>In this example, a file named "Contents-amd64.gz" is indicated, in a "debian-amd64/sarge/" subdirectory.
           The path MUST NOT contain any directory traversal directives or
           information. The path MUST be relative.  The path MUST NOT begin with a "/", "./" or
           "../", contain "/../", or end with "/..".</t>
	  </section> 	  
	</section>
	
	<section anchor="element.origin" title="The &#34;metalink:origin&#34; Element">
    
    
    <iref item="XML Elements" subitem="origin" primary="true"/>
    <iref item="origin XML element" primary="true"/> 
	      
	  <t>The "<xref target="element.origin" format="none">metalink:origin</xref>" element is an IRI where the Metalink Document was originally published. If the dynamic attribute of <xref target="element.origin" format="none">metalink:origin</xref> is "true", then updated
      versions of the Metalink can be found at this IRI.

	    <figure> 
        <iref item="metalinkOrigin grammar production" primary="true"/>
        <iref item="Grammar" subitem="metalinkOrigin" primary="true"/>
	      <artwork type="application/relax-ng-compact-syntax">
metalinkOrigin =
   element metalink:origin {
     metalinkCommonAttributes,
     attribute dynamic { xsd:boolean }?,
     (metalinkUri)
   }</artwork></figure></t>
   
	  <section title="The &#34;dynamic&#34; Attribute"> 



	    <t>The <xref target="element.origin" format="none">metalink:origin</xref> element MAY have a "dynamic" attribute, set to "true" or "false", which tells if a Metalink at the origin IRI will contain dynamic updated information or if it is static and not likely to be updated.</t>
		
	  </section>
	  
	</section>

	<section anchor="element.os" title="The &#34;metalink:os&#34; Element">
    
    
    <iref item="XML Elements" subitem="os" primary="true"/>
    <iref item="os XML element" primary="true"/> 
	      
	  <t>The "<xref target="element.os" format="none">metalink:os</xref>" element is a Text construct that conveys an
	  Operating System for a file. The IANA registry named "Operating System Names" defines values for OS types.
	  
	    <figure>
        <iref item="metalinkOS grammar production" primary="true"/>
        <iref item="Grammar" subitem="metalinkOS" primary="true"/>
	      <artwork type="application/relax-ng-compact-syntax">
metalinkOS =
   element metalink:os {
     metalinkTextConstruct
   }</artwork></figure></t>
	  
	</section>
	
	<section anchor="element.published" title="The &#34;metalink:published&#34; Element">
    
    
    <iref item="XML Elements" subitem="published" primary="true"/>
    <iref item="published XML element" primary="true"/> 

	  <t>The "<xref target="element.published" format="none">metalink:published</xref>" element is a Date construct indicating an
	  instant in time associated with an event early in the life cycle of
	  the entry.

	    <figure> 
        <iref item="metalinkPublished grammar production" primary="true"/>
        <iref item="Grammar" subitem="metalinkPublished" primary="true"/>
	      <artwork type="application/relax-ng-compact-syntax">
metalinkPublished =
   element metalink:published { 
     metalinkDateConstruct
   }</artwork></figure></t>

	   <t>Typically, <xref target="element.published" format="none">metalink:published</xref> will be associated with the
	   initial creation or first availability of the resource. The <xref target="element.updated" format="none">metalink:updated</xref> element is used when a Metalink Document has been updated after initial publication.</t>

	</section>
	
	
	<section anchor="element.publisher" title="The &#34;metalink:publisher&#34; Element">
    
    
    <iref item="XML Elements" subitem="publisher" primary="true"/>
    <iref item="publisher XML element" primary="true"/>
 
	  <t>The "<xref target="element.publisher" format="none">metalink:publisher</xref>" element contains a human-readable group or other entity which has published the file described in the Metalink Document and an IRI for more information.
	  
	    <figure>
        <iref item="metalinkPublisher grammar production" primary="true"/>
        <iref item="Grammar" subitem="metalinkPublisher" primary="true"/>
	      <artwork type="application/relax-ng-compact-syntax">
metalinkPublisher =
   element metalink:publisher {
     metalinkCommonAttributes,
     attribute name { text },
     attribute url { metalinkUri }?
   }</artwork></figure></t>

	  <t>The <xref target="element.publisher" format="none">metalink:publisher</xref> element MUST have a "name" attribute that
	  indicates the human-readable name of the publisher.</t>


      <t>The <xref target="element.publisher" format="none">metalink:publisher</xref> element MAY have a "url" attribute
	  whose value MUST be an IRI reference <xref target="RFC3987"/>.</t>
 
	</section> 

	<section anchor="element.signature" title="The &#34;metalink:signature&#34; Element">
    
    
    <iref item="XML Elements" subitem="signature" primary="true"/>
    <iref item="signature XML element" primary="true"/> 
	      
	  <t>The "<xref target="element.signature" format="none">metalink:signature</xref>" element is a Text construct that conveys a
	  digital signature for a file described in a Metalink Document. Digital signatures verify that a file is from the entity that has signed it.</t>
	  
	  <t>Support in Metalink Processors for digital signatures included in this element is OPTIONAL. Note that the signing of Metalink Documents, as opposed to a digital signature of a file described in a Metalink Document, is covered in <xref target="security.signatures"/>.
	  
	    <figure>
        <iref item="metalinkSignature grammar production" primary="true"/>
        <iref item="Grammar" subitem="metalinkSignature" primary="true"/>
	      <artwork type="application/relax-ng-compact-syntax">
metalinkSignature =
   element metalink:signature {
     attribute mediatype { text },
     metalinkTextConstruct
   }</artwork></figure></t>
   
     <t>Example with an OpenPGP signature <xref target="RFC4880"/>:

	 <figure>
	  <artwork type="example">
&lt;signature mediatype="application/pgp-signature"&gt;
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.10 (GNU/Linux)

iEYEABECAAYFAkrxdXQACgkQeOEcayedXJHqFwCfd1p/HhRf/iDvYhvFbTrQPz+p
p3oAoO9lKHoOqOE0EMB3zmMcLoYUrNkg
=ggAf
-----END PGP SIGNATURE-----
&lt;/signature&gt;
</artwork>
		   
	</figure>
	</t>
	  <section title="The &#34;mediatype&#34; Attribute"> 

	    <t><xref target="element.signature" format="none">metalink:signature</xref> elements MUST have a "mediatype" attribute that indicates
	    the MIME media type <xref target="RFC4288"/> of the included digital signature.</t>
		
        <t>Values for this attribute are defined below in ABNF notation <xref target="RFC5234"/>.
<figure> 
<iref item="signature mediatype ABNF" primary="true"/>
<iref item="ABNF" subitem="signature mediatype" primary="true"/>
<artwork type="ABNF">
media-type = type-name "/" subtype-name
type-name = &lt;Defined in section 4.2 of RFC 4288&gt;
subtype-name = &lt;Defined in section 4.2 of RFC 4288&gt;
</artwork></figure></t>

	  </section> 	  
	  
	</section> 	
		
	<section anchor="element.size" title="The &#34;metalink:size&#34; Element">
    
    
    <iref item="XML Elements" subitem="size" primary="true"/>
    <iref item="size XML element" primary="true"/> 
	      
	  <t>The "<xref target="element.size" format="none">metalink:size</xref>" element indicates the length of
	    the linked content in octets. This is the
	    content length of the representation returned when the IRI
	    is mapped to a URI and 
	    dereferenced. Note that the "<xref target="element.size" format="none">metalink:size</xref>" element MUST
   override the actual content length of the representation as reported
   by the underlying protocol, and those that do not match will be discarded by Metalink Processors. This value MUST be a non-negative integer.
	    <figure>
        <iref item="metalinkSize grammar production" primary="true"/>
        <iref item="Grammar" subitem="metalinkSize" primary="true"/>
	      <artwork type="application/relax-ng-compact-syntax">
metalinkSize =
   element metalink:size {
     xsd:nonNegativeInteger
   }</artwork></figure></t> 
	  
	</section> 
	
	<section anchor="element.updated" title="The &#34;metalink:updated&#34; Element">
    
    
    <iref item="XML Elements" subitem="updated" primary="true"/>
    <iref item="updated XML element" primary="true"/> 

	  <t>The "<xref target="element.updated" format="none">metalink:updated</xref>" element is a Date construct indicating the
	  most recent instant in time when a Metalink was modified in a
	  way the publisher considers significant. Therefore, not all
	  modifications necessarily result in a changed <xref target="element.updated" format="none">metalink:updated</xref>
	  value.

	    <figure> 
        <iref item="metalinkUpdated grammar production" primary="true"/>
        <iref item="Grammar" subitem="metalinkUpdated" primary="true"/>
	      <artwork type="application/relax-ng-compact-syntax">
metalinkUpdated =
   element metalink:updated { 
     metalinkDateConstruct
   }</artwork></figure></t>

	  <t>Publishers MAY change the value of this element over time.</t>
 
	</section> 

	<section anchor="element.url" title="The &#34;metalink:url&#34; Element">
    
    
    <iref item="XML Elements" subitem="url" primary="true"/>
    <iref item="url XML element" primary="true"/> 
	  
	  <t>The "<xref target="element.url" format="none">metalink:url</xref>" element contains a file IRI.
	  Most <xref target="element.file" format="none">metalink:file</xref> container elements will contain multiple <xref target="element.url" format="none">metalink:url</xref> elements,
	  and each one SHOULD be a valid alternative to download the same file.</t>
	  
	  <t>The <xref target="element.url" format="none">metalink:url</xref> elements SHOULD be resolvable and, if resolvable, SHOULD lead to identical files.</t>
	  
	  <t>Metalink Processors MUST filter out invalid files obtained from "<xref target="element.url" format="none">metalink:url</xref>" elements by using information in the <xref target="element.size" format="none">metalink:size</xref> element and <xref target="element.hash" format="none">metalink:hash</xref> elements.

	    <figure>
        <iref item="metalinkURL grammar production" primary="true"/>
        <iref item="Grammar" subitem="metalinkURL" primary="true"/>
	      <artwork type="application/relax-ng-compact-syntax">
metalinkURL =
   element metalink:url {
      metalinkCommonAttributes,
      attribute location { xsd:string {
         minLength = "2"  maxLength="2"}
      }?,
      attribute priority { xsd:positiveInteger {
         maxInclusive = "999999"}}?,
      (metalinkUri)
   }</artwork></figure></t> 

	  <section title="The &#34;priority&#34; Attribute"> 

	    <t><xref target="element.url" format="none">metalink:url</xref>
	    elements MAY have a priority attribute. Values MUST be positive integers between 1 and 999999. Lower values indicate a higher priority. <xref target="element.url" format="none">metalink:url</xref>
	    elements without a priority attribute are considered to have the lowest priority, i.e. 999999. Multiple <xref target="element.url" format="none">metalink:url</xref> elements can have the same
		priority, i.e. ten different mirrors could have priority="1".</t>

	  </section> 

	  <section title="The &#34;location&#34; Attribute"> 

	    <t><xref target="element.url" format="none">metalink:url</xref> elements MAY have a "location" attribute, which
		is a <xref target="ISO3166-1"/> alpha-2 two letter country code for the geographical location of the physical server an IRI is used
		to access.
		</t>

	  </section> 
	      
	</section> 
	
	
	<section anchor="element.version" title="The &#34;metalink:version&#34; Element">
    
    
    <iref item="XML Elements" subitem="version" primary="true"/>
    <iref item="version XML element" primary="true"/> 
	      
	  <t>The "<xref target="element.version" format="none">metalink:version</xref>" element is a Text construct that conveys a
	  human-readable version for a file. The version of Firefox 3.5 would be "3.5".
	  
	    <figure>
        <iref item="metalinkVersion grammar production" primary="true"/>
        <iref item="Grammar" subitem="metalinkVersion" primary="true"/>
	      <artwork type="application/relax-ng-compact-syntax">
metalinkVersion =
   element metalink:version {
     metalinkTextConstruct
   }</artwork></figure></t> 
	  
	</section> 

	

      </section> 

    </section>  
	


	  <section title="Extending Metalink" anchor="extending_metalink"> 

	    <section title="Extensions from Non-Metalink Vocabularies">
	    
	      <t>This specification describes Metalink's XML markup
	      vocabulary. Markup from other vocabularies ("foreign markup")
	      can be used in a Metalink Document.</t>
	    
	    </section>
	    
	    <section title="Extensions to the Metalink Vocabulary" anchor="extensions.to.the.metalink.vocabulary">

	      <t>The Metalink namespace is reserved for future
	      forward-compatible revisions of Metalink. Future versions
	      of this specification could add new elements and
	      attributes to the Metalink markup vocabulary. Software
	      written to conform to this version of the specification
	      will not be able to process such markup correctly and,
	      in fact, will not be able to distinguish it from markup
	      error. For the purposes of this discussion, unrecognized
	      markup from the Metalink vocabulary will be considered
	      "foreign markup".</t>

	    </section>
	    
	    <section title="Processing Foreign Markup" anchor="processing.foreign.markup">
	      
	      <t>Metalink Processors that encounter foreign markup in a location that
          is legal according to this specification MUST ignore such foreign markup,
          in particular they MUST NOT stop processing or signal an error. It might be
	      the case that the Metalink Processor is able to process the
	      foreign markup correctly and does so. Otherwise, such
	      markup is termed "unknown foreign markup".</t>
        
	      <t>When unknown foreign markup is encountered as a child of
	      <xref target="element.file" format="none">metalink:file</xref>, <xref target="element.metalink" format="none">metalink:metalink</xref>, Metalink Processors MAY
	      bypass the markup and any textual content and MUST NOT change
	      their behavior as a result of the markup's presence.</t>

	    </section>

	    <section title="Extension Elements" anchor="extension">
        
        
	      <t>Metalink allows foreign markup anywhere in a Metalink
	      document, except where it is explicitly forbidden.
	      Child elements of <xref target="element.file" format="none">metalink:file</xref> and <xref target="element.metalink" format="none">metalink:metalink</xref>
	      are considered Metadata elements and
	      are described below. The role of
	      other foreign markup is undefined by this
	      specification.</t>

	      <section title="Simple Extension Elements" anchor="simple.extension.elements">
          

		<t>A Simple Extension element MUST NOT have any
		attributes or child elements.  The element MAY contain
		character data or be empty. Simple Extension elements
		are not Language-Sensitive.

		<figure> 
      <iref item="simpleExtensionElement grammar production" primary="true"/>
      <iref item="Grammar" subitem="simpleExtensionElement" primary="true"/>
		  <artwork type="application/relax-ng-compact-syntax">
simpleExtensionElement =
   element * - metalink:* {
      text
   }</artwork></figure></t>


		<t>The element can be interpreted as a simple property (or
		name/value pair) of the parent element that encloses it.  The
		pair consisting of the namespace-URI of the element and the
		local name of the element can be interpreted as the name of
		the property.  The character data content of the element can
		be interpreted as the value of the property.  If the element
		is empty, then the property value can be interpreted as an
		empty string.</t>

	      </section>

	      <section title="Structured Extension Elements" anchor="structured.extension.elements">
          

		<t>The root element of a Structured Extension element
		MUST have at least one attribute or child element.  It
		MAY have attributes, it MAY contain well-formed XML
		content (including character data), or it MAY be
		empty. Structured Extension elements are
		Language-Sensitive.

		<figure> 
      <iref item="structuredExtensionElement grammar production" primary="true"/>
      <iref item="Grammar" subitem="structuredExtensionElement" primary="true"/>
		  <artwork type="application/relax-ng-compact-syntax">
structuredExtensionElement =
   element * - metalink:* {
      (attribute * { text }+,
         (text|anyElement)*)
    | (attribute * { text }*,
       (text?, anyElement+, (text|anyElement)*))
   }</artwork></figure></t>


		<t>The structure of a Structured Extension element, including
		the order of its child elements, could be significant.</t>

		<t>This specification does not provide an interpretation of a
		Structured Extension element.  The syntax of the XML contained
		in the element (and an interpretation of how the element
		relates to its containing element) is defined by the
		specification of the Metalink extension.</t>

	      </section>

	    </section>

	  </section>

     
	  <section title="IANA Considerations" anchor="IANA"> 

	    <section title="XML Namespace Registration">

<t>This document makes use of the XML registry specified in <xref target="RFC3688"/>.  Accordingly, IANA has made the following registration:</t>
<t>Registration request for the Metalink namespace:</t>

<t>URI: urn:ietf:params:xml:ns:metalink</t>

<t>Registrant Contact: See the "Author's Address" section of this
   document.</t>

<t>XML: None.  Namespace URIs do not represent an XML specification.</t>
        </section>
		
	    <section title="application/metalink4+xml MIME type">
	  
	  
    <iref item="Media Type" subitem="application/metalink4+xml" primary="true"/>
    <iref item="application/metalink4+xml Media Type" primary="true"/>
    
	    <t>A Metalink Document, when serialized as XML 1.0, can be identified
	    with the following media type:</t>

	    <t>
	      <list style="hanging"> 
		<t hangText="MIME media type name:"> application</t>
		<t hangText="MIME subtype name:"> metalink4+xml</t>
		<t hangText="Mandatory parameters:"> None.</t> 
		<t hangText="Optional parameters:"> 
		  <list style="hanging"> 
		    <t hangText="&#34;charset&#34;:"> This parameter has semantics identical
        to the charset parameter of the
		    "application/xml" media type as specified in <xref target="RFC3023"/>.</t>
		  </list> 
		</t>
		
		<t hangText="Encoding considerations:"> Identical to those of
		"application/xml" as described in <xref target="RFC3023"/>, Section 3.2.</t>

		<t hangText="Security considerations:"> As defined in this
		specification.</t>

		<t>In addition, as this media type uses the "+xml" convention,
		it shares the same security considerations as described in
		<xref target="RFC3023"/>, Section 10.</t>

		<t hangText="Interoperability considerations:"> There are no
		known interoperability issues.</t>

		<t hangText="Published specification:"> This
		specification.</t>
		
		<t hangText="Applications that use this media type:"> No known
		applications currently use this media type.</t>

	      </list>
	    </t>

	    <t>Additional information:</t> 

	    <t>
	      <list style="hanging"> 
		
		<t hangText="Magic number(s):"> As specified for
		"application/xml" in <xref target="RFC3023"/>, Section 3.2.</t>

		<t hangText="File extension:"> .meta4</t> 

		<t hangText="Fragment identifiers:"> As specified for
		"application/xml" in <xref target="RFC3023"/>, Section 5.</t>

		<t hangText="Base URI:"> As specified in <xref target="RFC3023"/>, Section 6.</t> 

		<t hangText="Macintosh File Type code:"> TEXT</t>

		<t hangText="Person and email address to contact for further information:"> Anthony Bryan &lt;anthonybryan@gmail.com&gt;</t>

		<t hangText="Intended usage:">
		COMMON</t> <t hangText="Author/Change controller:">IESG</t>
		</list></t>
        </section>

	  </section> 

	  <section title="Security Considerations">
	  	<t>Because Metalink is an XML-based format, existing XML security
	    mechanisms can be used to secure its content.</t>

	    
	    <t>Publishers of Metalink Documents may have sound reasons for signing
	    otherwise-unprotected content. For example, a merchant
	    might digitally sign a Metalink that lists a file download to verify its origin. Other merchants may wish to sign and encrypt Metalink Documents that list digital songs that have been purchased. Of course,
	    many other examples are conceivable as well.</t>
	    <t>Publishers are encouraged to offer Metalink documents via authenticated HTTP under TLS (Transport Layer Security) as specified in <xref target="RFC2818"/>. The choice of a secure content layer is entirely possible for content providers.</t>
		
		<t>Publishers are also encouraged to include digital signatures of the files within the Metalink Documents, if they are available, as described in <xref target="element.signature"/>.</t>
		
		<t>Normally, a publisher is in the best position to know how strong the protective signing ought to be on their content. Thus, a publisher can choose weak or strong cryptography, and a Metalink Processor would normally accept that.  There MAY be applications where the Metalink Processor chooses to reject weak cryptography, but that is not envisioned as the common use case.</t>

	    <section title="Digital Signatures" anchor="security.signatures">
     
	      <t>The root of a Metalink Document (i.e., <xref target="element.metalink" format="none">metalink:metalink</xref>) or any <xref target="element.file" format="none">metalink:file</xref> element MAY have an
	      Enveloped Signature, as described by <xref target="REC-xmldsig-core">XML-Signature and
	      Syntax Processing</xref>.</t>

		  <t>Although signing and verifying signatures are both OPTIONAL, an implementation that supports either feature SHOULD implement RSA with a minimum key size of 2048 with SHA-256.</t>
		  
		  <t>Metalink Processors that support verifying signatures MUST reject Metalink Documents with invalid signatures.</t>
	      
	      <t>Metalink Processors MUST NOT reject a Metalink Document
	      containing such a signature because they are not capable
	      of verifying it; they MUST continue processing and MAY
	      inform the user of their failure to validate the
	      signature.</t>

	      <t>In other words, the presence of an element with the namespace
	      URI "http://www.w3.org/2000/09/xmldsig#" and a local name of
	      "Signature" as a child of the document element MUST NOT cause a
	      Metalink Processor to fail merely because of its presence.</t>

	      <t>Other elements in a Metalink Document MUST NOT be signed unless
	      their definitions explicitly specify such a capability.</t>

	      <t>Section 6.5.1 of <xref target="REC-xmldsig-core"/> requires
	      support for Canonical XML <xref target="REC-xml-c14n"/>. However, many
	      implementers do not use it because signed XML documents
	      enclosed in other XML documents have their signatures
	      broken. Thus, Metalink Processors that verify signed Metalink
	      Documents MUST be able to canonicalize with the
	      exclusive XML canonicalization method identified by the
	      URI "http://www.w3.org/2001/10/xml-exc-c14n#", as
	      specified in Exclusive XML Canonicalization <xref target="REC-xml-exc-c14n"/>.
	      </t>

	      <t>Section 4.4.2 of <xref target="REC-xmldsig-core"/> requires
	      support for DSA signatures and recommends support for
	      RSA signatures.  However, because of the much greater
	      popularity in the market of RSA versus DSA, Metalink
	      Processors that verify signed Metalink Documents MUST be
	      able to verify RSA signatures, but do not need be able
	      to verify DSA signatures. Due to security issues that
	      can arise if the keying material for message
	      authentication code (MAC) authentication is not handled
	      properly, Metalink Documents SHOULD NOT use MACs for
	      signatures.</t> 

	    </section> 

	    <section title="URIs and IRIs">

	      <t>Metalink Processors handle URIs and IRIs. See Section 7 of <xref target="RFC3986"/> and Section 8 of <xref target="RFC3987"/> for security
          considerations related to their handling and use.</t>

	    </section>

	    <section title="Spoofing">

		  <t>There is potential for spoofing attacks where the attacker publishes
          Metalink Documents with false information. Malicious publishers might create Metalink Documents containing inaccurate information anywhere in the document.
          Unaware downloaders could be deceived into downloading a malicious or worthless file. Malicious publishers could attempt a distributed denial of service attack by inserting unrelated IRIs into Metalink Documents.</t>
	      
		  <t>Digital signatures address the issue of spoofing.</t>
	    </section>	
		
	    <section title="Cryptographic Hashes" anchor="security.hash">

	      <t>Currently, some of the hash types defined in the IANA registry named "Hash Function Textual Names" are considered insecure. These include the whole Message Digest family of algorithms which are not suitable for cryptographically strong verification. Malicious people could provide files that appear to be identical to another file because of a collision, i.e. the weak cryptographic hashes of the intended file and a substituted malicious file could match.</t>
		  <t>Metalink Generators and Processors MUST support "sha-256" which is SHA-256, as specified in <xref target="FIPS-180-3"/>, and MAY support stronger hashes.</t>
          <t>If a Metalink Document contains hashes, it SHOULD include "sha-256" which is SHA-256, or stronger.  It MAY also include other hashes from the IANA registry named "Hash Function Textual Names".</t>

	    </section>	
		
		
	  </section>
    
	</middle> 

	<back> 
	  
	  <references title="Normative References">
	  
<reference anchor="BITTORRENT" target="http://www.bittorrent.org/beps/bep_0003.html">
<front>
<title>The BitTorrent Protocol Specification</title>

<author initials="B" surname="Cohen" fullname="Bram Cohen">
    <organization/>
</author>


<date month="February" day="28" year="2008"/>
</front>

<seriesInfo name="BITTORRENT" value="11031"/>
</reference>	  


<reference anchor="RFC2119">

<front>
<title abbrev="RFC Key Words">Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials="S." surname="Bradner" fullname="Scott Bradner">
<organization>Harvard University</organization>
<address>
<postal>
<street>1350 Mass. Ave.</street>
<street>Cambridge</street>
<street>MA 02138</street></postal>
<phone>- +1 617 495 3864</phone>
<email>sob@harvard.edu</email></address></author>
<date year="1997" month="March"/>
<area>General</area>
<keyword>keyword</keyword>
<abstract>
<t>
   In many standards track documents several words are used to signify
   the requirements in the specification.  These words are often
   capitalized.  This document defines these words as they should be
   interpreted in IETF documents.  Authors who follow these guidelines
   should incorporate this phrase near the beginning of their document:

<list>
<t>
      The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL
      NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED",  "MAY", and
      "OPTIONAL" in this document are to be interpreted as described in
      RFC 2119.
</t></list></t>
<t>
   Note that the force of these words is modified by the requirement
   level of the document in which they are used.
</t></abstract></front>

<seriesInfo name="BCP" value="14"/>
<seriesInfo name="RFC" value="2119"/>
</reference>
 
 
<reference anchor="RFC2818">
<front>
<title>HTTP Over TLS</title>

<author fullname="E. Rescorla" surname="Rescorla" initials="E.">
<organization></organization></author>
<date month="May" year="2000"></date>
</front>
<seriesInfo name="RFC" value="2818"></seriesInfo>
</reference>

<reference anchor="RFC3023">

<front>
<title>XML Media Types</title>
<author initials="M." surname="Murata" fullname="M. Murata">
<organization/></author>
<author initials="S." surname="St. Laurent" fullname="S. St. Laurent">
<organization/></author>
<author initials="D." surname="Kohn" fullname="D. Kohn">
<organization/></author>
<date year="2001" month="January"/>
<abstract>
<t>This document standardizes five new media types -- text/xml, application/xml, text/xml-external-parsed-entity, application/xml-external-parsed-entity, and application/xml-dtd -- for use in exchanging network entities that are related to the Extensible Markup Language (XML).  This document also standardizes a convention (using the suffix '+xml') for naming media types outside of these five types when those media types represent XML MIME (Multipurpose Internet Mail Extensions) entities.</t></abstract></front>

<seriesInfo name="RFC" value="3023"/>
</reference>
 

 <reference anchor="RFC3339">

<front>
<title>Date and Time on the Internet: Timestamps</title>
<author initials="G." surname="Klyne" fullname="G. Klyne">
<organization/></author>
<author initials="C." surname="Newman" fullname="C. Newman">
<organization/></author>
<date year="2002" month="July"/>
<abstract>
<t>This document defines a date and time format for use in Internet protocols that is a profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.</t></abstract></front>

<seriesInfo name="RFC" value="3339"/>
</reference>
 

<reference anchor="RFC3986">

<front>
<title>Uniform Resource Identifier (URI): Generic Syntax</title>
<author initials="T." surname="Berners-Lee" fullname="T. Berners-Lee">
<organization/></author>
<author initials="R." surname="Fielding" fullname="R. Fielding">
<organization/></author>
<author initials="L." surname="Masinter" fullname="L. Masinter">
<organization/></author>
<date year="2005" month="January"/></front>

<seriesInfo name="STD" value="66"/>
<seriesInfo name="RFC" value="3986"/>
</reference>
 

<reference anchor="RFC3987">

<front>
<title>Internationalized Resource Identifiers (IRIs)</title>
<author initials="M." surname="Duerst" fullname="M. Duerst">
<organization/></author>
<author initials="M." surname="Suignard" fullname="M. Suignard">
<organization/></author>
<date year="2005" month="January"/></front>

<seriesInfo name="RFC" value="3987"/>
</reference>

<reference anchor="RFC4288">

<front>
<title>Media Type Specifications and Registration Procedures</title>
<author initials="N." surname="Freed" fullname="N. Freed">
<organization/></author>
<author initials="J." surname="Klensin" fullname="J. Klensin">
<organization/></author>
<date year="2005" month="December"/></front>

<seriesInfo name="BCP" value="13"/>
<seriesInfo name="RFC" value="4288"/>
</reference>


<reference anchor="RFC5234">

<front>
<title>Augmented BNF for Syntax Specifications: ABNF</title>
<author initials="D." surname="Crocker" fullname="D. Crocker" role="editor">
<organization/></author>
<author initials="P." surname="Overell" fullname="P. Overell">
<organization/></author>
<date year="2008" month="January"/></front>

<seriesInfo name="STD" value="68"/>
</reference>


<reference anchor="RFC5646">

<front>
<title>Tags for Identifying Languages</title>
<author initials="A." surname="Phillips" fullname="A. Phillips">
<organization/></author>
<author initials="M." surname="Davis" fullname="M. Davis">
<organization/></author>
<date year="2009" month="September"/></front>

<seriesInfo name="BCP" value="47"/>
<seriesInfo name="RFC" value="5646"/>
</reference>

<reference anchor="REC-xml-infoset" target="http://www.w3.org/TR/2004/REC-xml-infoset-20040204/">
<front>
<title>XML Information Set (Second Edition)</title>

<author fullname="John Cowan" surname="Cowan" initials="J.">

    <organization></organization>
</author>

<author fullname="Richard Tobin" surname="Tobin" initials="R.">
    <organization></organization>
</author>

<date year="2004" day="4" month="February"></date>
</front>

<seriesInfo name="W3C" value="REC-xml-infoset-20040204"></seriesInfo>
</reference>

 
<reference anchor="REC-xml-names" target="http://www.w3.org/TR/2009/REC-xml-names-20091208/">
<front>
<title>Namespaces in XML 1.0 (Third Edition)</title>

<author fullname="Dave Hollander" surname="Hollander" initials="D.">
    <organization></organization>
</author>

<author fullname="Tim Bray" surname="Bray" initials="T.">
    <organization></organization>
</author>

<author fullname="Richard Tobin" surname="Tobin" initials="R.">
    <organization></organization>
</author>

<author fullname="Andrew Layman" surname="Layman" initials="A.">

    <organization></organization>
</author>

<date year="2009" day="08" month="December"></date>
</front>

<seriesInfo name="W3C" value="REC-xml-names-20091208"></seriesInfo>
</reference>

 
<reference anchor="REC-xml" target="http://www.w3.org/TR/2008/REC-xml-20081126/">
<front>
<title>Extensible Markup Language (XML) 1.0 (Fifth Edition)</title>

<author fullname="Francois Yergeau" surname="Yergeau" initials="F.">

    <organization></organization>
</author>

<author fullname="Jean Paoli" surname="Paoli" initials="J.">
    <organization></organization>
</author>

<author fullname="Tim Bray" surname="Bray" initials="T.">
    <organization></organization>
</author>

<author fullname="C. M. Sperberg-McQueen" surname="Sperberg-McQueen" initials="C.">
    <organization></organization>

</author>

<author fullname="Eve Maler" surname="Maler" initials="E.">
    <organization></organization>
</author>

<date year="2008" day="26" month="November"></date>
</front>

<seriesInfo name="W3C" value="REC-xml-20081126"></seriesInfo>
</reference>

<reference anchor="REC-xml-c14n" target="http://www.w3.org/TR/2001/REC-xml-c14n-20010315">
<front>
<title>Canonical XML Version 1.0</title>

<author initials="J" surname="Boyer" fullname="John Boyer">
    <organization/>
</author>

<date month="March" day="15" year="2001"/>
</front>

<seriesInfo name="W3C REC" value="REC-xml-c14n-20010315"/>
</reference>
 

<reference anchor="REC-xml-exc-c14n" target="http://www.w3.org/TR/2002/REC-xml-exc-c14n-20020718/">
<front>
<title>Exclusive XML Canonicalization Version 1.0</title>

<author initials="D" surname="Eastlake" fullname="Donald E. Eastlake 3rd">
    <organization/>
</author>

<author initials="J" surname="Boyer" fullname="John Boyer">
    <organization/>
</author>

<author initials="J" surname="Reagle" fullname="Joseph Reagle">
    <organization/>
</author>

<date month="July" day="18" year="2002"/>
</front>

<seriesInfo name="W3C REC" value="REC-xml-exc-c14n-20020718"/>
</reference>

 
<reference anchor="REC-xmldsig-core" target="http://www.w3.org/TR/2008/REC-xmldsig-core-20080610/">

<front>
<title>XML-Signature Syntax and Processing (Second Edition)</title>

<author fullname="David Solo" surname="Solo" initials="D.">
    <organization></organization>
</author>

<author fullname="Joseph Reagle" surname="Reagle" initials="J.">
    <organization></organization>
</author>

<author fullname="Donald Eastlake" surname="Eastlake" initials="D.">
    <organization></organization>

</author>

<date year="2008" day="10" month="June"></date>
</front>

<seriesInfo name="W3C" value="REC-xmldsig-core-20080610"></seriesInfo>
</reference>


<reference anchor="ISO3166-1">

<front>
<title>ISO 3166-1:2006.  Codes for the representation of names of countries and their subdivisions -- Part 1: Country codes</title>
<author>
<organization>International Organization for Standardization</organization>
</author>
<date month="November" year="2006"/></front>
</reference>

<reference anchor="FIPS-180-3">
<front>
<title>Secure Hash Standard (SHS)</title>
<author>
    <organization>National Institute of Standards and Technology (NIST)</organization>
</author>
<date year="2008" month="October"></date>
</front>
<seriesInfo name="FIPS PUB" value="180-3"></seriesInfo>
</reference>

	  </references>
	  
	  <references title="Informative References">


<reference anchor="ISO.8601.1988">
<front>
<title>Data elements and interchange formats - Information interchange - Representation of dates and times</title>
<author>
<organization>International Organization for Standardization</organization>
</author>
<date month="June" year="1988"/>
</front>
<seriesInfo name="ISO" value="Standard 8601"/>
</reference>

      

<reference anchor="REC-xmlschema-2-20041028" target="http://www.w3.org/TR/2004/REC-xmlschema-2-20041028/">
<front>
<title>XML Schema Part 2: Datatypes Second Edition</title>

<author initials="A" surname="Malhotra" fullname="Ashok Malhotra">
    <organization/>
</author>

<author initials="P" surname="Biron" fullname="Paul V. Biron">
    <organization/>
</author>

<date month="October" day="28" year="2004"/>
</front>

<seriesInfo name="W3C" value="REC-xmlschema-2-20041028"/>
</reference>

      

<reference anchor="NOTE-datetime-19980827" target="http://www.w3.org/TR/1998/NOTE-datetime-19980827">
<front>
<title>Date and Time Formats</title>

<author initials="M" surname="Wolf" fullname="Misha Wolf">
    <organization/>
</author>

<author initials="C" surname="Wicksteed" fullname="Charles Wicksteed">
    <organization/>
</author>

<date month="August" day="27" year="1998"/>
</front>

<seriesInfo name="W3C" value="NOTE-datetime-19980827"/>
</reference>


	    <reference anchor="RELAX-NG" target="http://www.oasis-open.org/committees/relax-ng/compact-20021121.html"> 
	      
	      <front> 
		
		<title>RELAX NG Compact Syntax</title>
		
	
		<author initials="J" surname="Clark" fullname="James Clark">
		  <organization>OASIS Technical Committee: RELAX NG</organization> 
		</author> 

		<date year="2001" month="December" day="03"/>
	      </front> 

	    </reference>
		
<reference anchor="RFC3688">

<front>
<title>The IETF XML Registry</title>
<author initials="M." surname="Mealling" fullname="M. Mealling">
<organization/></author>
<date year="2004" month="January"/></front>

<seriesInfo name="BCP" value="81"/>
<seriesInfo name="RFC" value="3688"/>
</reference>


<reference anchor="RFC4287">

<front>
<title>The Atom Syndication Format</title>
<author fullname="M. Nottingham" surname="Nottingham" initials="M.">
<organization></organization></author>
<author fullname="R. Sayre" surname="Sayre" initials="R.">
<organization></organization></author>
<date month="December" year="2005"></date></front>
<seriesInfo name="RFC" value="4287"></seriesInfo>
</reference>

<reference anchor="RFC4880">

<front>
<title>OpenPGP Message Format</title>
<author fullname="J. Callas" surname="Callas" initials="J.">
<organization></organization></author>
<author fullname="L. Donnerhacke" surname="Donnerhacke" initials="L.">
<organization></organization></author>
<author fullname="H. Finney" surname="Finney" initials="H.">
<organization></organization></author>
<author fullname="D. Shaw" surname="Shaw" initials="D.">
<organization></organization></author>
<author fullname="R. Thayer" surname="Thayer" initials="R.">
<organization></organization></author>
<date month="November" year="2007"></date></front>
<seriesInfo name="RFC" value="4880"></seriesInfo>
</reference>




	    </references> 

	    <section title="Acknowledgements and Contributors">
		  <t>The layout and shape of this document relies heavily on work pioneered in the Atom Syndication Format as specified in <xref target="RFC4287"/>.</t>
	    
          <t>The content and concepts within are a product of the Metalink community. Key contributors provided early implementations: A. Bram Neijt, Hampus Wessman, Darius Liktorius, Manuel Subredu, Michael Burford,
          Giorgio Maone, Nils Maier, Max Velasques, Manolo Valdes, Hayden Legendre, Frederick Cheung, Rene Leonhardt, Per Oyvind Karlsen, Matt Domsch, Yazsoft, 
		  KGet developers, Free Download Manager developers, Orbit developers, Arne Babenhauserheide, Mathias Berchtold, Xienzhenyu and TheWorld Browser developers, Xi Software, Agostino Russo, and James Antill.</t>

	      <t>The Metalink community has dozens of contributors who contributed to the evolution of Metalink or proposed ideas and wording for this
	      document, including:</t>

          <t>Paul Burkhead, Kristian Weston, Nicolas Alvarez, Urs Wolfer, Bridget and Ethan Fletcher, Patrick Ruckstuhl, Sebastien Willemijns, Micah Cowan, Ruben Kerkhof,  
          Danny Ayers, Nick Dominguez, Gary Zellerbach, James Clark, Daniel Stenberg, John and Sandra Sowder, Salvatore Musumeci, Steve Eshelman, 
          Lucas Hewett, Ryan Cronin, Dave Winquist, Bob Denison,
          Wes Shelton, Kees Cook, Josh Colbert, Steve Kleisath, Chad Neptune, Nick Carrabba, Chris
          Carrabba, Erin Solari, Derick Cordoba, Ryan Alexander, 
          Tom Mainville, Janie Wargo, Jason Hansen, Tim Bray, Dan Brickley, Markus Hofmann, 
          Dan Connolly, Tim Berners-Lee, Louis Suarez-Potts, Ross Smith, Jeff Covey, 
          Ed Lee, Shawn Wilsher, Mike Connor, Johan Svedberg, Dedric Carter, and Debi
          Goulding. We also thank the Anthony Family, the Bryan Family, Juanita Anthony and Zimmy Bryan.</t>
		  
		  <t>We also thank the following contributors for assistance and review: Eran Hammer-Lahav, Lisa Dusseault, Mark Nottingham, Peter Saint-Andre, Julian Reschke, Chris Newman,
		  Ian Macfarlane, Dave Cridland, Barry Leiba, Uri Blumenthal, Paul Hoffman, Felix Sasaki, Matthias Fuchs, Mark Baker, Scott Cantor, Brian Carpenter, Alexey Melnikov, Lars Eggert, Pasi Eronen, Tim Polk, and Dan Romascanu.</t>
		  

	    </section> 

	    <section title="RELAX NG Compact Schema" anchor="schema"> 
	      <t>This appendix is informative.</t>
	      
	      <t>The Relax NG schema explicitly excludes elements in
	      the Metalink namespace that are not defined in this
	      revision of the specification. Requirements for Metalink
	      Processors encountering such markup are given in Sections
        <xref target="extensions.to.the.metalink.vocabulary" format="counter"/> and <xref target="processing.foreign.markup" format="counter"/>.
        </t>
        
	      <figure> 
		<artwork type="application/relax-ng-compact-syntax" name="collected">
# -*- rnc -*-
# RELAX NG Compact Syntax Grammar for the
# Metalink Format Specification Version 4
# Based on RFC 4287 schema

namespace local = ""
namespace metalink = "urn:ietf:params:xml:ns:metalink"
namespace xsd = "http://www.w3.org/2001/XMLSchema"

# Common attributes

metalinkCommonAttributes =
   attribute xml:lang { metalinkLanguageTag }?,
   undefinedAttribute*

# Text Constructs

metalinkTextConstruct =
   metalinkCommonAttributes,
   text

# Date Construct

metalinkDateConstruct =
   metalinkCommonAttributes,
   xsd:dateTime

start = metalinkMetalink

metalinkMetalink =
   element metalink:metalink {
      metalinkCommonAttributes,
      (metalinkFile+
       &amp; metalinkGenerator?
       &amp; metalinkOrigin?
       &amp; metalinkPublished?
       &amp; metalinkUpdated?
       &amp; extensionElement*)
   }

metalinkFile =
   element metalink:file {
      metalinkCommonAttributes,
      attribute name { text },
      (metalinkCopyright?
       &amp; metalinkDescription?
       &amp; metalinkHash*
       &amp; metalinkIdentity?
       &amp; metalinkLanguage*
       &amp; metalinkLogo?
       &amp; metalinkMetaURL*
       &amp; metalinkURL*
       &amp; metalinkOS*
       &amp; metalinkPieces*
       &amp; metalinkPublisher?
       &amp; metalinkSignature?
       &amp; metalinkSize?
       &amp; metalinkVersion?
       &amp; extensionElement*)
   }

metalinkPieces =
   element metalink:pieces {
      attribute length { xsd:positiveInteger },
      attribute type { text },
      metalinkHash+
   }

metalinkCopyright =
   element metalink:copyright {
      metalinkTextConstruct
   }

metalinkDescription =
   element metalink:description {
      metalinkTextConstruct
   }

metalinkGenerator =
   element metalink:generator {
      metalinkTextConstruct
   }

metalinkHash =
     element metalink:hash {
       attribute type { text }?,
       text
     }

metalinkIdentity =
   element metalink:identity {
      metalinkTextConstruct
   }

metalinkLanguage =
   element metalink:language {
      metalinkTextConstruct
   }

metalinkLogo =
   element metalink:logo {
      metalinkCommonAttributes,
      (metalinkUri)
   }

metalinkMetaURL =
   element metalink:metaurl {
      metalinkCommonAttributes,
      attribute priority { xsd:positiveInteger {
         maxInclusive = "999999"}}?,
      attribute mediatype { text },
      attribute name { text }?,
      (metalinkUri)
   }

metalinkOrigin =
   element metalink:origin {
      metalinkCommonAttributes,
      attribute dynamic { xsd:boolean }?,
      (metalinkUri)
   }

metalinkOS =
   element metalink:os {
      metalinkTextConstruct
   }

metalinkPublished =
   element metalink:published {
      metalinkDateConstruct
   }

metalinkPublisher =
   element metalink:publisher {
      metalinkCommonAttributes,
      attribute name { text },
      attribute url { metalinkUri }?
   }

metalinkSignature =
   element metalink:signature {
      attribute mediatype { text },
      metalinkTextConstruct
   }

metalinkSize =
   element metalink:size {
      xsd:nonNegativeInteger
   }

metalinkUpdated =
   element metalink:updated {
      metalinkDateConstruct
   }

metalinkURL =
   element metalink:url {
      metalinkCommonAttributes,
      attribute location { xsd:string {
         minLength = "2"  maxLength="2"}
      }?,
      attribute priority { xsd:positiveInteger {
         maxInclusive = "999999"}}?,
      (metalinkUri)
   }

metalinkVersion =
   element metalink:version {
      metalinkTextConstruct
   }

# As defined in RFC 3066 and compatible with RFC 5646
metalinkLanguageTag = xsd:string {
   pattern = "[A-Za-z]{1,8}(-[A-Za-z0-9]{1,8})*"
}

# Unconstrained; it's not entirely clear how IRI fit into
# xsd:anyURI so let's not try to constrain it here
metalinkUri = text

# Simple Extension

simpleExtensionElement =
   element * - metalink:* {
      text
   }

# Structured Extension

structuredExtensionElement =
   element * - metalink:* {
      (attribute * { text }+,
         (text|anyElement)*)
    | (attribute * { text }*,
       (text?, anyElement+, (text|anyElement)*))
   }

# Other Extensibility

extensionElement =
   simpleExtensionElement | structuredExtensionElement

undefinedAttribute =
  attribute * - (xml:lang | local:*) { text }

undefinedContent = (text|anyForeignElement)*

anyElement =
   element * {
      (attribute * { text }
       | text
       | anyElement)*
   }

anyForeignElement =
   element * - metalink:* {
      (attribute * { text }
       | text
       | anyElement)*
}

# EOF</artwork>
	      </figure>

		</section>
		  
	    <section title="Document History (to be removed by RFC Editor before publication)">
		<t>[[ to be removed by the RFC editor before publication as an RFC. ]]</t>
		<t>Updated versions can be found at http://tools.ietf.org/html/draft-bryan-metalink with frequent updates in Subversion at http://metalinks.svn.sourceforge.net/viewvc/metalinks/internetdraft/ </t>
		<t>Known issues concerning this draft:
	    <list style="symbols"> 
	      
		  <t>Waiting on: MIME type review.</t>

	    </list></t>

<t>-28 : February xx, 2010.
	    
	    <list style="symbols">
		
		  <t>Address IESG Comments and Discuss: Tim Polk.</t>
	   </list></t>
	   
<t>-27 : January 28, 2010.
	    
	    <list style="symbols">
		
		  <t>Address IESG Comments and Discuss: Pasi Eronen and Dan Romascanu.</t>
		  <t>Remove xml:base.</t>
	   </list></t>

<t>-26 : January 23, 2010.
	    
	    <list style="symbols">
		
		  <t>Address IESG Comments and Discuss: Alexey Melnikov, Lars Eggert.</t>
	   </list></t>

<t>-25 : January 11, 2010.
	    
	    <list style="symbols">
		
		  <t>Julian Reschke XML issues.</t>
		  <t>Generator ABNF and reference. Remove license element.</t>
		  <t>Update IPR to "trust200902".</t>
		  <t>dynamic element changed to dynamic attribute of origin element.</t>
	   </list></t>
		
<t>-24 : December 08, 2009.
	    
	    <list style="symbols">
		
		  <t>Eran Hammer-Lahav, Document Shepherd review changes.</t>
		  <t>Example XML indentation.</t>
		  <t>Baseline file hash: SHA-256.</t>
	   </list></t>
	   
<t>-23 : November 26, 2009.
	    
	    <list style="symbols">
		
		  <t>Lisa Dusseault, Apps Area AD review changes, Change RFC3688 from Normative to Informative Reference.</t>
		  <t>Schema: integer changed to positiveInteger or nonNegativeInteger where fitting.</t>
	   </list></t>
	   
<t>-22 : November 09, 2009.
	    
	    <list style="symbols">
		
		  <t>Clarifications.</t>
	   </list></t>
	   
<t>-21 : October 13, 2009.
	    
	    <list style="symbols">
		
		  <t>Update author details.</t>
	   </list></t>
	   
<t>-20 : October 12, 2009.
	    
	    <list style="symbols">
		
		  <t>RFC 5646 updates RFC 4646.</t>
	   </list></t>
	   
<t>-19 : October 5, 2009.
	    
	    <list style="symbols">
		
		  <t>Remove organization for independent authors.</t>
	   </list></t>

<t>-18 : October 4, 2009.
	    
	    <list style="symbols">
		
		  <t>File extension: .meta4</t>	      
		  <t>Hashes clarification, modified to allow multiple metalink:os elements, add size element to example.</t>
	   </list></t>

<t>-17 : September 28, 2009.
	    
	    <list style="symbols"> 
	      
		  <t>Typo correction.</t>
	   </list></t>

<t>-16 : August 31, 2009.
	    
	    <list style="symbols"> 
	      
		  <t>Clarifications.</t>
	   </list></t>
		
<t>-15 : August 26, 2009.
	    
	    <list style="symbols"> 
	      
		  <t>Rename "preference" attribute of metaurl and url elements to "priority", where lower values indicate higher priority.</t>
	   </list></t>

<t>-14 : August 24, 2009.
	    
	    <list style="symbols"> 
	      
		  <t>Update abstract and introduction.</t>
	   </list></t>

<t>-13 : August 21, 2009.
	    
	    <list style="symbols"> 
	      
		  <t>Remove files, resources, verification container elements.</t>
          <t>MIME type: application/metalink4+xml</t>
	   </list></t>
		
<t>-12 : August 18, 2009.
	    
	    <list style="symbols"> 
	      
		  <t>Remove "piece" attribute from hash elements in pieces container elements.</t>
          <t>Rename "uri" attribute of license and publisher elements to "url".</t>
	   </list></t>
		
<t>-11 : August 08, 2009.
	    
	    <list style="symbols"> 
	      
		  <t>Renamed type element (static or dynamic values) to dynamic element (true or false values).</t>
		  <t>Removed metadata inheritance and most other elements from files element.</t>
	   </list></t>

<t>-10 : July 28, 2009.
	    
	    <list style="symbols"> 
	      
		  <t>Schema fixes.</t>
	      <t>Rename metadata element to metaurl, add name attribute to it similar to file element's name attribute.</t>
		  <t>Update REC-xmldsig-core reference to second edition.</t>
	   </list></t>
	   
<t>-09 : July 11, 2009.
	    
	    <list style="symbols"> 
	      
	      <t>Replace ISO639-2 references with RFC 4646.</t>
		  <t>Add ISO3166-1.</t>
	   </list></t>

<t>-08 : July  04, 2009.
	    
	    <list style="symbols"> 
	      
	      <t>Clarifications.</t>
		  <t>Remove "uri" and "version" attributes from generator element.</t>
	   </list></t>
		
<t>-07 : June 18, 2009.
	    
	    <list style="symbols"> 
	      
	      <t>This ID describes the Metalink document format/schema.</t>
	      <t>Remove "Client Implementation Considerations" section.</t>
	      <t>Expand "Known issues" section of Document History.</t>
	   </list></t>
	   
<t>-06 : March 3, 2009.
	    
	    <list style="symbols">	      

	      <t>Add authors and this Document History section.</t>
	    </list></t>
		
<t>-05 : January 13, 2009.
	    
	    <list style="symbols">	      

	      <t>Clarifications.</t>
	    </list></t>
		
<t>-04 : December 31, 2008.
	    
	    <list style="symbols">	      

	      <t>New IPR notice as required by IETF.</t>
		  <t>Correct "metalink:pieces" Element text.</t>
		  <t>Add hash examples.</t>
		  <t>Slim down "Securing Metalink Documents" section.</t>
		  <t>Recommend at least SHA-1.</t>
	    </list></t> 

<t>-03 : September 19, 2008.
	    
	    <list style="symbols">	      

	      <t>New namespace - urn:ietf:params:xml:ns:metalink</t>
		  <t>Use the IANA registry named "Operating System Names" to define values for OS types.</t>
		  <t>Add "Client Implementation Considerations" section, which includes Content Negotiation.</t>
	    </list></t>
		
<t>-02 : September 4, 2008.
	    
	    <list style="symbols">	      

	      <t>Use the IANA registry named "Hash Function Textual Names" for hash types.</t>
		  <t>metadata Element for listing .torrent, .metalink, etc.</t>
		  <t>Remove type attribute for url Element.</t>
	    </list></t>
		
<t>-01 : August 28, 2008.
	    
	    <list style="symbols">	      

	      <t>Clarify directory info in name attribute, hash types, add text for preference attribute.</t>
	    </list></t>
		
<t>-00 : August 23, 2008.
	    
	    <list style="symbols">	      

	      <t>Initial draft; Text largely based on RFC 4287, ideas from Metalink 3.0 specification.</t>
	    </list></t>
		
	    </section> 		  
	  </back> 
	</rfc>
